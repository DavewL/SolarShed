
c:/Users/dwlombardo/Documents/Particle/projects/SolarShed/target/SolarShed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a3e00  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000078  20000300  080a3e04  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000858  20000378  20000378  00030378  2**3
                  ALLOC
  5 .module_info_suffix 00000028  080a3e7c  080a3e7c  00023e7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a3ea4  080a3ea4  00023ea4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0016dadd  00000000  00000000  00023ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00022abf  00000000  00000000  00191985  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00018b28  00000000  00000000  001b4444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002868  00000000  00000000  001ccf6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003ae8  00000000  00000000  001cf7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000415f7  00000000  00000000  001d32bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000583d0  00000000  00000000  002148b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009e4f4  00000000  00000000  0026cc83  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000cd78  00000000  00000000  0030b178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	10 38 0a 08                                         .8..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 faf5 	bl	80a361c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fafa 	bl	80a3632 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a3e04 	.word	0x080a3e04
 80a004c:	20000378 	.word	0x20000378
 80a0050:	20000378 	.word	0x20000378
 80a0054:	20000bd0 	.word	0x20000bd0
 80a0058:	20000bd0 	.word	0x20000bd0

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 ff77 	bl	80a1f50 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3d50 	.word	0x080a3d50
 80a0084:	080a3df8 	.word	0x080a3df8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bac2 	b.w	80a0610 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa1d 	bl	80a04cc <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bf1d 	b.w	80a1ed4 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bc5d 	b.w	80a1958 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bc63 	b.w	80a1968 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_GLOBAL__sub_I__Z13sendStatusCANv>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a00b2:	f001 ba7b 	b.w	80a15ac <HAL_Pin_Map>

080a00b6 <_GLOBAL__sub_I__Z12initValR3CANv>:
 80a00b6:	f001 ba79 	b.w	80a15ac <HAL_Pin_Map>

080a00ba <_GLOBAL__sub_I__Z11initDisplayi>:
 80a00ba:	f001 ba77 	b.w	80a15ac <HAL_Pin_Map>

080a00be <_ZN7CarloopI16CarloopRevision2ED1Ev>:

    static constexpr auto FEATURES = CARLOOP_CAN | CARLOOP_GPS | CARLOOP_BATTERY;
};

template <typename Config>
class Carloop
 80a00be:	4770      	bx	lr

080a00c0 <_Z7initCANv>:
#include <carloop.h>

Carloop<CarloopRevision2> carloop;

//-----------------INITIALIZE CANBUS---------------------------------------
void initCAN(void){
 80a00c0:	b510      	push	{r4, lr}
  //setup CANbus interface
  carloop.begin(CARLOOP_CAN);
 80a00c2:	4c07      	ldr	r4, [pc, #28]	; (80a00e0 <_Z7initCANv+0x20>)
 80a00c4:	2101      	movs	r1, #1
 80a00c6:	4620      	mov	r0, r4
 80a00c8:	f000 fc83 	bl	80a09d2 <_ZN7CarloopI16CarloopRevision2E5beginE17CarloopFeatures_e>
  carloop.setCANSpeed(250000);        //must set can speed before enabling bus!
 80a00cc:	4620      	mov	r0, r4
 80a00ce:	4905      	ldr	r1, [pc, #20]	; (80a00e4 <_Z7initCANv+0x24>)
 80a00d0:	f000 fc0a 	bl	80a08e8 <_ZN7CarloopI16CarloopRevision2E11setCANSpeedEm>
  carloop.enableCAN();                        //enable canbus
 80a00d4:	4620      	mov	r0, r4
}
 80a00d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//-----------------INITIALIZE CANBUS---------------------------------------
void initCAN(void){
  //setup CANbus interface
  carloop.begin(CARLOOP_CAN);
  carloop.setCANSpeed(250000);        //must set can speed before enabling bus!
  carloop.enableCAN();                        //enable canbus
 80a00da:	f000 bc08 	b.w	80a08ee <_ZN7CarloopI16CarloopRevision2E9enableCANEv>
 80a00de:	bf00      	nop
 80a00e0:	2000037c 	.word	0x2000037c
 80a00e4:	0003d090 	.word	0x0003d090

080a00e8 <_GLOBAL__sub_I_carloop>:
}
 80a00e8:	b510      	push	{r4, lr}
#include "defines.h"
#include "Globals.h"

#include <carloop.h>

Carloop<CarloopRevision2> carloop;
 80a00ea:	4c06      	ldr	r4, [pc, #24]	; (80a0104 <_GLOBAL__sub_I_carloop+0x1c>)
 80a00ec:	f001 fa5e 	bl	80a15ac <HAL_Pin_Map>
 80a00f0:	4620      	mov	r0, r4
 80a00f2:	f000 fbe5 	bl	80a08c0 <_ZN7CarloopI16CarloopRevision2EC1Ev>
 80a00f6:	4620      	mov	r0, r4
void initCAN(void){
  //setup CANbus interface
  carloop.begin(CARLOOP_CAN);
  carloop.setCANSpeed(250000);        //must set can speed before enabling bus!
  carloop.enableCAN();                        //enable canbus
}
 80a00f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "defines.h"
#include "Globals.h"

#include <carloop.h>

Carloop<CarloopRevision2> carloop;
 80a00fc:	4a02      	ldr	r2, [pc, #8]	; (80a0108 <_GLOBAL__sub_I_carloop+0x20>)
 80a00fe:	4903      	ldr	r1, [pc, #12]	; (80a010c <_GLOBAL__sub_I_carloop+0x24>)
 80a0100:	f002 ba04 	b.w	80a250c <__aeabi_atexit>
 80a0104:	2000037c 	.word	0x2000037c
 80a0108:	20000378 	.word	0x20000378
 80a010c:	080a00bf 	.word	0x080a00bf

080a0110 <_Z10initTracerv>:

// instantiate ModbusMaster object as slave ID 1
ModbusMaster node(1);

  
void initTracer(void){
 80a0110:	b510      	push	{r4, lr}
    node.begin(115200);
 80a0112:	4c0a      	ldr	r4, [pc, #40]	; (80a013c <_Z10initTracerv+0x2c>)
 80a0114:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a0118:	4620      	mov	r0, r4
 80a011a:	f000 ff95 	bl	80a1048 <_ZN12ModbusMaster5beginEm>
    node.disableTXpin();
 80a011e:	4620      	mov	r0, r4
 80a0120:	f000 ffae 	bl	80a1080 <_ZN12ModbusMaster12disableTXpinEv>
    //node.enableDebug();
	delay(100);
 80a0124:	2064      	movs	r0, #100	; 0x64
 80a0126:	f001 fe8b 	bl	80a1e40 <delay>
	Serial1.begin(115200);
 80a012a:	f002 f89d 	bl	80a2268 <_Z22__fetch_global_Serial1v>
}
 80a012e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void initTracer(void){
    node.begin(115200);
    node.disableTXpin();
    //node.enableDebug();
	delay(100);
	Serial1.begin(115200);
 80a0132:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a0136:	f002 b891 	b.w	80a225c <_ZN11USARTSerial5beginEm>
 80a013a:	bf00      	nop
 80a013c:	2000046c 	.word	0x2000046c

080a0140 <_Z18tracerBattVoltReadv>:
}

//read batt voltage
bool tracerBattVoltRead(void){
 80a0140:	b513      	push	{r0, r1, r4, lr}
	uint8_t result;
	//uint16_t data[10];
	bool readSuccess = false;
	result = node.readInputRegisters(0x331A,1);
 80a0142:	2201      	movs	r2, #1
 80a0144:	f243 311a 	movw	r1, #13082	; 0x331a
 80a0148:	4811      	ldr	r0, [pc, #68]	; (80a0190 <_Z18tracerBattVoltReadv+0x50>)
 80a014a:	f001 f9d3 	bl	80a14f4 <_ZN12ModbusMaster18readInputRegistersEth>
	if (result == node.ku8MBSuccess) {
 80a014e:	4601      	mov	r1, r0
 80a0150:	b9d0      	cbnz	r0, 80a0188 <_Z18tracerBattVoltReadv+0x48>
		tracerBattVoltage = (double)node.getResponseBuffer(0) / 100.0f;
 80a0152:	480f      	ldr	r0, [pc, #60]	; (80a0190 <_Z18tracerBattVoltReadv+0x50>)
 80a0154:	f000 ff9a 	bl	80a108c <_ZN12ModbusMaster17getResponseBufferEh>
 80a0158:	f002 fc82 	bl	80a2a60 <__aeabi_ui2d>
 80a015c:	2200      	movs	r2, #0
 80a015e:	4b0d      	ldr	r3, [pc, #52]	; (80a0194 <_Z18tracerBattVoltReadv+0x54>)
 80a0160:	f002 fe1e 	bl	80a2da0 <__aeabi_ddiv>
 80a0164:	4c0c      	ldr	r4, [pc, #48]	; (80a0198 <_Z18tracerBattVoltReadv+0x58>)
 80a0166:	e9c4 0100 	strd	r0, r1, [r4]
		Serial.print(tracerBattVoltage);
 80a016a:	f001 ffd7 	bl	80a211c <_Z16_fetch_usbserialv>
 80a016e:	2302      	movs	r3, #2
 80a0170:	9300      	str	r3, [sp, #0]
 80a0172:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a0176:	f001 fe15 	bl	80a1da4 <_ZN5Print5printEdi>
		Serial.println("");
 80a017a:	f001 ffcf 	bl	80a211c <_Z16_fetch_usbserialv>
 80a017e:	4907      	ldr	r1, [pc, #28]	; (80a019c <_Z18tracerBattVoltReadv+0x5c>)
 80a0180:	f001 fd09 	bl	80a1b96 <_ZN5Print7printlnEPKc>
		readSuccess = true;
 80a0184:	2001      	movs	r0, #1
 80a0186:	e000      	b.n	80a018a <_Z18tracerBattVoltReadv+0x4a>
	}
	else {
		readSuccess = false;
 80a0188:	2000      	movs	r0, #0
	}
	return readSuccess;
}
 80a018a:	b002      	add	sp, #8
 80a018c:	bd10      	pop	{r4, pc}
 80a018e:	bf00      	nop
 80a0190:	2000046c 	.word	0x2000046c
 80a0194:	40590000 	.word	0x40590000
 80a0198:	20000628 	.word	0x20000628
 80a019c:	080a3a4a 	.word	0x080a3a4a

080a01a0 <_Z18tracerBattCurrReadv>:

//read batt current
bool tracerBattCurrRead(void){
 80a01a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t result;
	bool readSuccess = false;
	result = node.readInputRegisters(0x331B,2);
 80a01a2:	2202      	movs	r2, #2
 80a01a4:	f243 311b 	movw	r1, #13083	; 0x331b
 80a01a8:	4815      	ldr	r0, [pc, #84]	; (80a0200 <_Z18tracerBattCurrReadv+0x60>)
 80a01aa:	f001 f9a3 	bl	80a14f4 <_ZN12ModbusMaster18readInputRegistersEth>
	if (result == node.ku8MBSuccess) {
 80a01ae:	4604      	mov	r4, r0
 80a01b0:	bb10      	cbnz	r0, 80a01f8 <_Z18tracerBattCurrReadv+0x58>
		tracerBattCurrent = (double)(node.getResponseBuffer(1) << 16 | node.getResponseBuffer(0)) / 100.0f;
 80a01b2:	2101      	movs	r1, #1
 80a01b4:	4812      	ldr	r0, [pc, #72]	; (80a0200 <_Z18tracerBattCurrReadv+0x60>)
 80a01b6:	f000 ff69 	bl	80a108c <_ZN12ModbusMaster17getResponseBufferEh>
 80a01ba:	4621      	mov	r1, r4
 80a01bc:	4605      	mov	r5, r0
 80a01be:	4810      	ldr	r0, [pc, #64]	; (80a0200 <_Z18tracerBattCurrReadv+0x60>)
 80a01c0:	f000 ff64 	bl	80a108c <_ZN12ModbusMaster17getResponseBufferEh>
 80a01c4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80a01c8:	f002 fc5a 	bl	80a2a80 <__aeabi_i2d>
 80a01cc:	2200      	movs	r2, #0
 80a01ce:	4b0d      	ldr	r3, [pc, #52]	; (80a0204 <_Z18tracerBattCurrReadv+0x64>)
 80a01d0:	f002 fde6 	bl	80a2da0 <__aeabi_ddiv>
 80a01d4:	4c0c      	ldr	r4, [pc, #48]	; (80a0208 <_Z18tracerBattCurrReadv+0x68>)
 80a01d6:	e9c4 0100 	strd	r0, r1, [r4]
		Serial.print(tracerBattCurrent);
 80a01da:	f001 ff9f 	bl	80a211c <_Z16_fetch_usbserialv>
 80a01de:	2302      	movs	r3, #2
 80a01e0:	9300      	str	r3, [sp, #0]
 80a01e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a01e6:	f001 fddd 	bl	80a1da4 <_ZN5Print5printEdi>
		Serial.println("");
 80a01ea:	f001 ff97 	bl	80a211c <_Z16_fetch_usbserialv>
 80a01ee:	4907      	ldr	r1, [pc, #28]	; (80a020c <_Z18tracerBattCurrReadv+0x6c>)
 80a01f0:	f001 fcd1 	bl	80a1b96 <_ZN5Print7printlnEPKc>

		readSuccess = true;
 80a01f4:	2001      	movs	r0, #1
 80a01f6:	e000      	b.n	80a01fa <_Z18tracerBattCurrReadv+0x5a>
	}
	else {
		readSuccess = false;
 80a01f8:	2000      	movs	r0, #0
	}
	return readSuccess;
}
 80a01fa:	b003      	add	sp, #12
 80a01fc:	bd30      	pop	{r4, r5, pc}
 80a01fe:	bf00      	nop
 80a0200:	2000046c 	.word	0x2000046c
 80a0204:	40590000 	.word	0x40590000
 80a0208:	20000630 	.word	0x20000630
 80a020c:	080a3a4a 	.word	0x080a3a4a

080a0210 <_Z16tracerPvVoltReadv>:

//read PV voltage
bool tracerPvVoltRead(void){
 80a0210:	b513      	push	{r0, r1, r4, lr}
	uint8_t result;
	bool readSuccess = false;
	result = node.readInputRegisters(0x3100,1);
 80a0212:	2201      	movs	r2, #1
 80a0214:	f44f 5144 	mov.w	r1, #12544	; 0x3100
 80a0218:	4811      	ldr	r0, [pc, #68]	; (80a0260 <_Z16tracerPvVoltReadv+0x50>)
 80a021a:	f001 f96b 	bl	80a14f4 <_ZN12ModbusMaster18readInputRegistersEth>
	if (result == node.ku8MBSuccess) {
 80a021e:	4601      	mov	r1, r0
 80a0220:	b9d0      	cbnz	r0, 80a0258 <_Z16tracerPvVoltReadv+0x48>
		pVvoltage = (double)node.getResponseBuffer(0) / 100.0f;
 80a0222:	480f      	ldr	r0, [pc, #60]	; (80a0260 <_Z16tracerPvVoltReadv+0x50>)
 80a0224:	f000 ff32 	bl	80a108c <_ZN12ModbusMaster17getResponseBufferEh>
 80a0228:	f002 fc1a 	bl	80a2a60 <__aeabi_ui2d>
 80a022c:	2200      	movs	r2, #0
 80a022e:	4b0d      	ldr	r3, [pc, #52]	; (80a0264 <_Z16tracerPvVoltReadv+0x54>)
 80a0230:	f002 fdb6 	bl	80a2da0 <__aeabi_ddiv>
 80a0234:	4c0c      	ldr	r4, [pc, #48]	; (80a0268 <_Z16tracerPvVoltReadv+0x58>)
 80a0236:	e9c4 0100 	strd	r0, r1, [r4]
		Serial.print(pVvoltage);
 80a023a:	f001 ff6f 	bl	80a211c <_Z16_fetch_usbserialv>
 80a023e:	2302      	movs	r3, #2
 80a0240:	9300      	str	r3, [sp, #0]
 80a0242:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a0246:	f001 fdad 	bl	80a1da4 <_ZN5Print5printEdi>
		Serial.println("");
 80a024a:	f001 ff67 	bl	80a211c <_Z16_fetch_usbserialv>
 80a024e:	4907      	ldr	r1, [pc, #28]	; (80a026c <_Z16tracerPvVoltReadv+0x5c>)
 80a0250:	f001 fca1 	bl	80a1b96 <_ZN5Print7printlnEPKc>
		readSuccess = true;
 80a0254:	2001      	movs	r0, #1
 80a0256:	e000      	b.n	80a025a <_Z16tracerPvVoltReadv+0x4a>
	}
	else {
		readSuccess = false;
 80a0258:	2000      	movs	r0, #0
	}
	return readSuccess;
}
 80a025a:	b002      	add	sp, #8
 80a025c:	bd10      	pop	{r4, pc}
 80a025e:	bf00      	nop
 80a0260:	2000046c 	.word	0x2000046c
 80a0264:	40590000 	.word	0x40590000
 80a0268:	200005e0 	.word	0x200005e0
 80a026c:	080a3a4a 	.word	0x080a3a4a

080a0270 <_Z16tracerPvCurrReadv>:

//read PV current
bool tracerPvCurrRead(void){
 80a0270:	b513      	push	{r0, r1, r4, lr}
	uint8_t result;
	bool readSuccess = false;
	result = node.readInputRegisters(0x3101,1);
 80a0272:	2201      	movs	r2, #1
 80a0274:	f243 1101 	movw	r1, #12545	; 0x3101
 80a0278:	4811      	ldr	r0, [pc, #68]	; (80a02c0 <_Z16tracerPvCurrReadv+0x50>)
 80a027a:	f001 f93b 	bl	80a14f4 <_ZN12ModbusMaster18readInputRegistersEth>
	if (result == node.ku8MBSuccess) {
 80a027e:	4601      	mov	r1, r0
 80a0280:	b9d0      	cbnz	r0, 80a02b8 <_Z16tracerPvCurrReadv+0x48>
		pVcurrent = (double)node.getResponseBuffer(0) / 100.0f;
 80a0282:	480f      	ldr	r0, [pc, #60]	; (80a02c0 <_Z16tracerPvCurrReadv+0x50>)
 80a0284:	f000 ff02 	bl	80a108c <_ZN12ModbusMaster17getResponseBufferEh>
 80a0288:	f002 fbea 	bl	80a2a60 <__aeabi_ui2d>
 80a028c:	2200      	movs	r2, #0
 80a028e:	4b0d      	ldr	r3, [pc, #52]	; (80a02c4 <_Z16tracerPvCurrReadv+0x54>)
 80a0290:	f002 fd86 	bl	80a2da0 <__aeabi_ddiv>
 80a0294:	4c0c      	ldr	r4, [pc, #48]	; (80a02c8 <_Z16tracerPvCurrReadv+0x58>)
 80a0296:	e9c4 0100 	strd	r0, r1, [r4]
		Serial.print(pVcurrent);
 80a029a:	f001 ff3f 	bl	80a211c <_Z16_fetch_usbserialv>
 80a029e:	2302      	movs	r3, #2
 80a02a0:	9300      	str	r3, [sp, #0]
 80a02a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a02a6:	f001 fd7d 	bl	80a1da4 <_ZN5Print5printEdi>
		Serial.println("");
 80a02aa:	f001 ff37 	bl	80a211c <_Z16_fetch_usbserialv>
 80a02ae:	4907      	ldr	r1, [pc, #28]	; (80a02cc <_Z16tracerPvCurrReadv+0x5c>)
 80a02b0:	f001 fc71 	bl	80a1b96 <_ZN5Print7printlnEPKc>
		readSuccess = true;
 80a02b4:	2001      	movs	r0, #1
 80a02b6:	e000      	b.n	80a02ba <_Z16tracerPvCurrReadv+0x4a>
	}
	else {
		readSuccess = false;
 80a02b8:	2000      	movs	r0, #0
	}
	return readSuccess;
}
 80a02ba:	b002      	add	sp, #8
 80a02bc:	bd10      	pop	{r4, pc}
 80a02be:	bf00      	nop
 80a02c0:	2000046c 	.word	0x2000046c
 80a02c4:	40590000 	.word	0x40590000
 80a02c8:	20000620 	.word	0x20000620
 80a02cc:	080a3a4a 	.word	0x080a3a4a

080a02d0 <_Z18tracerLoadCurrReadv>:

//read Load Current
bool tracerLoadCurrRead(void){
 80a02d0:	b513      	push	{r0, r1, r4, lr}
	uint8_t result;
	bool readSuccess = false;
	result = node.readInputRegisters(0x310D,1);
 80a02d2:	2201      	movs	r2, #1
 80a02d4:	f243 110d 	movw	r1, #12557	; 0x310d
 80a02d8:	4811      	ldr	r0, [pc, #68]	; (80a0320 <_Z18tracerLoadCurrReadv+0x50>)
 80a02da:	f001 f90b 	bl	80a14f4 <_ZN12ModbusMaster18readInputRegistersEth>
	if (result == node.ku8MBSuccess) {
 80a02de:	4601      	mov	r1, r0
 80a02e0:	b9d0      	cbnz	r0, 80a0318 <_Z18tracerLoadCurrReadv+0x48>
		heaterCurrent = (double)node.getResponseBuffer(0) / 100.0f;
 80a02e2:	480f      	ldr	r0, [pc, #60]	; (80a0320 <_Z18tracerLoadCurrReadv+0x50>)
 80a02e4:	f000 fed2 	bl	80a108c <_ZN12ModbusMaster17getResponseBufferEh>
 80a02e8:	f002 fbba 	bl	80a2a60 <__aeabi_ui2d>
 80a02ec:	2200      	movs	r2, #0
 80a02ee:	4b0d      	ldr	r3, [pc, #52]	; (80a0324 <_Z18tracerLoadCurrReadv+0x54>)
 80a02f0:	f002 fd56 	bl	80a2da0 <__aeabi_ddiv>
 80a02f4:	4c0c      	ldr	r4, [pc, #48]	; (80a0328 <_Z18tracerLoadCurrReadv+0x58>)
 80a02f6:	e9c4 0100 	strd	r0, r1, [r4]
		Serial.print(heaterCurrent);
 80a02fa:	f001 ff0f 	bl	80a211c <_Z16_fetch_usbserialv>
 80a02fe:	2302      	movs	r3, #2
 80a0300:	9300      	str	r3, [sp, #0]
 80a0302:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a0306:	f001 fd4d 	bl	80a1da4 <_ZN5Print5printEdi>
		Serial.println("");
 80a030a:	f001 ff07 	bl	80a211c <_Z16_fetch_usbserialv>
 80a030e:	4907      	ldr	r1, [pc, #28]	; (80a032c <_Z18tracerLoadCurrReadv+0x5c>)
 80a0310:	f001 fc41 	bl	80a1b96 <_ZN5Print7printlnEPKc>
		readSuccess = true;
 80a0314:	2001      	movs	r0, #1
 80a0316:	e000      	b.n	80a031a <_Z18tracerLoadCurrReadv+0x4a>
	}
	else {
		readSuccess = false;
 80a0318:	2000      	movs	r0, #0
	}
	return readSuccess;
}
 80a031a:	b002      	add	sp, #8
 80a031c:	bd10      	pop	{r4, pc}
 80a031e:	bf00      	nop
 80a0320:	2000046c 	.word	0x2000046c
 80a0324:	40590000 	.word	0x40590000
 80a0328:	20000618 	.word	0x20000618
 80a032c:	080a3a4a 	.word	0x080a3a4a

080a0330 <_Z16tracerInsideTempv>:

//read Temperature
bool tracerInsideTemp(void){
 80a0330:	b513      	push	{r0, r1, r4, lr}
	uint8_t result;
	bool readSuccess = false;
	result = node.readInputRegisters(0x3110,1);
 80a0332:	2201      	movs	r2, #1
 80a0334:	f243 1110 	movw	r1, #12560	; 0x3110
 80a0338:	4811      	ldr	r0, [pc, #68]	; (80a0380 <_Z16tracerInsideTempv+0x50>)
 80a033a:	f001 f8db 	bl	80a14f4 <_ZN12ModbusMaster18readInputRegistersEth>
	if (result == node.ku8MBSuccess) {
 80a033e:	4601      	mov	r1, r0
 80a0340:	b9d8      	cbnz	r0, 80a037a <_Z16tracerInsideTempv+0x4a>
		insideAmbientTemp = (double)(int16_t)node.getResponseBuffer(0) / 100.0f;
 80a0342:	480f      	ldr	r0, [pc, #60]	; (80a0380 <_Z16tracerInsideTempv+0x50>)
 80a0344:	f000 fea2 	bl	80a108c <_ZN12ModbusMaster17getResponseBufferEh>
 80a0348:	b200      	sxth	r0, r0
 80a034a:	f002 fb99 	bl	80a2a80 <__aeabi_i2d>
 80a034e:	2200      	movs	r2, #0
 80a0350:	4b0c      	ldr	r3, [pc, #48]	; (80a0384 <_Z16tracerInsideTempv+0x54>)
 80a0352:	f002 fd25 	bl	80a2da0 <__aeabi_ddiv>
 80a0356:	4c0c      	ldr	r4, [pc, #48]	; (80a0388 <_Z16tracerInsideTempv+0x58>)
 80a0358:	e9c4 0100 	strd	r0, r1, [r4]
		Serial.print(insideAmbientTemp);
 80a035c:	f001 fede 	bl	80a211c <_Z16_fetch_usbserialv>
 80a0360:	2302      	movs	r3, #2
 80a0362:	9300      	str	r3, [sp, #0]
 80a0364:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a0368:	f001 fd1c 	bl	80a1da4 <_ZN5Print5printEdi>
		Serial.println("");
 80a036c:	f001 fed6 	bl	80a211c <_Z16_fetch_usbserialv>
 80a0370:	4906      	ldr	r1, [pc, #24]	; (80a038c <_Z16tracerInsideTempv+0x5c>)
 80a0372:	f001 fc10 	bl	80a1b96 <_ZN5Print7printlnEPKc>
		readSuccess = true;
 80a0376:	2001      	movs	r0, #1
 80a0378:	e000      	b.n	80a037c <_Z16tracerInsideTempv+0x4c>
	}
	else {
		readSuccess = false;
 80a037a:	2000      	movs	r0, #0
	}
	return readSuccess;
}
 80a037c:	b002      	add	sp, #8
 80a037e:	bd10      	pop	{r4, pc}
 80a0380:	2000046c 	.word	0x2000046c
 80a0384:	40590000 	.word	0x40590000
 80a0388:	200005a0 	.word	0x200005a0
 80a038c:	080a3a4a 	.word	0x080a3a4a

080a0390 <_Z13tracerBattSOCv>:

bool tracerBattSOC(void){
 80a0390:	b513      	push	{r0, r1, r4, lr}
	uint8_t result;
	bool readSuccess = false;
	result = node.readInputRegisters(0x311A,1);
 80a0392:	2201      	movs	r2, #1
 80a0394:	f243 111a 	movw	r1, #12570	; 0x311a
 80a0398:	4811      	ldr	r0, [pc, #68]	; (80a03e0 <_Z13tracerBattSOCv+0x50>)
 80a039a:	f001 f8ab 	bl	80a14f4 <_ZN12ModbusMaster18readInputRegistersEth>
	if (result == node.ku8MBSuccess) {
 80a039e:	4601      	mov	r1, r0
 80a03a0:	b9d0      	cbnz	r0, 80a03d8 <_Z13tracerBattSOCv+0x48>
		battPackSOC = (double)node.getResponseBuffer(0) / 100.0f;
 80a03a2:	480f      	ldr	r0, [pc, #60]	; (80a03e0 <_Z13tracerBattSOCv+0x50>)
 80a03a4:	f000 fe72 	bl	80a108c <_ZN12ModbusMaster17getResponseBufferEh>
 80a03a8:	f002 fb5a 	bl	80a2a60 <__aeabi_ui2d>
 80a03ac:	2200      	movs	r2, #0
 80a03ae:	4b0d      	ldr	r3, [pc, #52]	; (80a03e4 <_Z13tracerBattSOCv+0x54>)
 80a03b0:	f002 fcf6 	bl	80a2da0 <__aeabi_ddiv>
 80a03b4:	4c0c      	ldr	r4, [pc, #48]	; (80a03e8 <_Z13tracerBattSOCv+0x58>)
 80a03b6:	e9c4 0100 	strd	r0, r1, [r4]
		Serial.print(battPackSOC);
 80a03ba:	f001 feaf 	bl	80a211c <_Z16_fetch_usbserialv>
 80a03be:	2302      	movs	r3, #2
 80a03c0:	9300      	str	r3, [sp, #0]
 80a03c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a03c6:	f001 fced 	bl	80a1da4 <_ZN5Print5printEdi>
		Serial.println("");
 80a03ca:	f001 fea7 	bl	80a211c <_Z16_fetch_usbserialv>
 80a03ce:	4907      	ldr	r1, [pc, #28]	; (80a03ec <_Z13tracerBattSOCv+0x5c>)
 80a03d0:	f001 fbe1 	bl	80a1b96 <_ZN5Print7printlnEPKc>
		readSuccess = true;
 80a03d4:	2001      	movs	r0, #1
 80a03d6:	e000      	b.n	80a03da <_Z13tracerBattSOCv+0x4a>
	}
	else {
		readSuccess = false;
 80a03d8:	2000      	movs	r0, #0
	}
	return readSuccess;
}
 80a03da:	b002      	add	sp, #8
 80a03dc:	bd10      	pop	{r4, pc}
 80a03de:	bf00      	nop
 80a03e0:	2000046c 	.word	0x2000046c
 80a03e4:	40590000 	.word	0x40590000
 80a03e8:	200005b0 	.word	0x200005b0
 80a03ec:	080a3a4a 	.word	0x080a3a4a

080a03f0 <_Z18tracerSetLoadStatei>:

bool tracerSetLoadState(int state){
	int result;
	result = node.writeSingleCoil(0x2,(uint8_t)state);
 80a03f0:	b2c2      	uxtb	r2, r0
		readSuccess = false;
	}
	return readSuccess;
}

bool tracerSetLoadState(int state){
 80a03f2:	b508      	push	{r3, lr}
	int result;
	result = node.writeSingleCoil(0x2,(uint8_t)state);
 80a03f4:	2102      	movs	r1, #2
 80a03f6:	4803      	ldr	r0, [pc, #12]	; (80a0404 <_Z18tracerSetLoadStatei+0x14>)
 80a03f8:	f001 f881 	bl	80a14fe <_ZN12ModbusMaster15writeSingleCoilEth>
		return true;
	}
	else{
		return false;
	}
}
 80a03fc:	fab0 f080 	clz	r0, r0
 80a0400:	0940      	lsrs	r0, r0, #5
 80a0402:	bd08      	pop	{r3, pc}
 80a0404:	2000046c 	.word	0x2000046c

080a0408 <_GLOBAL__sub_I_node>:
 80a0408:	b508      	push	{r3, lr}
 80a040a:	f001 f8cf 	bl	80a15ac <HAL_Pin_Map>
 80a040e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "defines.h"
#include "Globals.h"


// instantiate ModbusMaster object as slave ID 1
ModbusMaster node(1);
 80a0412:	2101      	movs	r1, #1
 80a0414:	4801      	ldr	r0, [pc, #4]	; (80a041c <_GLOBAL__sub_I_node+0x14>)
 80a0416:	f000 be13 	b.w	80a1040 <_ZN12ModbusMasterC1Eh>
 80a041a:	bf00      	nop
 80a041c:	2000046c 	.word	0x2000046c

080a0420 <_Z17canReceiveMessagev>:
int msgRec = 1;

extern Carloop<CarloopRevision2> carloop;

//-------------SERVICE NEW CAN MESSAGES-------------------------------------
int canReceiveMessage(){
 80a0420:	b530      	push	{r4, r5, lr}
     : id { 0 },
       size { sizeof(CANMessage) },
       extended { false },
       rtr { false },
       len { 0 },
       data { 0 }
 80a0422:	2300      	movs	r3, #0
 80a0424:	b085      	sub	sp, #20
 80a0426:	2210      	movs	r2, #16
 80a0428:	9300      	str	r3, [sp, #0]
 80a042a:	f88d 3005 	strb.w	r3, [sp, #5]
 80a042e:	f88d 3006 	strb.w	r3, [sp, #6]
 80a0432:	f88d 3007 	strb.w	r3, [sp, #7]
 80a0436:	9302      	str	r3, [sp, #8]
 80a0438:	9303      	str	r3, [sp, #12]
 80a043a:	f88d 2004 	strb.w	r2, [sp, #4]
  CANMessage message;
  int tempBitwise = 0;
  int tempBitwise2 = 0;
  static int timePrevMsg = 0;
  int timeNow = Time.now();
 80a043e:	f001 fced 	bl	80a1e1c <_ZN9TimeClass3nowEv>

  if(timePrevMsg == 0){
 80a0442:	4c0c      	ldr	r4, [pc, #48]	; (80a0474 <_Z17canReceiveMessagev+0x54>)
int canReceiveMessage(){
  CANMessage message;
  int tempBitwise = 0;
  int tempBitwise2 = 0;
  static int timePrevMsg = 0;
  int timeNow = Time.now();
 80a0444:	4605      	mov	r5, r0

  if(timePrevMsg == 0){
 80a0446:	6823      	ldr	r3, [r4, #0]
 80a0448:	b903      	cbnz	r3, 80a044c <_Z17canReceiveMessagev+0x2c>
      timePrevMsg = timeNow;
 80a044a:	6020      	str	r0, [r4, #0]
  }

  if(carloop.can().receive(message)){  //if new can message received, decode and reset counter
 80a044c:	480a      	ldr	r0, [pc, #40]	; (80a0478 <_Z17canReceiveMessagev+0x58>)
 80a044e:	f000 fa4d 	bl	80a08ec <_ZN7CarloopI16CarloopRevision2E3canEv>
 80a0452:	4669      	mov	r1, sp
 80a0454:	f001 ff7f 	bl	80a2356 <_ZN10CANChannel7receiveER10CANMessage>
 80a0458:	4b08      	ldr	r3, [pc, #32]	; (80a047c <_Z17canReceiveMessagev+0x5c>)
 80a045a:	b110      	cbz	r0, 80a0462 <_Z17canReceiveMessagev+0x42>
    msgRec = 1;
 80a045c:	2201      	movs	r2, #1
 80a045e:	601a      	str	r2, [r3, #0]
 80a0460:	e004      	b.n	80a046c <_Z17canReceiveMessagev+0x4c>
    //decode the message


  }
  else{
    if ((timeNow - timePrevMsg) > CAN_LOST_TIME){ //if more than CAN_LOST_TIME seconds has elapsed since last message
 80a0462:	6822      	ldr	r2, [r4, #0]
 80a0464:	1aad      	subs	r5, r5, r2
 80a0466:	2d05      	cmp	r5, #5
      msgRec = 0;
 80a0468:	bfc8      	it	gt
 80a046a:	6018      	strgt	r0, [r3, #0]
    }
  }
  return msgRec;
}
 80a046c:	6818      	ldr	r0, [r3, #0]
 80a046e:	b005      	add	sp, #20
 80a0470:	bd30      	pop	{r4, r5, pc}
 80a0472:	bf00      	nop
 80a0474:	2000058c 	.word	0x2000058c
 80a0478:	2000037c 	.word	0x2000037c
 80a047c:	20000300 	.word	0x20000300

080a0480 <_GLOBAL__sub_I_msgRec>:
 80a0480:	f001 b894 	b.w	80a15ac <HAL_Pin_Map>

080a0484 <_GLOBAL__sub_I_scpstHeadTimer>:
 80a0484:	f001 b892 	b.w	80a15ac <HAL_Pin_Map>

080a0488 <_Z13heaterControl6String>:
    heaterPower = tracerBattVoltage * heaterCurrent;
    millisPrev = millisNow;
  }
}

int heaterControl(String loadState){
 80a0488:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a048a:	490d      	ldr	r1, [pc, #52]	; (80a04c0 <_Z13heaterControl6String+0x38>)
 80a048c:	4605      	mov	r5, r0
 80a048e:	f001 fb37 	bl	80a1b00 <_ZNK6String6equalsEPKc>
  static int setState = 0;
  if (loadState == "on"){
 80a0492:	4604      	mov	r4, r0
 80a0494:	b118      	cbz	r0, 80a049e <_Z13heaterControl6String+0x16>
    setState = 1;
 80a0496:	4b0b      	ldr	r3, [pc, #44]	; (80a04c4 <_Z13heaterControl6String+0x3c>)
 80a0498:	2201      	movs	r2, #1
 80a049a:	601a      	str	r2, [r3, #0]
 80a049c:	e006      	b.n	80a04ac <_Z13heaterControl6String+0x24>
 80a049e:	490a      	ldr	r1, [pc, #40]	; (80a04c8 <_Z13heaterControl6String+0x40>)
 80a04a0:	4628      	mov	r0, r5
 80a04a2:	f001 fb2d 	bl	80a1b00 <_ZNK6String6equalsEPKc>
  }
  else if (loadState == "off"){
 80a04a6:	b130      	cbz	r0, 80a04b6 <_Z13heaterControl6String+0x2e>
    setState = 0;
 80a04a8:	4b06      	ldr	r3, [pc, #24]	; (80a04c4 <_Z13heaterControl6String+0x3c>)
 80a04aa:	601c      	str	r4, [r3, #0]
  }
  else return -1;

  if (tracerSetLoadState(setState) == true){
 80a04ac:	4b05      	ldr	r3, [pc, #20]	; (80a04c4 <_Z13heaterControl6String+0x3c>)
 80a04ae:	6818      	ldr	r0, [r3, #0]
 80a04b0:	f7ff ff9e 	bl	80a03f0 <_Z18tracerSetLoadStatei>
 80a04b4:	b910      	cbnz	r0, 80a04bc <_Z13heaterControl6String+0x34>
    return 1;
  }
  else return -1;
 80a04b6:	f04f 30ff 	mov.w	r0, #4294967295
 80a04ba:	bd38      	pop	{r3, r4, r5, pc}
    setState = 0;
  }
  else return -1;

  if (tracerSetLoadState(setState) == true){
    return 1;
 80a04bc:	2001      	movs	r0, #1
  }
  else return -1;

 80a04be:	bd38      	pop	{r3, r4, r5, pc}
 80a04c0:	080a3824 	.word	0x080a3824
 80a04c4:	200005d0 	.word	0x200005d0
 80a04c8:	080a38c5 	.word	0x080a38c5

080a04cc <loop>:
  Particle.variable("Battery4SOC",batt4SOC);
  Particle.variable("Battery_Max_Temp",battMaxTemp);
  Particle.variable("Battery_Min_Temp",battMinTemp);
}

void loop() {
 80a04cc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a04d0:	f001 f8b4 	bl	80a163c <HAL_Timer_Get_Milli_Seconds>
  static unsigned long millisPrev = 0;
  static unsigned int readState = 0;
  unsigned long millisNow = millis();
  unsigned long deltaMillis = millisNow-millisPrev;
 80a04d4:	4d3b      	ldr	r5, [pc, #236]	; (80a05c4 <loop+0xf8>)
 80a04d6:	4606      	mov	r6, r0
 80a04d8:	682b      	ldr	r3, [r5, #0]
 80a04da:	1ac4      	subs	r4, r0, r3
  
  canReceiveMessage();
 80a04dc:	f7ff ffa0 	bl	80a0420 <_Z17canReceiveMessagev>

  if (deltaMillis > 2000) {
 80a04e0:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80a04e4:	d96c      	bls.n	80a05c0 <loop+0xf4>
    switch (readState){
 80a04e6:	4c38      	ldr	r4, [pc, #224]	; (80a05c8 <loop+0xfc>)
 80a04e8:	6823      	ldr	r3, [r4, #0]
 80a04ea:	2b06      	cmp	r3, #6
 80a04ec:	d843      	bhi.n	80a0576 <loop+0xaa>
 80a04ee:	e8df f003 	tbb	[pc, r3]
 80a04f2:	0b04      	.short	0x0b04
 80a04f4:	27201912 	.word	0x27201912
 80a04f8:	36          	.byte	0x36
 80a04f9:	00          	.byte	0x00
      case 0:
        if (tracerBattVoltRead() == false){
 80a04fa:	f7ff fe21 	bl	80a0140 <_Z18tracerBattVoltReadv>
 80a04fe:	bb58      	cbnz	r0, 80a0558 <loop+0x8c>
          Serial.println("batt volt read failed");
 80a0500:	f001 fe0c 	bl	80a211c <_Z16_fetch_usbserialv>
 80a0504:	4931      	ldr	r1, [pc, #196]	; (80a05cc <loop+0x100>)
 80a0506:	e021      	b.n	80a054c <loop+0x80>
        }
        readState++;
        break;

      case 1:
        if (tracerBattCurrRead() == false){
 80a0508:	f7ff fe4a 	bl	80a01a0 <_Z18tracerBattCurrReadv>
 80a050c:	bb20      	cbnz	r0, 80a0558 <loop+0x8c>
          Serial.println("batt cur read failed");
 80a050e:	f001 fe05 	bl	80a211c <_Z16_fetch_usbserialv>
 80a0512:	492f      	ldr	r1, [pc, #188]	; (80a05d0 <loop+0x104>)
 80a0514:	e01a      	b.n	80a054c <loop+0x80>
        }
        readState++;
        break;

      case 2:
        if (tracerPvVoltRead() == false){
 80a0516:	f7ff fe7b 	bl	80a0210 <_Z16tracerPvVoltReadv>
 80a051a:	b9e8      	cbnz	r0, 80a0558 <loop+0x8c>
          Serial.println("PV volt read failed");
 80a051c:	f001 fdfe 	bl	80a211c <_Z16_fetch_usbserialv>
 80a0520:	492c      	ldr	r1, [pc, #176]	; (80a05d4 <loop+0x108>)
 80a0522:	e013      	b.n	80a054c <loop+0x80>
          delay(3000);
        }
        readState++;
        break;
      case 3:
        if (tracerPvCurrRead() == false){
 80a0524:	f7ff fea4 	bl	80a0270 <_Z16tracerPvCurrReadv>
 80a0528:	b9b0      	cbnz	r0, 80a0558 <loop+0x8c>
          Serial.println("PV curr read failed");
 80a052a:	f001 fdf7 	bl	80a211c <_Z16_fetch_usbserialv>
 80a052e:	492a      	ldr	r1, [pc, #168]	; (80a05d8 <loop+0x10c>)
 80a0530:	e00c      	b.n	80a054c <loop+0x80>
          delay(3000);
        }
        readState++;
        break;
      case 4:
        if (tracerLoadCurrRead() == false){
 80a0532:	f7ff fecd 	bl	80a02d0 <_Z18tracerLoadCurrReadv>
 80a0536:	b978      	cbnz	r0, 80a0558 <loop+0x8c>
          Serial.println("load read failed");
 80a0538:	f001 fdf0 	bl	80a211c <_Z16_fetch_usbserialv>
 80a053c:	4927      	ldr	r1, [pc, #156]	; (80a05dc <loop+0x110>)
 80a053e:	e005      	b.n	80a054c <loop+0x80>
          delay(3000);
        }
        readState++;
        break;
      case 5:
        if (tracerInsideTemp() == false){
 80a0540:	f7ff fef6 	bl	80a0330 <_Z16tracerInsideTempv>
 80a0544:	b940      	cbnz	r0, 80a0558 <loop+0x8c>
          Serial.println("temperature read failed");
 80a0546:	f001 fde9 	bl	80a211c <_Z16_fetch_usbserialv>
 80a054a:	4925      	ldr	r1, [pc, #148]	; (80a05e0 <loop+0x114>)
 80a054c:	f001 fb23 	bl	80a1b96 <_ZN5Print7printlnEPKc>
          delay(3000);
 80a0550:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a0554:	f001 fc74 	bl	80a1e40 <delay>
        }
        readState++;
 80a0558:	6823      	ldr	r3, [r4, #0]
 80a055a:	3301      	adds	r3, #1
 80a055c:	e00c      	b.n	80a0578 <loop+0xac>
        break;

      case 6:
        if (tracerBattSOC() == false){
 80a055e:	f7ff ff17 	bl	80a0390 <_Z13tracerBattSOCv>
 80a0562:	b940      	cbnz	r0, 80a0576 <loop+0xaa>
          Serial.println("SOC read failed");
 80a0564:	f001 fdda 	bl	80a211c <_Z16_fetch_usbserialv>
 80a0568:	491e      	ldr	r1, [pc, #120]	; (80a05e4 <loop+0x118>)
 80a056a:	f001 fb14 	bl	80a1b96 <_ZN5Print7printlnEPKc>
          delay(3000);
 80a056e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80a0572:	f001 fc65 	bl	80a1e40 <delay>
        }
        readState = 0;
        break;

      default:
        readState = 0;
 80a0576:	2300      	movs	r3, #0
 80a0578:	6023      	str	r3, [r4, #0]
        break;
    }
    pVpower = pVcurrent * pVvoltage;
 80a057a:	491b      	ldr	r1, [pc, #108]	; (80a05e8 <loop+0x11c>)
 80a057c:	4b1b      	ldr	r3, [pc, #108]	; (80a05ec <loop+0x120>)
 80a057e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0582:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0586:	f002 fae1 	bl	80a2b4c <__aeabi_dmul>
 80a058a:	4b19      	ldr	r3, [pc, #100]	; (80a05f0 <loop+0x124>)
 80a058c:	e9c3 0100 	strd	r0, r1, [r3]
    tracerBattPower = tracerBattCurrent * tracerBattVoltage;
 80a0590:	4b18      	ldr	r3, [pc, #96]	; (80a05f4 <loop+0x128>)
 80a0592:	4919      	ldr	r1, [pc, #100]	; (80a05f8 <loop+0x12c>)
 80a0594:	e9d3 8900 	ldrd	r8, r9, [r3]
 80a0598:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a059c:	4642      	mov	r2, r8
 80a059e:	464b      	mov	r3, r9
 80a05a0:	f002 fad4 	bl	80a2b4c <__aeabi_dmul>
 80a05a4:	4b15      	ldr	r3, [pc, #84]	; (80a05fc <loop+0x130>)
    heaterPower = tracerBattVoltage * heaterCurrent;
 80a05a6:	4642      	mov	r2, r8
      default:
        readState = 0;
        break;
    }
    pVpower = pVcurrent * pVvoltage;
    tracerBattPower = tracerBattCurrent * tracerBattVoltage;
 80a05a8:	e9c3 0100 	strd	r0, r1, [r3]
    heaterPower = tracerBattVoltage * heaterCurrent;
 80a05ac:	4914      	ldr	r1, [pc, #80]	; (80a0600 <loop+0x134>)
 80a05ae:	464b      	mov	r3, r9
 80a05b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a05b4:	f002 faca 	bl	80a2b4c <__aeabi_dmul>
 80a05b8:	4b12      	ldr	r3, [pc, #72]	; (80a0604 <loop+0x138>)
    millisPrev = millisNow;
 80a05ba:	602e      	str	r6, [r5, #0]
        readState = 0;
        break;
    }
    pVpower = pVcurrent * pVvoltage;
    tracerBattPower = tracerBattCurrent * tracerBattVoltage;
    heaterPower = tracerBattVoltage * heaterCurrent;
 80a05bc:	e9c3 0100 	strd	r0, r1, [r3]
 80a05c0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80a05c4:	20000598 	.word	0x20000598
 80a05c8:	20000610 	.word	0x20000610
 80a05cc:	080a3827 	.word	0x080a3827
 80a05d0:	080a383d 	.word	0x080a383d
 80a05d4:	080a3852 	.word	0x080a3852
 80a05d8:	080a3866 	.word	0x080a3866
 80a05dc:	080a387a 	.word	0x080a387a
 80a05e0:	080a388b 	.word	0x080a388b
 80a05e4:	080a38a3 	.word	0x080a38a3
 80a05e8:	20000620 	.word	0x20000620
 80a05ec:	200005e0 	.word	0x200005e0
 80a05f0:	200005c0 	.word	0x200005c0
 80a05f4:	20000628 	.word	0x20000628
 80a05f8:	20000630 	.word	0x20000630
 80a05fc:	200005a8 	.word	0x200005a8
 80a0600:	20000618 	.word	0x20000618
 80a0604:	200005c8 	.word	0x200005c8

080a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a0608:	2300      	movs	r3, #0
 80a060a:	2209      	movs	r2, #9
 80a060c:	f001 b974 	b.w	80a18f8 <spark_variable>

080a0610 <setup>:
double lowCellV = 0.0;

int heaterControl(String);

// setup() runs once, when the device is first turned on.
void setup() {
 80a0610:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  initCAN();
 80a0612:	f7ff fd55 	bl	80a00c0 <_Z7initCANv>
  initTracer();
 80a0616:	f7ff fd7b 	bl	80a0110 <_Z10initTracerv>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a061a:	4a28      	ldr	r2, [pc, #160]	; (80a06bc <setup+0xac>)
 80a061c:	4928      	ldr	r1, [pc, #160]	; (80a06c0 <setup+0xb0>)
 80a061e:	4829      	ldr	r0, [pc, #164]	; (80a06c4 <setup+0xb4>)
 80a0620:	f001 fcd8 	bl	80a1fd4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  
  Particle.function("Heater_Control_on_off",heaterControl);

  Particle.variable("PV_Voltage", pVvoltage);
 80a0624:	4928      	ldr	r1, [pc, #160]	; (80a06c8 <setup+0xb8>)
 80a0626:	4829      	ldr	r0, [pc, #164]	; (80a06cc <setup+0xbc>)
 80a0628:	f7ff ffee 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("PV_Current", pVcurrent);
 80a062c:	4928      	ldr	r1, [pc, #160]	; (80a06d0 <setup+0xc0>)
 80a062e:	4829      	ldr	r0, [pc, #164]	; (80a06d4 <setup+0xc4>)
 80a0630:	f7ff ffea 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("PV_Power", pVpower);
 80a0634:	4928      	ldr	r1, [pc, #160]	; (80a06d8 <setup+0xc8>)
 80a0636:	4829      	ldr	r0, [pc, #164]	; (80a06dc <setup+0xcc>)
 80a0638:	f7ff ffe6 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a063c:	2300      	movs	r3, #0
 80a063e:	2202      	movs	r2, #2
 80a0640:	4927      	ldr	r1, [pc, #156]	; (80a06e0 <setup+0xd0>)
 80a0642:	4828      	ldr	r0, [pc, #160]	; (80a06e4 <setup+0xd4>)
 80a0644:	f001 f958 	bl	80a18f8 <spark_variable>
  Particle.variable("PV_ID", iD);
  Particle.variable("Inside_Temperature", insideAmbientTemp);
 80a0648:	4927      	ldr	r1, [pc, #156]	; (80a06e8 <setup+0xd8>)
 80a064a:	4828      	ldr	r0, [pc, #160]	; (80a06ec <setup+0xdc>)
 80a064c:	f7ff ffdc 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Outside_Temperature", outsideAmbientTemp);
 80a0650:	4927      	ldr	r1, [pc, #156]	; (80a06f0 <setup+0xe0>)
 80a0652:	4828      	ldr	r0, [pc, #160]	; (80a06f4 <setup+0xe4>)
 80a0654:	f7ff ffd8 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Heater_Current", heaterCurrent);
 80a0658:	4927      	ldr	r1, [pc, #156]	; (80a06f8 <setup+0xe8>)
 80a065a:	4828      	ldr	r0, [pc, #160]	; (80a06fc <setup+0xec>)
 80a065c:	f7ff ffd4 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Heater_Power",heaterPower);
 80a0660:	4927      	ldr	r1, [pc, #156]	; (80a0700 <setup+0xf0>)
 80a0662:	4828      	ldr	r0, [pc, #160]	; (80a0704 <setup+0xf4>)
 80a0664:	f7ff ffd0 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Battery_Voltage",tracerBattVoltage);
 80a0668:	4927      	ldr	r1, [pc, #156]	; (80a0708 <setup+0xf8>)
 80a066a:	4828      	ldr	r0, [pc, #160]	; (80a070c <setup+0xfc>)
 80a066c:	f7ff ffcc 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Battery_Current",tracerBattCurrent);
 80a0670:	4927      	ldr	r1, [pc, #156]	; (80a0710 <setup+0x100>)
 80a0672:	4828      	ldr	r0, [pc, #160]	; (80a0714 <setup+0x104>)
 80a0674:	f7ff ffc8 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Battery_Charge_Power",tracerBattPower);
 80a0678:	4927      	ldr	r1, [pc, #156]	; (80a0718 <setup+0x108>)
 80a067a:	4828      	ldr	r0, [pc, #160]	; (80a071c <setup+0x10c>)
 80a067c:	f7ff ffc4 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Battery_SOC",battPackSOC);
 80a0680:	4927      	ldr	r1, [pc, #156]	; (80a0720 <setup+0x110>)
 80a0682:	4828      	ldr	r0, [pc, #160]	; (80a0724 <setup+0x114>)
 80a0684:	f7ff ffc0 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Battery1SOC",batt1SOC);
 80a0688:	4927      	ldr	r1, [pc, #156]	; (80a0728 <setup+0x118>)
 80a068a:	4828      	ldr	r0, [pc, #160]	; (80a072c <setup+0x11c>)
 80a068c:	f7ff ffbc 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Battery2SOC",batt2SOC);
 80a0690:	4927      	ldr	r1, [pc, #156]	; (80a0730 <setup+0x120>)
 80a0692:	4828      	ldr	r0, [pc, #160]	; (80a0734 <setup+0x124>)
 80a0694:	f7ff ffb8 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Battery3SOC",batt3SOC);
 80a0698:	4927      	ldr	r1, [pc, #156]	; (80a0738 <setup+0x128>)
 80a069a:	4828      	ldr	r0, [pc, #160]	; (80a073c <setup+0x12c>)
 80a069c:	f7ff ffb4 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Battery4SOC",batt4SOC);
 80a06a0:	4927      	ldr	r1, [pc, #156]	; (80a0740 <setup+0x130>)
 80a06a2:	4828      	ldr	r0, [pc, #160]	; (80a0744 <setup+0x134>)
 80a06a4:	f7ff ffb0 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Battery_Max_Temp",battMaxTemp);
 80a06a8:	4927      	ldr	r1, [pc, #156]	; (80a0748 <setup+0x138>)
 80a06aa:	4828      	ldr	r0, [pc, #160]	; (80a074c <setup+0x13c>)
 80a06ac:	f7ff ffac 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Battery_Min_Temp",battMinTemp);
 80a06b0:	4927      	ldr	r1, [pc, #156]	; (80a0750 <setup+0x140>)
 80a06b2:	4828      	ldr	r0, [pc, #160]	; (80a0754 <setup+0x144>)
 80a06b4:	f7ff ffa8 	bl	80a0608 <_ZN10CloudClass8variableIA17_cIdEEEbRKT_DpRKT0_>
 80a06b8:	bd08      	pop	{r3, pc}
 80a06ba:	bf00      	nop
 80a06bc:	080a38b3 	.word	0x080a38b3
 80a06c0:	080a0489 	.word	0x080a0489
 80a06c4:	080a1fa9 	.word	0x080a1fa9
 80a06c8:	200005e0 	.word	0x200005e0
 80a06cc:	080a38c9 	.word	0x080a38c9
 80a06d0:	20000620 	.word	0x20000620
 80a06d4:	080a38d4 	.word	0x080a38d4
 80a06d8:	200005c0 	.word	0x200005c0
 80a06dc:	080a38df 	.word	0x080a38df
 80a06e0:	20000304 	.word	0x20000304
 80a06e4:	080a38e8 	.word	0x080a38e8
 80a06e8:	200005a0 	.word	0x200005a0
 80a06ec:	080a38ee 	.word	0x080a38ee
 80a06f0:	200005f0 	.word	0x200005f0
 80a06f4:	080a3901 	.word	0x080a3901
 80a06f8:	20000618 	.word	0x20000618
 80a06fc:	080a3915 	.word	0x080a3915
 80a0700:	200005c8 	.word	0x200005c8
 80a0704:	080a3924 	.word	0x080a3924
 80a0708:	20000628 	.word	0x20000628
 80a070c:	080a3931 	.word	0x080a3931
 80a0710:	20000630 	.word	0x20000630
 80a0714:	080a3941 	.word	0x080a3941
 80a0718:	200005a8 	.word	0x200005a8
 80a071c:	080a3951 	.word	0x080a3951
 80a0720:	200005b0 	.word	0x200005b0
 80a0724:	080a3966 	.word	0x080a3966
 80a0728:	20000590 	.word	0x20000590
 80a072c:	080a3972 	.word	0x080a3972
 80a0730:	200005b8 	.word	0x200005b8
 80a0734:	080a397e 	.word	0x080a397e
 80a0738:	200005d8 	.word	0x200005d8
 80a073c:	080a398a 	.word	0x080a398a
 80a0740:	20000600 	.word	0x20000600
 80a0744:	080a3996 	.word	0x080a3996
 80a0748:	200005e8 	.word	0x200005e8
 80a074c:	080a39a2 	.word	0x080a39a2
 80a0750:	20000608 	.word	0x20000608
 80a0754:	080a39b3 	.word	0x080a39b3

080a0758 <_GLOBAL__sub_I_SystemMode>:
  if (tracerSetLoadState(setState) == true){
    return 1;
  }
  else return -1;

 80a0758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a075a:	f000 ff27 	bl	80a15ac <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a075e:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a0762:	4c0d      	ldr	r4, [pc, #52]	; (80a0798 <_GLOBAL__sub_I_SystemMode+0x40>)
 80a0764:	2500      	movs	r5, #0
 80a0766:	8063      	strh	r3, [r4, #2]
 80a0768:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a076c:	2001      	movs	r0, #1
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a076e:	80a3      	strh	r3, [r4, #4]
 80a0770:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0772:	f001 f88d 	bl	80a1890 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a0776:	a802      	add	r0, sp, #8
 80a0778:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a077c:	462a      	mov	r2, r5
 80a077e:	4629      	mov	r1, r5
 80a0780:	f000 ff74 	bl	80a166c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a0784:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a0786:	2b1e      	cmp	r3, #30
 80a0788:	d104      	bne.n	80a0794 <_GLOBAL__sub_I_SystemMode+0x3c>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a078a:	2303      	movs	r3, #3
 80a078c:	7023      	strb	r3, [r4, #0]
 80a078e:	2311      	movs	r3, #17
 80a0790:	8065      	strh	r5, [r4, #2]
 80a0792:	80a3      	strh	r3, [r4, #4]
 80a0794:	b003      	add	sp, #12
 80a0796:	bd30      	pop	{r4, r5, pc}
 80a0798:	200005f8 	.word	0x200005f8

080a079c <_ZNSt14_Function_base13_Base_managerIZN7CarloopI16CarloopRevision2E9enableGPSEvEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a079c:	2a01      	cmp	r2, #1
 80a079e:	d002      	beq.n	80a07a6 <_ZNSt14_Function_base13_Base_managerIZN7CarloopI16CarloopRevision2E9enableGPSEvEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
 80a07a0:	2a02      	cmp	r2, #2
 80a07a2:	d002      	beq.n	80a07aa <_ZNSt14_Function_base13_Base_managerIZN7CarloopI16CarloopRevision2E9enableGPSEvEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xe>
 80a07a4:	e004      	b.n	80a07b0 <_ZNSt14_Function_base13_Base_managerIZN7CarloopI16CarloopRevision2E9enableGPSEvEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a07a6:	6001      	str	r1, [r0, #0]
	      break;
 80a07a8:	e002      	b.n	80a07b0 <_ZNSt14_Function_base13_Base_managerIZN7CarloopI16CarloopRevision2E9enableGPSEvEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a07aa:	b108      	cbz	r0, 80a07b0 <_ZNSt14_Function_base13_Base_managerIZN7CarloopI16CarloopRevision2E9enableGPSEvEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x14>
 80a07ac:	680b      	ldr	r3, [r1, #0]
 80a07ae:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a07b0:	2000      	movs	r0, #0
 80a07b2:	4770      	bx	lr

080a07b4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a07b4:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 80a07b6:	2301      	movs	r3, #1
 80a07b8:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80a07ba:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a07bc:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 80a07be:	b10b      	cbz	r3, 80a07c4 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 80a07c0:	68c0      	ldr	r0, [r0, #12]
 80a07c2:	e006      	b.n	80a07d2 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a07c4:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80a07c6:	b128      	cbz	r0, 80a07d4 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a07c8:	6883      	ldr	r3, [r0, #8]
 80a07ca:	b90b      	cbnz	r3, 80a07d0 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 80a07cc:	f001 febb 	bl	80a2546 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a07d0:	68c3      	ldr	r3, [r0, #12]
 80a07d2:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 80a07d4:	2301      	movs	r3, #1
 80a07d6:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 80a07d8:	2000      	movs	r0, #0
    }
 80a07da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 80a07de:	f000 bf7d 	b.w	80a16dc <os_thread_exit>

080a07e2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a07e2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a07e4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a07e6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a07e8:	b113      	cbz	r3, 80a07f0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a07ea:	2203      	movs	r2, #3
 80a07ec:	4601      	mov	r1, r0
 80a07ee:	4798      	blx	r3
    }
 80a07f0:	4620      	mov	r0, r4
 80a07f2:	bd10      	pop	{r4, pc}

080a07f4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
 80a07f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a07f8:	4606      	mov	r6, r0
 80a07fa:	460f      	mov	r7, r1
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 80a07fc:	2014      	movs	r0, #20
 80a07fe:	492e      	ldr	r1, [pc, #184]	; (80a08b8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xc4>)
        return;
    error:
        d_.reset();
    }

    Thread(const char *name, wiring_thread_fn_t function,
 80a0800:	4615      	mov	r5, r2
 80a0802:	4698      	mov	r8, r3
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 80a0804:	f001 fe90 	bl	80a2528 <_ZnwjRKSt9nothrow_t>
 80a0808:	4604      	mov	r4, r0
 80a080a:	b130      	cbz	r0, 80a081a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80a080c:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 80a080e:	7403      	strb	r3, [r0, #16]
 80a0810:	6003      	str	r3, [r0, #0]
 80a0812:	6043      	str	r3, [r0, #4]
 80a0814:	6083      	str	r3, [r0, #8]
 80a0816:	60c3      	str	r3, [r0, #12]
 80a0818:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a081a:	6034      	str	r4, [r6, #0]

    Thread(const char *name, wiring_thread_fn_t function,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 80a081c:	2c00      	cmp	r4, #0
 80a081e:	d038      	beq.n	80a0892 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9e>
            goto error;
        }
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
 80a0820:	4925      	ldr	r1, [pc, #148]	; (80a08b8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xc4>)
 80a0822:	2010      	movs	r0, #16
 80a0824:	f001 fe80 	bl	80a2528 <_ZnwjRKSt9nothrow_t>
 80a0828:	4603      	mov	r3, r0
 80a082a:	b1b0      	cbz	r0, 80a085a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x66>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a082c:	2200      	movs	r2, #0
 80a082e:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0830:	aa02      	add	r2, sp, #8
 80a0832:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a0836:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a083a:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a083e:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0842:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a0846:	e883 0003 	stmia.w	r3, {r0, r1}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a084a:	6899      	ldr	r1, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a084c:	68aa      	ldr	r2, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a084e:	60a9      	str	r1, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0850:	609a      	str	r2, [r3, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0852:	68ea      	ldr	r2, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0854:	68d9      	ldr	r1, [r3, #12]
 80a0856:	60e9      	str	r1, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0858:	60da      	str	r2, [r3, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a085a:	6825      	ldr	r5, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a085c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a085e:	b12d      	cbz	r5, 80a086c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x78>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0860:	4628      	mov	r0, r5
 80a0862:	f7ff ffbe 	bl	80a07e2 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a0866:	4628      	mov	r0, r5
 80a0868:	f7ff fc19 	bl	80a009e <_ZdlPv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a086c:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
 80a086e:	6803      	ldr	r3, [r0, #0]
 80a0870:	b17b      	cbz	r3, 80a0892 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9e>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a0872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a0874:	4642      	mov	r2, r8
 80a0876:	e88d 0009 	stmia.w	sp, {r0, r3}
 80a087a:	4639      	mov	r1, r7
 80a087c:	4b0f      	ldr	r3, [pc, #60]	; (80a08bc <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xc8>)
 80a087e:	3004      	adds	r0, #4
 80a0880:	f000 fefc 	bl	80a167c <os_thread_create>
 80a0884:	b928      	cbnz	r0, 80a0892 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9e>
 80a0886:	6833      	ldr	r3, [r6, #0]
            goto error;
        }
        while (!d_->started) {
 80a0888:	7c1b      	ldrb	r3, [r3, #16]
 80a088a:	b98b      	cbnz	r3, 80a08b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xbc>
            os_thread_yield();
 80a088c:	f000 fefe 	bl	80a168c <os_thread_yield>
            goto error;
        }
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
            goto error;
        }
        while (!d_->started) {
 80a0890:	e7f9      	b.n	80a0886 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x92>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0892:	6834      	ldr	r4, [r6, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0894:	2300      	movs	r3, #0
 80a0896:	6033      	str	r3, [r6, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a0898:	b154      	cbz	r4, 80a08b0 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xbc>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80a089a:	6825      	ldr	r5, [r4, #0]
 80a089c:	b12d      	cbz	r5, 80a08aa <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xb6>
 80a089e:	4628      	mov	r0, r5
 80a08a0:	f7ff ff9f 	bl	80a07e2 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a08a4:	4628      	mov	r0, r5
 80a08a6:	f7ff fbfa 	bl	80a009e <_ZdlPv>
 80a08aa:	4620      	mov	r0, r4
 80a08ac:	f7ff fbf7 	bl	80a009e <_ZdlPv>
            os_thread_yield();
        }
        return;
    error:
        d_.reset();
    }
 80a08b0:	4630      	mov	r0, r6
 80a08b2:	b004      	add	sp, #16
 80a08b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a08b8:	080a3bec 	.word	0x080a3bec
 80a08bc:	080a07b5 	.word	0x080a07b5

080a08c0 <_ZN7CarloopI16CarloopRevision2EC1Ev>:

#include "carloop.h"
#include <functional>

template<typename Config>
Carloop<Config>::Carloop()
 80a08c0:	b510      	push	{r4, lr}
 80a08c2:	4604      	mov	r4, r0
    : canDriver(Config::CAN_PINS),
    canSpeed(Config::CAN_DEFAULT_SPEED),
    gpsSerialThread(NULL)
 80a08c4:	2320      	movs	r3, #32
 80a08c6:	461a      	mov	r2, r3
 80a08c8:	2100      	movs	r1, #0
 80a08ca:	f001 fd35 	bl	80a2338 <_ZN10CANChannelC1E15HAL_CAN_Channeltt>
 80a08ce:	4b05      	ldr	r3, [pc, #20]	; (80a08e4 <_ZN7CarloopI16CarloopRevision2EC1Ev+0x24>)
 80a08d0:	f104 000c 	add.w	r0, r4, #12
 80a08d4:	6063      	str	r3, [r4, #4]
 80a08d6:	2300      	movs	r3, #0
 80a08d8:	60a3      	str	r3, [r4, #8]
 80a08da:	f000 f8c8 	bl	80a0a6e <_ZN11TinyGPSPlusC1Ev>
{
}
 80a08de:	4620      	mov	r0, r4
 80a08e0:	bd10      	pop	{r4, pc}
 80a08e2:	bf00      	nop
 80a08e4:	0007a120 	.word	0x0007a120

080a08e8 <_ZN7CarloopI16CarloopRevision2E11setCANSpeedEm>:

template <typename Config>
void Carloop<Config>::setCANSpeed(uint32_t canSpeed)
{
    this->canSpeed = canSpeed;
 80a08e8:	6041      	str	r1, [r0, #4]
 80a08ea:	4770      	bx	lr

080a08ec <_ZN7CarloopI16CarloopRevision2E3canEv>:

template <typename Config>
CANChannel &Carloop<Config>::can()
{
    return canDriver;
}
 80a08ec:	4770      	bx	lr

080a08ee <_ZN7CarloopI16CarloopRevision2E9enableCANEv>:
{
    return batteryVoltage;
}

template <typename Config>
void Carloop<Config>::enableCAN()
 80a08ee:	b510      	push	{r4, lr}
 80a08f0:	4604      	mov	r4, r0
{
    pinMode(Config::CAN_ENABLE_PIN, OUTPUT);
 80a08f2:	2101      	movs	r1, #1
 80a08f4:	2000      	movs	r0, #0
 80a08f6:	f001 fd6d 	bl	80a23d4 <pinMode>
    digitalWrite(Config::CAN_ENABLE_PIN, Config::CAN_ENABLE_ACTIVE);
 80a08fa:	2100      	movs	r1, #0
 80a08fc:	4608      	mov	r0, r1
 80a08fe:	f001 fd7a 	bl	80a23f6 <digitalWrite>
    canDriver.begin(canSpeed);
 80a0902:	6861      	ldr	r1, [r4, #4]
 80a0904:	4620      	mov	r0, r4
}
 80a0906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
template <typename Config>
void Carloop<Config>::enableCAN()
{
    pinMode(Config::CAN_ENABLE_PIN, OUTPUT);
    digitalWrite(Config::CAN_ENABLE_PIN, Config::CAN_ENABLE_ACTIVE);
    canDriver.begin(canSpeed);
 80a090a:	2200      	movs	r2, #0
 80a090c:	f001 bd1f 	b.w	80a234e <_ZN10CANChannel5beginEmm>

080a0910 <_ZN7CarloopI16CarloopRevision2E9enableGPSEv>:
    canDriver.end();
    digitalWrite(Config::CAN_ENABLE_PIN, Config::CAN_ENABLE_INACTIVE);
}

template <typename Config>
void Carloop<Config>::enableGPS()
 80a0910:	b530      	push	{r4, r5, lr}
 80a0912:	4604      	mov	r4, r0
 80a0914:	b087      	sub	sp, #28
{
    pinMode(Config::GPS_ENABLE_PIN, OUTPUT);
 80a0916:	2101      	movs	r1, #1
 80a0918:	200a      	movs	r0, #10
 80a091a:	f001 fd5b 	bl	80a23d4 <pinMode>
    digitalWrite(Config::GPS_ENABLE_PIN, Config::GPS_ENABLE_ACTIVE);
 80a091e:	2101      	movs	r1, #1
 80a0920:	200a      	movs	r0, #10
 80a0922:	f001 fd68 	bl	80a23f6 <digitalWrite>

    Serial1.begin(Config::GPS_BAUD_RATE);
 80a0926:	f001 fc9f 	bl	80a2268 <_Z22__fetch_global_Serial1v>
 80a092a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a092e:	f001 fc95 	bl	80a225c <_ZN11USARTSerial5beginEm>

    if (!gpsSerialThread) {
 80a0932:	68a3      	ldr	r3, [r4, #8]
 80a0934:	b9ab      	cbnz	r3, 80a0962 <_ZN7CarloopI16CarloopRevision2E9enableGPSEv+0x52>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0936:	4b0c      	ldr	r3, [pc, #48]	; (80a0968 <_ZN7CarloopI16CarloopRevision2E9enableGPSEv+0x58>)
        // Start a thread that will run this->receiveSerialChars()
        gpsSerialThread = new Thread("gps_serial", [this]() { receiveSerialChars(); });
 80a0938:	2004      	movs	r0, #4
 80a093a:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a093c:	4b0b      	ldr	r3, [pc, #44]	; (80a096c <_ZN7CarloopI16CarloopRevision2E9enableGPSEv+0x5c>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a093e:	9402      	str	r4, [sp, #8]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 80a0940:	9304      	str	r3, [sp, #16]
 80a0942:	f7ff fbaa 	bl	80a009a <_Znwj>
 80a0946:	4605      	mov	r5, r0
 80a0948:	b138      	cbz	r0, 80a095a <_ZN7CarloopI16CarloopRevision2E9enableGPSEv+0x4a>
 80a094a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80a094e:	9300      	str	r3, [sp, #0]
 80a0950:	aa02      	add	r2, sp, #8
 80a0952:	2302      	movs	r3, #2
 80a0954:	4906      	ldr	r1, [pc, #24]	; (80a0970 <_ZN7CarloopI16CarloopRevision2E9enableGPSEv+0x60>)
 80a0956:	f7ff ff4d 	bl	80a07f4 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
 80a095a:	60a5      	str	r5, [r4, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a095c:	a802      	add	r0, sp, #8
 80a095e:	f7ff ff40 	bl	80a07e2 <_ZNSt14_Function_baseD1Ev>
    }
}
 80a0962:	b007      	add	sp, #28
 80a0964:	bd30      	pop	{r4, r5, pc}
 80a0966:	bf00      	nop
 80a0968:	080a0a61 	.word	0x080a0a61
 80a096c:	080a079d 	.word	0x080a079d
 80a0970:	080a39c4 	.word	0x080a39c4

080a0974 <_ZN7CarloopI16CarloopRevision2E11readBatteryEv>:
    pinMode(Config::BATTERY_PIN, INPUT);
    readBattery();
}

template <typename Config>
float Carloop<Config>::readBattery()
 80a0974:	b508      	push	{r3, lr}
{
    static constexpr auto MAX_ANALOG_VALUE = 4096;
    static constexpr auto MAX_ANALOG_VOLTAGE = 3.3f;
    auto adcValue = analogRead(Config::BATTERY_PIN);
 80a0976:	200b      	movs	r0, #11
 80a0978:	f001 fd56 	bl	80a2428 <analogRead>
    return adcValue * MAX_ANALOG_VOLTAGE / MAX_ANALOG_VALUE * Config::BATTERY_FACTOR;
 80a097c:	f002 fc98 	bl	80a32b0 <__aeabi_i2f>
 80a0980:	4905      	ldr	r1, [pc, #20]	; (80a0998 <_ZN7CarloopI16CarloopRevision2E11readBatteryEv+0x24>)
 80a0982:	f002 fce9 	bl	80a3358 <__aeabi_fmul>
 80a0986:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 80a098a:	f002 fce5 	bl	80a3358 <__aeabi_fmul>
 80a098e:	4903      	ldr	r1, [pc, #12]	; (80a099c <_ZN7CarloopI16CarloopRevision2E11readBatteryEv+0x28>)
 80a0990:	f002 fce2 	bl	80a3358 <__aeabi_fmul>
}
 80a0994:	bd08      	pop	{r3, pc}
 80a0996:	bf00      	nop
 80a0998:	40533333 	.word	0x40533333
 80a099c:	40e66666 	.word	0x40e66666

080a09a0 <_ZN7CarloopI16CarloopRevision2E13enableBatteryEv>:
{
    digitalWrite(Config::GPS_ENABLE_PIN, Config::GPS_ENABLE_INACTIVE);
}

template <typename Config>
void Carloop<Config>::enableBattery()
 80a09a0:	b510      	push	{r4, lr}
 80a09a2:	4604      	mov	r4, r0
{
    pinMode(Config::BATTERY_PIN, INPUT);
 80a09a4:	2100      	movs	r1, #0
 80a09a6:	200b      	movs	r0, #11
 80a09a8:	f001 fd14 	bl	80a23d4 <pinMode>
    readBattery();
 80a09ac:	4620      	mov	r0, r4
 80a09ae:	f7ff ffe1 	bl	80a0974 <_ZN7CarloopI16CarloopRevision2E11readBatteryEv>
 80a09b2:	bd10      	pop	{r4, pc}

080a09b4 <_ZN7CarloopI16CarloopRevision2E6hasCANEv>:
}

template <typename Config>
bool Carloop<Config>::hasCAN()
{
    return Config::FEATURES & features & CARLOOP_CAN;
 80a09b4:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
}
 80a09b8:	f000 0001 	and.w	r0, r0, #1
 80a09bc:	4770      	bx	lr

080a09be <_ZN7CarloopI16CarloopRevision2E6hasGPSEv>:

template <typename Config>
bool Carloop<Config>::hasGPS()
{
    return Config::FEATURES & features & CARLOOP_GPS;
 80a09be:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
}
 80a09c2:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80a09c6:	4770      	bx	lr

080a09c8 <_ZN7CarloopI16CarloopRevision2E10hasBatteryEv>:

template <typename Config>
bool Carloop<Config>::hasBattery()
{
    return Config::FEATURES & features & CARLOOP_BATTERY;
 80a09c8:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
}
 80a09cc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80a09d0:	4770      	bx	lr

080a09d2 <_ZN7CarloopI16CarloopRevision2E5beginE17CarloopFeatures_e>:
{
    this->canSpeed = canSpeed;
}

template <typename Config>
void Carloop<Config>::begin(CarloopFeatures_e features)
 80a09d2:	b510      	push	{r4, lr}
{
    this->features = features;
 80a09d4:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
{
    this->canSpeed = canSpeed;
}

template <typename Config>
void Carloop<Config>::begin(CarloopFeatures_e features)
 80a09d8:	4604      	mov	r4, r0
{
    this->features = features;

    if(hasCAN())
 80a09da:	f7ff ffeb 	bl	80a09b4 <_ZN7CarloopI16CarloopRevision2E6hasCANEv>
 80a09de:	b110      	cbz	r0, 80a09e6 <_ZN7CarloopI16CarloopRevision2E5beginE17CarloopFeatures_e+0x14>
    {
        enableCAN();
 80a09e0:	4620      	mov	r0, r4
 80a09e2:	f7ff ff84 	bl	80a08ee <_ZN7CarloopI16CarloopRevision2E9enableCANEv>
    }

    if(hasGPS())
 80a09e6:	4620      	mov	r0, r4
 80a09e8:	f7ff ffe9 	bl	80a09be <_ZN7CarloopI16CarloopRevision2E6hasGPSEv>
 80a09ec:	b110      	cbz	r0, 80a09f4 <_ZN7CarloopI16CarloopRevision2E5beginE17CarloopFeatures_e+0x22>
    {
        enableGPS();
 80a09ee:	4620      	mov	r0, r4
 80a09f0:	f7ff ff8e 	bl	80a0910 <_ZN7CarloopI16CarloopRevision2E9enableGPSEv>
    }

    if(hasBattery())
 80a09f4:	4620      	mov	r0, r4
 80a09f6:	f7ff ffe7 	bl	80a09c8 <_ZN7CarloopI16CarloopRevision2E10hasBatteryEv>
 80a09fa:	b110      	cbz	r0, 80a0a02 <_ZN7CarloopI16CarloopRevision2E5beginE17CarloopFeatures_e+0x30>
    {
        enableBattery();
 80a09fc:	4620      	mov	r0, r4
 80a09fe:	f7ff ffcf 	bl	80a09a0 <_ZN7CarloopI16CarloopRevision2E13enableBatteryEv>
 80a0a02:	bd10      	pop	{r4, pc}

080a0a04 <_ZN7CarloopI16CarloopRevision2E18receiveSerialCharsEv>:
    return Config::FEATURES & features & CARLOOP_BATTERY;
}

// Receive bytes from the GPS
template <typename Config>
void Carloop<Config>::receiveSerialChars()
 80a0a04:	b570      	push	{r4, r5, r6, lr}
 80a0a06:	4604      	mov	r4, r0
{
    while(true) {
        WITH_LOCK(gpsDriver) {
 80a0a08:	f100 060c 	add.w	r6, r0, #12
    // Additional methods for thread synchronization
#if PLATFORM_THREADING
	os_mutex_recursive_t get_mutex()
	{
        if (mutex == nullptr) {
            os_mutex_recursive_create(&mutex);            
 80a0a0c:	f100 05e4 	add.w	r5, r0, #228	; 0xe4

    // Additional methods for thread synchronization
#if PLATFORM_THREADING
	os_mutex_recursive_t get_mutex()
	{
        if (mutex == nullptr) {
 80a0a10:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80a0a14:	b913      	cbnz	r3, 80a0a1c <_ZN7CarloopI16CarloopRevision2E18receiveSerialCharsEv+0x18>
            os_mutex_recursive_create(&mutex);            
 80a0a16:	4628      	mov	r0, r5
 80a0a18:	f000 fe48 	bl	80a16ac <os_mutex_recursive_create>
	}

	void lock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_lock(get_mutex());
 80a0a1c:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 80a0a20:	f000 fe4c 	bl	80a16bc <os_mutex_recursive_lock>
            while(Serial1.available())
 80a0a24:	f001 fc20 	bl	80a2268 <_Z22__fetch_global_Serial1v>
 80a0a28:	6803      	ldr	r3, [r0, #0]
 80a0a2a:	691b      	ldr	r3, [r3, #16]
 80a0a2c:	4798      	blx	r3
 80a0a2e:	b148      	cbz	r0, 80a0a44 <_ZN7CarloopI16CarloopRevision2E18receiveSerialCharsEv+0x40>
            {
                char c = Serial1.read();
 80a0a30:	f001 fc1a 	bl	80a2268 <_Z22__fetch_global_Serial1v>
 80a0a34:	6803      	ldr	r3, [r0, #0]
 80a0a36:	695b      	ldr	r3, [r3, #20]
 80a0a38:	4798      	blx	r3
                gpsDriver.encode(c);
 80a0a3a:	b2c1      	uxtb	r1, r0
 80a0a3c:	4630      	mov	r0, r6
 80a0a3e:	f000 fa8f 	bl	80a0f60 <_ZN11TinyGPSPlus6encodeEc>
template <typename Config>
void Carloop<Config>::receiveSerialChars()
{
    while(true) {
        WITH_LOCK(gpsDriver) {
            while(Serial1.available())
 80a0a42:	e7ef      	b.n	80a0a24 <_ZN7CarloopI16CarloopRevision2E18receiveSerialCharsEv+0x20>

    // Additional methods for thread synchronization
#if PLATFORM_THREADING
	os_mutex_recursive_t get_mutex()
	{
        if (mutex == nullptr) {
 80a0a44:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80a0a48:	b913      	cbnz	r3, 80a0a50 <_ZN7CarloopI16CarloopRevision2E18receiveSerialCharsEv+0x4c>
            os_mutex_recursive_create(&mutex);            
 80a0a4a:	4628      	mov	r0, r5
 80a0a4c:	f000 fe2e 	bl	80a16ac <os_mutex_recursive_create>
	}

	void unlock()
	{
#if PLATFORM_THREADING
		os_mutex_recursive_unlock(get_mutex());
 80a0a50:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 80a0a54:	f000 fe3a 	bl	80a16cc <os_mutex_recursive_unlock>
            {
                char c = Serial1.read();
                gpsDriver.encode(c);
            }
        }
        delay(1);
 80a0a58:	2001      	movs	r0, #1
 80a0a5a:	f001 f9f1 	bl	80a1e40 <delay>

// Receive bytes from the GPS
template <typename Config>
void Carloop<Config>::receiveSerialChars()
{
    while(true) {
 80a0a5e:	e7d7      	b.n	80a0a10 <_ZN7CarloopI16CarloopRevision2E18receiveSerialCharsEv+0xc>

080a0a60 <_ZNSt17_Function_handlerIFvvEZN7CarloopI16CarloopRevision2E9enableGPSEvEUlvE_E9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0a60:	b508      	push	{r3, lr}

    Serial1.begin(Config::GPS_BAUD_RATE);

    if (!gpsSerialThread) {
        // Start a thread that will run this->receiveSerialChars()
        gpsSerialThread = new Thread("gps_serial", [this]() { receiveSerialChars(); });
 80a0a62:	6800      	ldr	r0, [r0, #0]
 80a0a64:	f7ff ffce 	bl	80a0a04 <_ZN7CarloopI16CarloopRevision2E18receiveSerialCharsEv>
 80a0a68:	bd08      	pop	{r3, pc}

080a0a6a <_GLOBAL__sub_I_carloop.cpp>:
 80a0a6a:	f000 bd9f 	b.w	80a15ac <HAL_Pin_Map>

080a0a6e <_ZN11TinyGPSPlusC1Ev>:
        return rawLngData;
    }
    double lat();
    double lng();

    TinyGPSLocation() : valid(false), updated(false) {}
 80a0a6e:	2200      	movs	r2, #0
#define sq(x) ((x) * (x))

TinyGPSPlus::TinyGPSPlus()
    : parity(0), isChecksumTerm(false), curSentenceType(GPS_SENTENCE_OTHER), curTermNumber(0),
      curTermOffset(0), sentenceHasFix(false), customElts(0), customCandidates(0),
      encodedCharCount(0), sentencesWithFixCount(0), failedChecksumCount(0), passedChecksumCount(0)
 80a0a70:	2102      	movs	r1, #2
 80a0a72:	7002      	strb	r2, [r0, #0]
 80a0a74:	7042      	strb	r2, [r0, #1]
    uint16_t deg;
    uint32_t billionths;
    bool negative;

public:
    RawDegrees() : deg(0), billionths(0), negative(false) {}
 80a0a76:	8082      	strh	r2, [r0, #4]
 80a0a78:	6082      	str	r2, [r0, #8]
 80a0a7a:	7302      	strb	r2, [r0, #12]
 80a0a7c:	8202      	strh	r2, [r0, #16]
 80a0a7e:	6142      	str	r2, [r0, #20]
 80a0a80:	7602      	strb	r2, [r0, #24]
 80a0a82:	8382      	strh	r2, [r0, #28]
 80a0a84:	6202      	str	r2, [r0, #32]
 80a0a86:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 80a0a8a:	8502      	strh	r2, [r0, #40]	; 0x28
 80a0a8c:	62c2      	str	r2, [r0, #44]	; 0x2c
 80a0a8e:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
    }
    uint16_t year();
    uint8_t month();
    uint8_t day();

    TinyGPSDate() : valid(false), updated(false), date(0) {}
 80a0a92:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 80a0a96:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 80a0a9a:	63c2      	str	r2, [r0, #60]	; 0x3c
    uint8_t hour();
    uint8_t minute();
    uint8_t second();
    uint8_t centisecond();

    TinyGPSTime() : valid(false), updated(false), time(0) {}
 80a0a9c:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
 80a0aa0:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 80a0aa4:	64c2      	str	r2, [r0, #76]	; 0x4c
    {
        updated = false;
        return val;
    }

    TinyGPSDecimal() : valid(false), updated(false), val(0) {}
 80a0aa6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
 80a0aaa:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
 80a0aae:	6602      	str	r2, [r0, #96]	; 0x60
 80a0ab0:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
 80a0ab4:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
 80a0ab8:	6702      	str	r2, [r0, #112]	; 0x70
 80a0aba:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80a0abe:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
 80a0ac2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    {
        updated = false;
        return val;
    }

    TinyGPSInteger() : valid(false), updated(false), val(0) {}
 80a0ac6:	f880 2088 	strb.w	r2, [r0, #136]	; 0x88
 80a0aca:	f880 2089 	strb.w	r2, [r0, #137]	; 0x89
 80a0ace:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    {
        updated = false;
        return val;
    }

    TinyGPSDecimal() : valid(false), updated(false), val(0) {}
 80a0ad2:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 80a0ad6:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
 80a0ada:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
 80a0ade:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
 80a0ae2:	f880 20a9 	strb.w	r2, [r0, #169]	; 0xa9
 80a0ae6:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
 80a0aea:	f880 20ba 	strb.w	r2, [r0, #186]	; 0xba
 80a0aee:	f880 20bb 	strb.w	r2, [r0, #187]	; 0xbb
 80a0af2:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
 80a0af6:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 80a0afa:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
 80a0afe:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
 80a0b02:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
 80a0b06:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
 80a0b0a:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
{
    term[0] = '\0';
 80a0b0e:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
 80a0b12:	4770      	bx	lr

080a0b14 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
    if(a >= 'A' && a <= 'F')
 80a0b14:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80a0b18:	2b05      	cmp	r3, #5
 80a0b1a:	d802      	bhi.n	80a0b22 <_ZN11TinyGPSPlus7fromHexEc+0xe>
        return a - 'A' + 10;
 80a0b1c:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
 80a0b20:	4770      	bx	lr
    else if(a >= 'a' && a <= 'f')
 80a0b22:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80a0b26:	2b05      	cmp	r3, #5
        return a - 'a' + 10;
 80a0b28:	bf94      	ite	ls
 80a0b2a:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
    else
        return a - '0';
 80a0b2e:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
 80a0b32:	4770      	bx	lr

080a0b34 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
 80a0b34:	b538      	push	{r3, r4, r5, lr}
 80a0b36:	4604      	mov	r4, r0
    bool negative = *term == '-';
 80a0b38:	7805      	ldrb	r5, [r0, #0]
    if(negative)
 80a0b3a:	2d2d      	cmp	r5, #45	; 0x2d
        ++term;
 80a0b3c:	bf08      	it	eq
 80a0b3e:	3401      	addeq	r4, #1
    int32_t ret = 100 * (int32_t)atol(term);
 80a0b40:	4620      	mov	r0, r4
 80a0b42:	f002 fd59 	bl	80a35f8 <atol>
 80a0b46:	2364      	movs	r3, #100	; 0x64
 80a0b48:	4358      	muls	r0, r3
 80a0b4a:	4622      	mov	r2, r4
    while(isdigit(*term))
 80a0b4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a0b50:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a0b54:	2909      	cmp	r1, #9
 80a0b56:	d9f8      	bls.n	80a0b4a <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
        ++term;
    if(*term == '.' && isdigit(term[1]))
 80a0b58:	2b2e      	cmp	r3, #46	; 0x2e
 80a0b5a:	d10b      	bne.n	80a0b74 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
 80a0b5c:	7853      	ldrb	r3, [r2, #1]
 80a0b5e:	3b30      	subs	r3, #48	; 0x30
 80a0b60:	2b09      	cmp	r3, #9
 80a0b62:	d807      	bhi.n	80a0b74 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
    {
        ret += 10 * (term[1] - '0');
 80a0b64:	210a      	movs	r1, #10
 80a0b66:	fb01 0003 	mla	r0, r1, r3, r0
        if(isdigit(term[2]))
 80a0b6a:	7893      	ldrb	r3, [r2, #2]
 80a0b6c:	3b30      	subs	r3, #48	; 0x30
 80a0b6e:	2b09      	cmp	r3, #9
            ret += term[2] - '0';
 80a0b70:	bf98      	it	ls
 80a0b72:	18c0      	addls	r0, r0, r3
    }
    return negative ? -ret : ret;
 80a0b74:	2d2d      	cmp	r5, #45	; 0x2d
 80a0b76:	bf08      	it	eq
 80a0b78:	4240      	negeq	r0, r0
}
 80a0b7a:	bd38      	pop	{r3, r4, r5, pc}

080a0b7c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
 80a0b7c:	b538      	push	{r3, r4, r5, lr}
 80a0b7e:	4604      	mov	r4, r0
 80a0b80:	460d      	mov	r5, r1
    uint32_t leftOfDecimal = (uint32_t)atol(term);
 80a0b82:	f002 fd39 	bl	80a35f8 <atol>
    uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
    uint32_t multiplier = 10000000UL;
    uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 80a0b86:	2364      	movs	r3, #100	; 0x64
 80a0b88:	fbb0 f2f3 	udiv	r2, r0, r3
 80a0b8c:	fb03 0012 	mls	r0, r3, r2, r0
 80a0b90:	4b11      	ldr	r3, [pc, #68]	; (80a0bd8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)

    deg.deg = (int16_t)(leftOfDecimal / 100);
 80a0b92:	802a      	strh	r2, [r5, #0]
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
    uint32_t leftOfDecimal = (uint32_t)atol(term);
    uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
    uint32_t multiplier = 10000000UL;
    uint32_t tenMillionthsOfMinutes = minutes * multiplier;
 80a0b94:	4343      	muls	r3, r0
 80a0b96:	4620      	mov	r0, r4

    deg.deg = (int16_t)(leftOfDecimal / 100);

    while(isdigit(*term))
 80a0b98:	7802      	ldrb	r2, [r0, #0]
 80a0b9a:	4604      	mov	r4, r0
 80a0b9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80a0ba0:	2909      	cmp	r1, #9
 80a0ba2:	f100 0001 	add.w	r0, r0, #1
 80a0ba6:	d9f7      	bls.n	80a0b98 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
        ++term;

    if(*term == '.')
 80a0ba8:	2a2e      	cmp	r2, #46	; 0x2e
 80a0baa:	d10b      	bne.n	80a0bc4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
 80a0bac:	490a      	ldr	r1, [pc, #40]	; (80a0bd8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
        while(isdigit(*++term))
        {
            multiplier /= 10;
 80a0bae:	200a      	movs	r0, #10

    while(isdigit(*term))
        ++term;

    if(*term == '.')
        while(isdigit(*++term))
 80a0bb0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 80a0bb4:	3a30      	subs	r2, #48	; 0x30
 80a0bb6:	2a09      	cmp	r2, #9
 80a0bb8:	d804      	bhi.n	80a0bc4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
        {
            multiplier /= 10;
 80a0bba:	fbb1 f1f0 	udiv	r1, r1, r0
            tenMillionthsOfMinutes += (*term - '0') * multiplier;
 80a0bbe:	fb01 3302 	mla	r3, r1, r2, r3

    while(isdigit(*term))
        ++term;

    if(*term == '.')
        while(isdigit(*++term))
 80a0bc2:	e7f5      	b.n	80a0bb0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
        {
            multiplier /= 10;
            tenMillionthsOfMinutes += (*term - '0') * multiplier;
        }

    deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
 80a0bc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a0bc8:	3301      	adds	r3, #1
 80a0bca:	2203      	movs	r2, #3
 80a0bcc:	fbb3 f3f2 	udiv	r3, r3, r2
 80a0bd0:	606b      	str	r3, [r5, #4]
    deg.negative = false;
 80a0bd2:	2300      	movs	r3, #0
 80a0bd4:	722b      	strb	r3, [r5, #8]
 80a0bd6:	bd38      	pop	{r3, r4, r5, pc}
 80a0bd8:	00989680 	.word	0x00989680

080a0bdc <_ZN15TinyGPSLocation6commitEv>:
    return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
    rawLatData = rawNewLatData;
 80a0bdc:	4603      	mov	r3, r0
    int direction = (int)((course + 11.25f) / 22.5f);
    return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
 80a0bde:	b510      	push	{r4, lr}
    rawLatData = rawNewLatData;
 80a0be0:	f853 2f1c 	ldr.w	r2, [r3, #28]!
    int direction = (int)((course + 11.25f) / 22.5f);
    return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
 80a0be4:	4604      	mov	r4, r0
    rawLatData = rawNewLatData;
 80a0be6:	6042      	str	r2, [r0, #4]
 80a0be8:	685a      	ldr	r2, [r3, #4]
 80a0bea:	6082      	str	r2, [r0, #8]
 80a0bec:	7a1b      	ldrb	r3, [r3, #8]
 80a0bee:	7303      	strb	r3, [r0, #12]
    rawLngData = rawNewLngData;
 80a0bf0:	4603      	mov	r3, r0
 80a0bf2:	f853 2f28 	ldr.w	r2, [r3, #40]!
 80a0bf6:	6102      	str	r2, [r0, #16]
 80a0bf8:	685a      	ldr	r2, [r3, #4]
 80a0bfa:	6142      	str	r2, [r0, #20]
 80a0bfc:	7a1b      	ldrb	r3, [r3, #8]
 80a0bfe:	7603      	strb	r3, [r0, #24]
 80a0c00:	f000 fd1c 	bl	80a163c <HAL_Timer_Get_Milli_Seconds>
    lastCommitTime = millis();
    valid = updated = true;
 80a0c04:	2301      	movs	r3, #1

void TinyGPSLocation::commit()
{
    rawLatData = rawNewLatData;
    rawLngData = rawNewLngData;
    lastCommitTime = millis();
 80a0c06:	6360      	str	r0, [r4, #52]	; 0x34
    valid = updated = true;
 80a0c08:	7063      	strb	r3, [r4, #1]
 80a0c0a:	7023      	strb	r3, [r4, #0]
    if (rawLngData.deg == 0.0 || rawLatData.deg == 0.0) { valid = false; }
 80a0c0c:	8a20      	ldrh	r0, [r4, #16]
 80a0c0e:	f001 ff37 	bl	80a2a80 <__aeabi_i2d>
 80a0c12:	2200      	movs	r2, #0
 80a0c14:	2300      	movs	r3, #0
 80a0c16:	f002 fa01 	bl	80a301c <__aeabi_dcmpeq>
 80a0c1a:	b938      	cbnz	r0, 80a0c2c <_ZN15TinyGPSLocation6commitEv+0x50>
 80a0c1c:	88a0      	ldrh	r0, [r4, #4]
 80a0c1e:	f001 ff2f 	bl	80a2a80 <__aeabi_i2d>
 80a0c22:	2200      	movs	r2, #0
 80a0c24:	2300      	movs	r3, #0
 80a0c26:	f002 f9f9 	bl	80a301c <__aeabi_dcmpeq>
 80a0c2a:	b108      	cbz	r0, 80a0c30 <_ZN15TinyGPSLocation6commitEv+0x54>
 80a0c2c:	2300      	movs	r3, #0
 80a0c2e:	7023      	strb	r3, [r4, #0]
 80a0c30:	bd10      	pop	{r4, pc}

080a0c32 <_ZN11TinyGPSDate6commitEv>:
    double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
    return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
 80a0c32:	b510      	push	{r4, lr}
    date = newDate;
 80a0c34:	6883      	ldr	r3, [r0, #8]
    double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
    return rawLngData.negative ? -ret : ret;
}

void TinyGPSDate::commit()
{
 80a0c36:	4604      	mov	r4, r0
    date = newDate;
 80a0c38:	6043      	str	r3, [r0, #4]
 80a0c3a:	f000 fcff 	bl	80a163c <HAL_Timer_Get_Milli_Seconds>
    lastCommitTime = millis();
    valid = updated = true;
 80a0c3e:	2301      	movs	r3, #1
 80a0c40:	7063      	strb	r3, [r4, #1]
 80a0c42:	7023      	strb	r3, [r4, #0]
    if (date == 0) { valid = false; }
 80a0c44:	6863      	ldr	r3, [r4, #4]
}

void TinyGPSDate::commit()
{
    date = newDate;
    lastCommitTime = millis();
 80a0c46:	60e0      	str	r0, [r4, #12]
    valid = updated = true;
    if (date == 0) { valid = false; }
 80a0c48:	b903      	cbnz	r3, 80a0c4c <_ZN11TinyGPSDate6commitEv+0x1a>
 80a0c4a:	7023      	strb	r3, [r4, #0]
 80a0c4c:	bd10      	pop	{r4, pc}

080a0c4e <_ZN11TinyGPSTime6commitEv>:
}

void TinyGPSTime::commit()
{
 80a0c4e:	b510      	push	{r4, lr}
    time = newTime;
 80a0c50:	6883      	ldr	r3, [r0, #8]
    valid = updated = true;
    if (date == 0) { valid = false; }
}

void TinyGPSTime::commit()
{
 80a0c52:	4604      	mov	r4, r0
    time = newTime;
 80a0c54:	6043      	str	r3, [r0, #4]
 80a0c56:	f000 fcf1 	bl	80a163c <HAL_Timer_Get_Milli_Seconds>
    lastCommitTime = millis();
    valid = updated = true;
 80a0c5a:	2301      	movs	r3, #1
 80a0c5c:	7063      	strb	r3, [r4, #1]
 80a0c5e:	7023      	strb	r3, [r4, #0]
    if (time == 0) { valid = false; }
 80a0c60:	6863      	ldr	r3, [r4, #4]
}

void TinyGPSTime::commit()
{
    time = newTime;
    lastCommitTime = millis();
 80a0c62:	60e0      	str	r0, [r4, #12]
    valid = updated = true;
    if (time == 0) { valid = false; }
 80a0c64:	b903      	cbnz	r3, 80a0c68 <_ZN11TinyGPSTime6commitEv+0x1a>
 80a0c66:	7023      	strb	r3, [r4, #0]
 80a0c68:	bd10      	pop	{r4, pc}

080a0c6a <_ZN11TinyGPSTime7setTimeEPKc>:
}

void TinyGPSTime::setTime(const char *term) { newTime = (uint32_t)TinyGPSPlus::parseDecimal(term); }
 80a0c6a:	b510      	push	{r4, lr}
 80a0c6c:	4604      	mov	r4, r0
 80a0c6e:	4608      	mov	r0, r1
 80a0c70:	f7ff ff60 	bl	80a0b34 <_ZN11TinyGPSPlus12parseDecimalEPKc>
 80a0c74:	60a0      	str	r0, [r4, #8]
 80a0c76:	bd10      	pop	{r4, pc}

080a0c78 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term) { newDate = atol(term); }
 80a0c78:	b510      	push	{r4, lr}
 80a0c7a:	4604      	mov	r4, r0
 80a0c7c:	4608      	mov	r0, r1
 80a0c7e:	f002 fcbb 	bl	80a35f8 <atol>
 80a0c82:	60a0      	str	r0, [r4, #8]
 80a0c84:	bd10      	pop	{r4, pc}

080a0c86 <_ZN14TinyGPSDecimal6commitEv>:
    updated = false;
    return time % 100;
}

void TinyGPSDecimal::commit()
{
 80a0c86:	b510      	push	{r4, lr}
    val = newval;
 80a0c88:	68c3      	ldr	r3, [r0, #12]
    updated = false;
    return time % 100;
}

void TinyGPSDecimal::commit()
{
 80a0c8a:	4604      	mov	r4, r0
    val = newval;
 80a0c8c:	6083      	str	r3, [r0, #8]
 80a0c8e:	f000 fcd5 	bl	80a163c <HAL_Timer_Get_Milli_Seconds>
    lastCommitTime = millis();
    valid = updated = true;
 80a0c92:	2301      	movs	r3, #1
}

void TinyGPSDecimal::commit()
{
    val = newval;
    lastCommitTime = millis();
 80a0c94:	6060      	str	r0, [r4, #4]
    valid = updated = true;
 80a0c96:	7063      	strb	r3, [r4, #1]
 80a0c98:	7023      	strb	r3, [r4, #0]
 80a0c9a:	bd10      	pop	{r4, pc}

080a0c9c <_ZN14TinyGPSDecimal3setEPKc>:
}

void TinyGPSDecimal::set(const char *term) { newval = TinyGPSPlus::parseDecimal(term); }
 80a0c9c:	b510      	push	{r4, lr}
 80a0c9e:	4604      	mov	r4, r0
 80a0ca0:	4608      	mov	r0, r1
 80a0ca2:	f7ff ff47 	bl	80a0b34 <_ZN11TinyGPSPlus12parseDecimalEPKc>
 80a0ca6:	60e0      	str	r0, [r4, #12]
 80a0ca8:	bd10      	pop	{r4, pc}

080a0caa <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
 80a0caa:	b510      	push	{r4, lr}
    val = newval;
 80a0cac:	68c3      	ldr	r3, [r0, #12]
}

void TinyGPSDecimal::set(const char *term) { newval = TinyGPSPlus::parseDecimal(term); }

void TinyGPSInteger::commit()
{
 80a0cae:	4604      	mov	r4, r0
    val = newval;
 80a0cb0:	6083      	str	r3, [r0, #8]
 80a0cb2:	f000 fcc3 	bl	80a163c <HAL_Timer_Get_Milli_Seconds>
    lastCommitTime = millis();
    valid = updated = true;
 80a0cb6:	2301      	movs	r3, #1
void TinyGPSDecimal::set(const char *term) { newval = TinyGPSPlus::parseDecimal(term); }

void TinyGPSInteger::commit()
{
    val = newval;
    lastCommitTime = millis();
 80a0cb8:	6060      	str	r0, [r4, #4]
    valid = updated = true;
 80a0cba:	7063      	strb	r3, [r4, #1]
 80a0cbc:	7023      	strb	r3, [r4, #0]
 80a0cbe:	bd10      	pop	{r4, pc}

080a0cc0 <_ZN14TinyGPSInteger3setEPKc>:
}

void TinyGPSInteger::set(const char *term) { newval = atol(term); }
 80a0cc0:	b510      	push	{r4, lr}
 80a0cc2:	4604      	mov	r4, r0
 80a0cc4:	4608      	mov	r0, r1
 80a0cc6:	f002 fc97 	bl	80a35f8 <atol>
 80a0cca:	60e0      	str	r0, [r4, #12]
 80a0ccc:	bd10      	pop	{r4, pc}

080a0cce <_ZN13TinyGPSCustom6commitEv>:
    // Insert this item into the GPS tree
    gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
 80a0cce:	b510      	push	{r4, lr}
    strcpy(this->buffer, this->stagingBuffer);
 80a0cd0:	4601      	mov	r1, r0
    // Insert this item into the GPS tree
    gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
 80a0cd2:	4604      	mov	r4, r0
    strcpy(this->buffer, this->stagingBuffer);
 80a0cd4:	3010      	adds	r0, #16
 80a0cd6:	f002 fce7 	bl	80a36a8 <strcpy>
 80a0cda:	f000 fcaf 	bl	80a163c <HAL_Timer_Get_Milli_Seconds>
    lastCommitTime = millis();
    valid = updated = true;
 80a0cde:	2301      	movs	r3, #1
}

void TinyGPSCustom::commit()
{
    strcpy(this->buffer, this->stagingBuffer);
    lastCommitTime = millis();
 80a0ce0:	6220      	str	r0, [r4, #32]
    valid = updated = true;
 80a0ce2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 80a0ce6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a0cea:	bd10      	pop	{r4, pc}

080a0cec <_ZN13TinyGPSCustom3setEPKc>:
}

void TinyGPSCustom::set(const char *term)
{
    strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
 80a0cec:	2210      	movs	r2, #16
 80a0cee:	f002 bceb 	b.w	80a36c8 <strncpy>
	...

080a0cf4 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
 80a0cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // If it's the checksum term, and the checksum checks out, commit
    if(isChecksumTerm)
 80a0cf6:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPSPlus::endOfTermHandler()
{
 80a0cfa:	4604      	mov	r4, r0
    // If it's the checksum term, and the checksum checks out, commit
    if(isChecksumTerm)
 80a0cfc:	2d00      	cmp	r5, #0
 80a0cfe:	d06b      	beq.n	80a0dd8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xe4>
    {
        byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
 80a0d00:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
 80a0d04:	f7ff ff06 	bl	80a0b14 <_ZN11TinyGPSPlus7fromHexEc>
 80a0d08:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
 80a0d0c:	4602      	mov	r2, r0
 80a0d0e:	4620      	mov	r0, r4
 80a0d10:	f7ff ff00 	bl	80a0b14 <_ZN11TinyGPSPlus7fromHexEc>
        if(checksum == parity)
 80a0d14:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80a0d18:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80a0d1c:	b2c0      	uxtb	r0, r0
 80a0d1e:	4283      	cmp	r3, r0
 80a0d20:	d153      	bne.n	80a0dca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
        {
            passedChecksumCount++;
 80a0d22:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
 80a0d26:	3301      	adds	r3, #1
 80a0d28:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
            if(sentenceHasFix)
 80a0d2c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80a0d30:	b123      	cbz	r3, 80a0d3c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
                ++sentencesWithFixCount;
 80a0d32:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80a0d36:	3301      	adds	r3, #1
 80a0d38:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

            switch(curSentenceType)
 80a0d3c:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 80a0d40:	b1c3      	cbz	r3, 80a0d74 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x80>
 80a0d42:	2b01      	cmp	r3, #1
 80a0d44:	d12e      	bne.n	80a0da4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb0>
            {
            case GPS_SENTENCE_GPRMC:
                date.commit();
 80a0d46:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0d4a:	f7ff ff72 	bl	80a0c32 <_ZN11TinyGPSDate6commitEv>
                time.commit();
 80a0d4e:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80a0d52:	f7ff ff7c 	bl	80a0c4e <_ZN11TinyGPSTime6commitEv>
                fix = sentenceHasFix;
 80a0d56:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80a0d5a:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
                if(sentenceHasFix)
 80a0d5e:	b30b      	cbz	r3, 80a0da4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb0>
                {
                    location.commit();
 80a0d60:	4620      	mov	r0, r4
 80a0d62:	f7ff ff3b 	bl	80a0bdc <_ZN15TinyGPSLocation6commitEv>
                    speed.commit();
 80a0d66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80a0d6a:	f7ff ff8c 	bl	80a0c86 <_ZN14TinyGPSDecimal6commitEv>
                    course.commit();
 80a0d6e:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80a0d72:	e015      	b.n	80a0da0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xac>
                }
                break;
            case GPS_SENTENCE_GPGGA:
                time.commit();
 80a0d74:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80a0d78:	f7ff ff69 	bl	80a0c4e <_ZN11TinyGPSTime6commitEv>
                fix = sentenceHasFix;
 80a0d7c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80a0d80:	f884 30bd 	strb.w	r3, [r4, #189]	; 0xbd
                if(sentenceHasFix)
 80a0d84:	b133      	cbz	r3, 80a0d94 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xa0>
                {
                    location.commit();
 80a0d86:	4620      	mov	r0, r4
 80a0d88:	f7ff ff28 	bl	80a0bdc <_ZN15TinyGPSLocation6commitEv>
                    altitude.commit();
 80a0d8c:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80a0d90:	f7ff ff79 	bl	80a0c86 <_ZN14TinyGPSDecimal6commitEv>
                }
                satellites.commit();
 80a0d94:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80a0d98:	f7ff ff87 	bl	80a0caa <_ZN14TinyGPSInteger6commitEv>
                hdop.commit();
 80a0d9c:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80a0da0:	f7ff ff71 	bl	80a0c86 <_ZN14TinyGPSDecimal6commitEv>
                break;
            }

            // Commit all custom listeners of this sentence type
            for(TinyGPSCustom *p = customCandidates;
 80a0da4:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
                p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0;
 80a0da8:	2e00      	cmp	r6, #0
 80a0daa:	f000 80ce 	beq.w	80a0f4a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x256>
 80a0dae:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80a0db2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80a0db4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80a0db6:	f002 fc6d 	bl	80a3694 <strcmp>
 80a0dba:	2800      	cmp	r0, #0
 80a0dbc:	f040 80c5 	bne.w	80a0f4a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x256>
                p = p->next)
                p->commit();
 80a0dc0:	4630      	mov	r0, r6
 80a0dc2:	f7ff ff84 	bl	80a0cce <_ZN13TinyGPSCustom6commitEv>
                hdop.commit();
                break;
            }

            // Commit all custom listeners of this sentence type
            for(TinyGPSCustom *p = customCandidates;
 80a0dc6:	6b36      	ldr	r6, [r6, #48]	; 0x30
 80a0dc8:	e7ee      	b.n	80a0da8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb4>
            return true;
        }

        else
        {
            ++failedChecksumCount;
 80a0dca:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
        }

        return false;
 80a0dce:	2500      	movs	r5, #0
            return true;
        }

        else
        {
            ++failedChecksumCount;
 80a0dd0:	3301      	adds	r3, #1
 80a0dd2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
        }

        return false;
 80a0dd6:	e0b8      	b.n	80a0f4a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x256>
    }

    // the first term determines the sentence type
    if(curTermNumber == 0)
 80a0dd8:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
 80a0ddc:	bb72      	cbnz	r2, 80a0e3c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x148>
    {
        if(!strcmp(term, _GPRMCterm) || !strcmp(term, _GNRMCterm))
 80a0dde:	f100 06aa 	add.w	r6, r0, #170	; 0xaa
 80a0de2:	495b      	ldr	r1, [pc, #364]	; (80a0f50 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x25c>)
 80a0de4:	4630      	mov	r0, r6
 80a0de6:	f002 fc55 	bl	80a3694 <strcmp>
 80a0dea:	b120      	cbz	r0, 80a0df6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x102>
 80a0dec:	4959      	ldr	r1, [pc, #356]	; (80a0f54 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x260>)
 80a0dee:	4630      	mov	r0, r6
 80a0df0:	f002 fc50 	bl	80a3694 <strcmp>
 80a0df4:	b908      	cbnz	r0, 80a0dfa <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x106>
            curSentenceType = GPS_SENTENCE_GPRMC;
 80a0df6:	2301      	movs	r3, #1
 80a0df8:	e00c      	b.n	80a0e14 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x120>
        else if(!strcmp(term, _GPGGAterm) || !strcmp(term, _GNGGAterm))
 80a0dfa:	4957      	ldr	r1, [pc, #348]	; (80a0f58 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x264>)
 80a0dfc:	4630      	mov	r0, r6
 80a0dfe:	f002 fc49 	bl	80a3694 <strcmp>
 80a0e02:	b120      	cbz	r0, 80a0e0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11a>
 80a0e04:	4955      	ldr	r1, [pc, #340]	; (80a0f5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x268>)
 80a0e06:	4630      	mov	r0, r6
 80a0e08:	f002 fc44 	bl	80a3694 <strcmp>
 80a0e0c:	b908      	cbnz	r0, 80a0e12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x11e>
            curSentenceType = GPS_SENTENCE_GPGGA;
 80a0e0e:	2300      	movs	r3, #0
 80a0e10:	e000      	b.n	80a0e14 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x120>
        else
            curSentenceType = GPS_SENTENCE_OTHER;
 80a0e12:	2302      	movs	r3, #2
 80a0e14:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9

        // Any custom candidates of this sentence type?
        for(customCandidates = customElts;
 80a0e18:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 80a0e1c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
            customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0;
 80a0e20:	f8d4 70c4 	ldr.w	r7, [r4, #196]	; 0xc4
 80a0e24:	2f00      	cmp	r7, #0
 80a0e26:	f000 8090 	beq.w	80a0f4a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x256>
 80a0e2a:	4631      	mov	r1, r6
 80a0e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80a0e2e:	f002 fc31 	bl	80a3694 <strcmp>
 80a0e32:	2800      	cmp	r0, #0
 80a0e34:	f280 8085 	bge.w	80a0f42 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24e>
            customCandidates = customCandidates->next)
 80a0e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80a0e3a:	e7ef      	b.n	80a0e1c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x128>
            customCandidates = NULL;

        return false;
    }

    if(curSentenceType != GPS_SENTENCE_OTHER && term[0])
 80a0e3c:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
 80a0e40:	2902      	cmp	r1, #2
 80a0e42:	d066      	beq.n	80a0f12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21e>
 80a0e44:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 80a0e48:	2b00      	cmp	r3, #0
 80a0e4a:	d062      	beq.n	80a0f12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21e>
        switch(COMBINE(curSentenceType, curTermNumber))
 80a0e4c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 80a0e50:	3a01      	subs	r2, #1
 80a0e52:	2a28      	cmp	r2, #40	; 0x28
 80a0e54:	d85d      	bhi.n	80a0f12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21e>
 80a0e56:	e8df f002 	tbb	[pc, r2]
 80a0e5a:	2015      	.short	0x2015
 80a0e5c:	46312a23 	.word	0x46312a23
 80a0e60:	5c57534d 	.word	0x5c57534d
 80a0e64:	5c5c5c5c 	.word	0x5c5c5c5c
 80a0e68:	5c5c5c5c 	.word	0x5c5c5c5c
 80a0e6c:	5c5c5c5c 	.word	0x5c5c5c5c
 80a0e70:	5c5c5c5c 	.word	0x5c5c5c5c
 80a0e74:	5c5c5c5c 	.word	0x5c5c5c5c
 80a0e78:	1b155c5c 	.word	0x1b155c5c
 80a0e7c:	312a2320 	.word	0x312a2320
 80a0e80:	3c38      	.short	0x3c38
 80a0e82:	40          	.byte	0x40
 80a0e83:	00          	.byte	0x00
        {
        case COMBINE(GPS_SENTENCE_GPRMC, 1): // Time in both sentences
        case COMBINE(GPS_SENTENCE_GPGGA, 1):
            time.setTime(term);
 80a0e84:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80a0e88:	3048      	adds	r0, #72	; 0x48
 80a0e8a:	f7ff feee 	bl	80a0c6a <_ZN11TinyGPSTime7setTimeEPKc>
            break;
 80a0e8e:	e040      	b.n	80a0f12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21e>
        case COMBINE(GPS_SENTENCE_GPRMC, 2): // GPRMC validity
            sentenceHasFix = term[0] == 'A';
 80a0e90:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 80a0e94:	4243      	negs	r3, r0
 80a0e96:	4143      	adcs	r3, r0
 80a0e98:	e029      	b.n	80a0eee <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1fa>
    if (rawLngData.deg == 0.0 || rawLatData.deg == 0.0) { valid = false; }
}

void TinyGPSLocation::setLatitude(const char *term)
{
    TinyGPSPlus::parseDegrees(term, rawNewLatData);
 80a0e9a:	f100 011c 	add.w	r1, r0, #28
 80a0e9e:	e008      	b.n	80a0eb2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1be>
        case COMBINE(GPS_SENTENCE_GPGGA, 2):
            location.setLatitude(term);
            break;
        case COMBINE(GPS_SENTENCE_GPRMC, 4): // N/S
        case COMBINE(GPS_SENTENCE_GPGGA, 3):
            location.rawNewLatData.negative = term[0] == 'S';
 80a0ea0:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
 80a0ea4:	424b      	negs	r3, r1
 80a0ea6:	414b      	adcs	r3, r1
 80a0ea8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
            break;
 80a0eac:	e031      	b.n	80a0f12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21e>
    TinyGPSPlus::parseDegrees(term, rawNewLatData);
}

void TinyGPSLocation::setLongitude(const char *term)
{
    TinyGPSPlus::parseDegrees(term, rawNewLngData);
 80a0eae:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80a0eb2:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
 80a0eb6:	f7ff fe61 	bl	80a0b7c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
 80a0eba:	e02a      	b.n	80a0f12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21e>
        case COMBINE(GPS_SENTENCE_GPGGA, 4):
            location.setLongitude(term);
            break;
        case COMBINE(GPS_SENTENCE_GPRMC, 6): // E/W
        case COMBINE(GPS_SENTENCE_GPGGA, 5):
            location.rawNewLngData.negative = term[0] == 'W';
 80a0ebc:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
 80a0ec0:	4253      	negs	r3, r2
 80a0ec2:	4153      	adcs	r3, r2
 80a0ec4:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
            break;
 80a0ec8:	e023      	b.n	80a0f12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21e>
        case COMBINE(GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
            speed.set(term);
 80a0eca:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80a0ece:	3058      	adds	r0, #88	; 0x58
 80a0ed0:	e01d      	b.n	80a0f0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21a>
            break;
        case COMBINE(GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
            course.set(term);
 80a0ed2:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80a0ed6:	3068      	adds	r0, #104	; 0x68
 80a0ed8:	e019      	b.n	80a0f0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21a>
            break;
        case COMBINE(GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
            date.setDate(term);
 80a0eda:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80a0ede:	3038      	adds	r0, #56	; 0x38
 80a0ee0:	f7ff feca 	bl	80a0c78 <_ZN11TinyGPSDate7setDateEPKc>
            break;
 80a0ee4:	e015      	b.n	80a0f12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21e>
        case COMBINE(GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
            sentenceHasFix = term[0] > '0';
 80a0ee6:	2b30      	cmp	r3, #48	; 0x30
 80a0ee8:	bf94      	ite	ls
 80a0eea:	2300      	movls	r3, #0
 80a0eec:	2301      	movhi	r3, #1
 80a0eee:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
            break;
 80a0ef2:	e00e      	b.n	80a0f12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21e>
        case COMBINE(GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA)
            satellites.set(term);
 80a0ef4:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80a0ef8:	3088      	adds	r0, #136	; 0x88
 80a0efa:	f7ff fee1 	bl	80a0cc0 <_ZN14TinyGPSInteger3setEPKc>
            break;
 80a0efe:	e008      	b.n	80a0f12 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21e>
        case COMBINE(GPS_SENTENCE_GPGGA, 8): // HDOP
            hdop.set(term);
 80a0f00:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80a0f04:	3098      	adds	r0, #152	; 0x98
 80a0f06:	e002      	b.n	80a0f0e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x21a>
            break;
        case COMBINE(GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
            altitude.set(term);
 80a0f08:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80a0f0c:	3078      	adds	r0, #120	; 0x78
 80a0f0e:	f7ff fec5 	bl	80a0c9c <_ZN14TinyGPSDecimal3setEPKc>
            break;
        }

    // Set custom values as needed
    for(TinyGPSCustom *p = customCandidates;
 80a0f12:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
        p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 &&
            p->termNumber <= curTermNumber;
        p = p->next)
        if(p->termNumber == curTermNumber)
            p->set(term);
 80a0f16:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
            break;
        }

    // Set custom values as needed
    for(TinyGPSCustom *p = customCandidates;
        p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 &&
 80a0f1a:	b1b6      	cbz	r6, 80a0f4a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x256>
 80a0f1c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80a0f20:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80a0f22:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80a0f24:	f002 fbb6 	bl	80a3694 <strcmp>
 80a0f28:	b978      	cbnz	r0, 80a0f4a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x256>
            p->termNumber <= curTermNumber;
 80a0f2a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80a0f2c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
            break;
        }

    // Set custom values as needed
    for(TinyGPSCustom *p = customCandidates;
        p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 &&
 80a0f30:	429a      	cmp	r2, r3
 80a0f32:	dc0a      	bgt.n	80a0f4a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x256>
            p->termNumber <= curTermNumber;
        p = p->next)
        if(p->termNumber == curTermNumber)
 80a0f34:	d103      	bne.n	80a0f3e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x24a>
            p->set(term);
 80a0f36:	4639      	mov	r1, r7
 80a0f38:	4630      	mov	r0, r6
 80a0f3a:	f7ff fed7 	bl	80a0cec <_ZN13TinyGPSCustom3setEPKc>
            altitude.set(term);
            break;
        }

    // Set custom values as needed
    for(TinyGPSCustom *p = customCandidates;
 80a0f3e:	6b36      	ldr	r6, [r6, #48]	; 0x30
 80a0f40:	e7eb      	b.n	80a0f1a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x226>
        // Any custom candidates of this sentence type?
        for(customCandidates = customElts;
            customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0;
            customCandidates = customCandidates->next)
            ;
        if(customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
 80a0f42:	d002      	beq.n	80a0f4a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x256>
            customCandidates = NULL;
 80a0f44:	2300      	movs	r3, #0
 80a0f46:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
        p = p->next)
        if(p->termNumber == curTermNumber)
            p->set(term);

    return false;
}
 80a0f4a:	4628      	mov	r0, r5
 80a0f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0f4e:	bf00      	nop
 80a0f50:	080a39cf 	.word	0x080a39cf
 80a0f54:	080a39d5 	.word	0x080a39d5
 80a0f58:	080a39db 	.word	0x080a39db
 80a0f5c:	080a39e1 	.word	0x080a39e1

080a0f60 <_ZN11TinyGPSPlus6encodeEc>:
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
 80a0f60:	b538      	push	{r3, r4, r5, lr}
    ++encodedCharCount;
 80a0f62:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8

    switch(c)
 80a0f66:	2924      	cmp	r1, #36	; 0x24
// public methods
//

bool TinyGPSPlus::encode(char c)
{
    ++encodedCharCount;
 80a0f68:	f103 0301 	add.w	r3, r3, #1
//
// public methods
//

bool TinyGPSPlus::encode(char c)
{
 80a0f6c:	4604      	mov	r4, r0
 80a0f6e:	460d      	mov	r5, r1
    ++encodedCharCount;
 80a0f70:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

    switch(c)
 80a0f74:	d02a      	beq.n	80a0fcc <_ZN11TinyGPSPlus6encodeEc+0x6c>
 80a0f76:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
 80a0f7a:	d804      	bhi.n	80a0f86 <_ZN11TinyGPSPlus6encodeEc+0x26>
 80a0f7c:	290a      	cmp	r1, #10
 80a0f7e:	d00c      	beq.n	80a0f9a <_ZN11TinyGPSPlus6encodeEc+0x3a>
 80a0f80:	290d      	cmp	r1, #13
 80a0f82:	d132      	bne.n	80a0fea <_ZN11TinyGPSPlus6encodeEc+0x8a>
 80a0f84:	e009      	b.n	80a0f9a <_ZN11TinyGPSPlus6encodeEc+0x3a>
 80a0f86:	292a      	cmp	r1, #42	; 0x2a
 80a0f88:	d007      	beq.n	80a0f9a <_ZN11TinyGPSPlus6encodeEc+0x3a>
 80a0f8a:	292c      	cmp	r1, #44	; 0x2c
 80a0f8c:	d12d      	bne.n	80a0fea <_ZN11TinyGPSPlus6encodeEc+0x8a>
    {
    case ',': // term terminators
        parity ^= (uint8_t)c;
 80a0f8e:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 80a0f92:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
 80a0f96:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
    case '\r':
    case '\n':
    case '*':
    {
        bool isValidSentence = false;
        if(curTermOffset < sizeof(term))
 80a0f9a:	2b0e      	cmp	r3, #14
 80a0f9c:	f04f 0000 	mov.w	r0, #0
 80a0fa0:	d805      	bhi.n	80a0fae <_ZN11TinyGPSPlus6encodeEc+0x4e>
        {
            term[curTermOffset] = 0;
 80a0fa2:	4423      	add	r3, r4
 80a0fa4:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
            isValidSentence = endOfTermHandler();
 80a0fa8:	4620      	mov	r0, r4
 80a0faa:	f7ff fea3 	bl	80a0cf4 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
        }
        ++curTermNumber;
 80a0fae:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
 80a0fb2:	3301      	adds	r3, #1
 80a0fb4:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
        curTermOffset = 0;
 80a0fb8:	2300      	movs	r3, #0
 80a0fba:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
        isChecksumTerm = c == '*';
 80a0fbe:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
 80a0fc2:	425d      	negs	r5, r3
 80a0fc4:	415d      	adcs	r5, r3
 80a0fc6:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
        return isValidSentence;
 80a0fca:	bd38      	pop	{r3, r4, r5, pc}
    }
    break;

    case '$': // sentence begin
        curTermNumber = curTermOffset = 0;
 80a0fcc:	2000      	movs	r0, #0
        parity = 0;
        curSentenceType = GPS_SENTENCE_OTHER;
 80a0fce:	2302      	movs	r3, #2
        return isValidSentence;
    }
    break;

    case '$': // sentence begin
        curTermNumber = curTermOffset = 0;
 80a0fd0:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
 80a0fd4:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
        parity = 0;
 80a0fd8:	f884 00a8 	strb.w	r0, [r4, #168]	; 0xa8
        curSentenceType = GPS_SENTENCE_OTHER;
 80a0fdc:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
        isChecksumTerm = false;
 80a0fe0:	f884 00a9 	strb.w	r0, [r4, #169]	; 0xa9
        sentenceHasFix = false;
 80a0fe4:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
        return false;
 80a0fe8:	bd38      	pop	{r3, r4, r5, pc}

    default: // ordinary characters
        if(curTermOffset < sizeof(term) - 1)
 80a0fea:	2b0d      	cmp	r3, #13
            term[curTermOffset++] = c;
 80a0fec:	bf9f      	itttt	ls
 80a0fee:	1c5a      	addls	r2, r3, #1
 80a0ff0:	191b      	addls	r3, r3, r4
 80a0ff2:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
 80a0ff6:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
        if(!isChecksumTerm)
 80a0ffa:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
 80a0ffe:	b928      	cbnz	r0, 80a100c <_ZN11TinyGPSPlus6encodeEc+0xac>
            parity ^= c;
 80a1000:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
 80a1004:	404d      	eors	r5, r1
 80a1006:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 80a100a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 80a100c:	2000      	movs	r0, #0
    }

    return false;
}
 80a100e:	bd38      	pop	{r3, r4, r5, pc}

080a1010 <_GLOBAL__sub_I__ZN11TinyGPSPlusC2Ev>:
 80a1010:	f000 bacc 	b.w	80a15ac <HAL_Pin_Map>

080a1014 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1014:	4770      	bx	lr

080a1016 <_ZN11USARTSerialD0Ev>:
 80a1016:	b510      	push	{r4, lr}
 80a1018:	4604      	mov	r4, r0
 80a101a:	f7ff f840 	bl	80a009e <_ZdlPv>
 80a101e:	4620      	mov	r0, r4
 80a1020:	bd10      	pop	{r4, pc}

080a1022 <_Z13_crc16_updateth>:
// functions to calculate Modbus Application Data Unit CRC
// fix for #include <util/crc16.h>
uint16_t _crc16_update(uint16_t crc, uint8_t a) {
	int i;
	
	crc ^= a;
 80a1022:	4048      	eors	r0, r1
 80a1024:	2308      	movs	r3, #8
	for (i = 0; i < 8; ++i)
	{
		if (crc & 1)
 80a1026:	f010 0f01 	tst.w	r0, #1
 80a102a:	ea4f 0060 	mov.w	r0, r0, asr #1
			crc = (crc >> 1) ^ 0xA001;
 80a102e:	bf1a      	itte	ne
 80a1030:	f480 4020 	eorne.w	r0, r0, #40960	; 0xa000
 80a1034:	f080 0001 	eorne.w	r0, r0, #1
		else
			crc = (crc >> 1);
 80a1038:	b280      	uxtheq	r0, r0
// fix for #include <util/crc16.h>
uint16_t _crc16_update(uint16_t crc, uint8_t a) {
	int i;
	
	crc ^= a;
	for (i = 0; i < 8; ++i)
 80a103a:	3b01      	subs	r3, #1
 80a103c:	d1f3      	bne.n	80a1026 <_Z13_crc16_updateth+0x4>
			crc = (crc >> 1) ^ 0xA001;
		else
			crc = (crc >> 1);
	}
	return crc;
}
 80a103e:	4770      	bx	lr

080a1040 <_ZN12ModbusMasterC1Eh>:
@overload void ModbusMaster::ModbusMaster(uint8_t u8MBSlave)
@param u8MBSlave Modbus slave ID (1..255)
@ingroup setup
*/
ModbusMaster::ModbusMaster(uint8_t u8MBSlave) {
	_u8SerialPort = 1;
 80a1040:	2201      	movs	r2, #1
 80a1042:	7002      	strb	r2, [r0, #0]
	_u8MBSlave = u8MBSlave;
 80a1044:	7041      	strb	r1, [r0, #1]
}
 80a1046:	4770      	bx	lr

080a1048 <_ZN12ModbusMaster5beginEm>:

@overload ModbusMaster::begin(uint16_t u16BaudRate, uint8_t txrxpin)
@param u32BaudRate baud rate, in standard increments (300..115200)
@ingroup setup
*/
void ModbusMaster::begin(uint32_t u32BaudRate) {
 80a1048:	b538      	push	{r3, r4, r5, lr}
	_u8TransmitBufferIndex = 0;
 80a104a:	2300      	movs	r3, #0
 80a104c:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
	u16TransmitBufferLength = 0;
 80a1050:	f8a0 3112 	strh.w	r3, [r0, #274]	; 0x112

@overload ModbusMaster::begin(uint16_t u16BaudRate, uint8_t txrxpin)
@param u32BaudRate baud rate, in standard increments (300..115200)
@ingroup setup
*/
void ModbusMaster::begin(uint32_t u32BaudRate) {
 80a1054:	460d      	mov	r5, r1
			break;
		case 2:
			//MBSerial = Serial2; //Serial2 has not been implemented on Photon yet
			//break;
		default:
			MBSerial = Serial1;		// Default to Serial1 for Spark Core
 80a1056:	f001 f907 	bl	80a2268 <_Z22__fetch_global_Serial1v>
 80a105a:	4c08      	ldr	r4, [pc, #32]	; (80a107c <_ZN12ModbusMaster5beginEm+0x34>)
 80a105c:	6843      	ldr	r3, [r0, #4]
		break;
	}
  
	MBSerial.begin(u32BaudRate);
 80a105e:	4629      	mov	r1, r5
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 80a1060:	6063      	str	r3, [r4, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 80a1062:	6883      	ldr	r3, [r0, #8]
 80a1064:	60a3      	str	r3, [r4, #8]
 80a1066:	68c3      	ldr	r3, [r0, #12]
 80a1068:	60e3      	str	r3, [r4, #12]

#include "spark_wiring_stream.h"
#include "usart_hal.h"
#include "spark_wiring_platform.h"

class USARTSerial : public Stream
 80a106a:	7c03      	ldrb	r3, [r0, #16]
 80a106c:	7423      	strb	r3, [r4, #16]
 80a106e:	7c43      	ldrb	r3, [r0, #17]
 80a1070:	4802      	ldr	r0, [pc, #8]	; (80a107c <_ZN12ModbusMaster5beginEm+0x34>)
 80a1072:	7463      	strb	r3, [r4, #17]
}
 80a1074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		default:
			MBSerial = Serial1;		// Default to Serial1 for Spark Core
		break;
	}
  
	MBSerial.begin(u32BaudRate);
 80a1078:	f001 b8f0 	b.w	80a225c <_ZN11USARTSerial5beginEm>
 80a107c:	2000063c 	.word	0x2000063c

080a1080 <_ZN12ModbusMaster12disableTXpinEv>:
Does opposite of what enableTXpin() does

@ingroup setup
*/
void ModbusMaster::disableTXpin() {
	MBUseEnablePin = 0; 
 80a1080:	4b01      	ldr	r3, [pc, #4]	; (80a1088 <_ZN12ModbusMaster12disableTXpinEv+0x8>)
 80a1082:	2200      	movs	r2, #0
 80a1084:	701a      	strb	r2, [r3, #0]
 80a1086:	4770      	bx	lr
 80a1088:	20000650 	.word	0x20000650

080a108c <_ZN12ModbusMaster17getResponseBufferEh>:
@param u8Index index of response buffer array (0x00..0x3F)
@return value in position u8Index of response buffer (0x0000..0xFFFF)
@ingroup buffer
*/
uint16_t ModbusMaster::getResponseBuffer(uint8_t u8Index) {
	if (u8Index < ku8MaxBufferSize) {
 80a108c:	293f      	cmp	r1, #63	; 0x3f
		return _u16ResponseBuffer[u8Index];
 80a108e:	bf9a      	itte	ls
 80a1090:	3104      	addls	r1, #4
 80a1092:	f830 0011 	ldrhls.w	r0, [r0, r1, lsl #1]
	} else {
		return 0xFFFF;
 80a1096:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
 80a109a:	4770      	bx	lr

080a109c <_ZN12ModbusMaster23ModbusMasterTransactionEh>:
  - return status (success/exception)

@param u8MBFunction Modbus function (0x01..0xFF)
@return 0 on success; exception number on failure
*/
uint8_t ModbusMaster::ModbusMasterTransaction(uint8_t u8MBFunction) {
 80a109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t u32StartTime;
	uint8_t u8BytesLeft = 9;
	uint8_t u8MBStatus = ku8MBSuccess;
	
	// assemble Modbus Request Application Data Unit
	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;
 80a10a0:	7843      	ldrb	r3, [r0, #1]
  - return status (success/exception)

@param u8MBFunction Modbus function (0x01..0xFF)
@return 0 on success; exception number on failure
*/
uint8_t ModbusMaster::ModbusMasterTransaction(uint8_t u8MBFunction) {
 80a10a2:	b0c0      	sub	sp, #256	; 0x100
 80a10a4:	2917      	cmp	r1, #23
 80a10a6:	4604      	mov	r4, r0
 80a10a8:	460e      	mov	r6, r1
	uint32_t u32StartTime;
	uint8_t u8BytesLeft = 9;
	uint8_t u8MBStatus = ku8MBSuccess;
	
	// assemble Modbus Request Application Data Unit
	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;
 80a10aa:	f88d 3000 	strb.w	r3, [sp]
	u8ModbusADU[u8ModbusADUSize++] = u8MBFunction;
 80a10ae:	f88d 1001 	strb.w	r1, [sp, #1]
 80a10b2:	d814      	bhi.n	80a10de <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x42>
 80a10b4:	2301      	movs	r3, #1
 80a10b6:	4ab5      	ldr	r2, [pc, #724]	; (80a138c <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2f0>)
 80a10b8:	408b      	lsls	r3, r1
 80a10ba:	401a      	ands	r2, r3
 80a10bc:	2a00      	cmp	r2, #0
 80a10be:	f000 81a2 	beq.w	80a1406 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x36a>
		case ku8MBReadCoils:
		case ku8MBReadDiscreteInputs:
		case ku8MBReadInputRegisters:
		case ku8MBReadHoldingRegisters:
		case ku8MBReadWriteMultipleRegisters:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16ReadAddress);
 80a10c2:	8882      	ldrh	r2, [r0, #4]
 80a10c4:	0a11      	lsrs	r1, r2, #8
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadAddress);
 80a10c6:	f88d 2003 	strb.w	r2, [sp, #3]
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16ReadQty);
 80a10ca:	88c2      	ldrh	r2, [r0, #6]
		case ku8MBReadCoils:
		case ku8MBReadDiscreteInputs:
		case ku8MBReadInputRegisters:
		case ku8MBReadHoldingRegisters:
		case ku8MBReadWriteMultipleRegisters:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16ReadAddress);
 80a10cc:	f88d 1002 	strb.w	r1, [sp, #2]
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadAddress);
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16ReadQty);
 80a10d0:	0a11      	lsrs	r1, r2, #8
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadQty);
 80a10d2:	f88d 2005 	strb.w	r2, [sp, #5]
		case ku8MBReadInputRegisters:
		case ku8MBReadHoldingRegisters:
		case ku8MBReadWriteMultipleRegisters:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16ReadAddress);
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadAddress);
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16ReadQty);
 80a10d6:	f88d 1004 	strb.w	r1, [sp, #4]
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16ReadQty);
 80a10da:	2206      	movs	r2, #6
			break;
 80a10dc:	e194      	b.n	80a1408 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x36c>
	uint8_t u8BytesLeft = 9;
	uint8_t u8MBStatus = ku8MBSuccess;
	
	// assemble Modbus Request Application Data Unit
	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;
	u8ModbusADU[u8ModbusADUSize++] = u8MBFunction;
 80a10de:	2202      	movs	r2, #2
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteAddress);
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteAddress);
			break;
	}
  
	switch(u8MBFunction) {
 80a10e0:	1f73      	subs	r3, r6, #5
 80a10e2:	2b12      	cmp	r3, #18
 80a10e4:	f200 808b 	bhi.w	80a11fe <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x162>
 80a10e8:	e8df f003 	tbb	[pc, r3]
 80a10ec:	89890f0a 	.word	0x89890f0a
 80a10f0:	89898989 	.word	0x89898989
 80a10f4:	4e1b8989 	.word	0x4e1b8989
 80a10f8:	89898989 	.word	0x89898989
 80a10fc:	7389      	.short	0x7389
 80a10fe:	4e          	.byte	0x4e
 80a10ff:	00          	.byte	0x00
		case ku8MBWriteSingleCoil:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
 80a1100:	1c53      	adds	r3, r2, #1
 80a1102:	b2db      	uxtb	r3, r3
 80a1104:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
 80a1108:	e003      	b.n	80a1112 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x76>
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
			break;
	  
		case ku8MBWriteSingleRegister:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[0]);
 80a110a:	1c53      	adds	r3, r2, #1
 80a110c:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
 80a1110:	b2db      	uxtb	r3, r3
 80a1112:	0a08      	lsrs	r0, r1, #8
 80a1114:	f80d 0002 	strb.w	r0, [sp, r2]
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[0]);
 80a1118:	3202      	adds	r2, #2
 80a111a:	b2d2      	uxtb	r2, r2
 80a111c:	f80d 1003 	strb.w	r1, [sp, r3]
			break;
 80a1120:	e06d      	b.n	80a11fe <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x162>
	  
		case ku8MBWriteMultipleCoils:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
 80a1122:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
 80a1126:	1c50      	adds	r0, r2, #1
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[0]);
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[0]);
			break;
	  
		case ku8MBWriteMultipleCoils:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
 80a1128:	0a19      	lsrs	r1, r3, #8
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
 80a112a:	b2c0      	uxtb	r0, r0
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[0]);
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[0]);
			break;
	  
		case ku8MBWriteMultipleCoils:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
 80a112c:	f80d 1002 	strb.w	r1, [sp, r2]
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
			u8Qty = (_u16WriteQty % 8) ? ((_u16WriteQty >> 3) + 1) : (_u16WriteQty >> 3);
 80a1130:	f013 0f07 	tst.w	r3, #7
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[0]);
			break;
	  
		case ku8MBWriteMultipleCoils:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
 80a1134:	f80d 3000 	strb.w	r3, [sp, r0]
 80a1138:	ea4f 03e3 	mov.w	r3, r3, asr #3
 80a113c:	f102 0102 	add.w	r1, r2, #2
			u8Qty = (_u16WriteQty % 8) ? ((_u16WriteQty >> 3) + 1) : (_u16WriteQty >> 3);
 80a1140:	bf18      	it	ne
 80a1142:	3301      	addne	r3, #1
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[0]);
			break;
	  
		case ku8MBWriteMultipleCoils:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
 80a1144:	b2c9      	uxtb	r1, r1
			u8Qty = (_u16WriteQty % 8) ? ((_u16WriteQty >> 3) + 1) : (_u16WriteQty >> 3);
			u8ModbusADU[u8ModbusADUSize++] = u8Qty;
 80a1146:	1cd5      	adds	r5, r2, #3
			break;
	  
		case ku8MBWriteMultipleCoils:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
			u8Qty = (_u16WriteQty % 8) ? ((_u16WriteQty >> 3) + 1) : (_u16WriteQty >> 3);
 80a1148:	b2db      	uxtb	r3, r3
 80a114a:	3204      	adds	r2, #4
			u8ModbusADU[u8ModbusADUSize++] = u8Qty;
 80a114c:	f80d 3001 	strb.w	r3, [sp, r1]
 80a1150:	b2ed      	uxtb	r5, r5
 80a1152:	b2d1      	uxtb	r1, r2
 80a1154:	2700      	movs	r7, #0
 80a1156:	b2f8      	uxtb	r0, r7
 80a1158:	1e4a      	subs	r2, r1, #1
			for (i = 0; i < u8Qty; i++) {
 80a115a:	4298      	cmp	r0, r3
 80a115c:	b2d2      	uxtb	r2, r2
 80a115e:	d302      	bcc.n	80a1166 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0xca>
 80a1160:	195a      	adds	r2, r3, r5
 80a1162:	b2d2      	uxtb	r2, r2
 80a1164:	e04b      	b.n	80a11fe <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x162>
				switch(i % 2) {
 80a1166:	f010 0f01 	tst.w	r0, #1
 80a116a:	ea4f 0067 	mov.w	r0, r7, asr #1
					case 0: // i is even
						u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i >> 1]);
						break;
					
					case 1: // i is odd
						u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i >> 1]);
 80a116e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 80a1172:	f8b0 008c 	ldrh.w	r0, [r0, #140]	; 0x8c
 80a1176:	f101 0101 	add.w	r1, r1, #1
 80a117a:	bf18      	it	ne
 80a117c:	0a00      	lsrne	r0, r0, #8
 80a117e:	f80d 0002 	strb.w	r0, [sp, r2]
 80a1182:	3701      	adds	r7, #1
 80a1184:	b2c9      	uxtb	r1, r1
		case ku8MBWriteMultipleCoils:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
			u8Qty = (_u16WriteQty % 8) ? ((_u16WriteQty >> 3) + 1) : (_u16WriteQty >> 3);
			u8ModbusADU[u8ModbusADUSize++] = u8Qty;
			for (i = 0; i < u8Qty; i++) {
 80a1186:	e7e6      	b.n	80a1156 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0xba>
			}
			break;
	  
		case ku8MBWriteMultipleRegisters:
		case ku8MBReadWriteMultipleRegisters:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
 80a1188:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
 80a118c:	1c50      	adds	r0, r2, #1
			}
			break;
	  
		case ku8MBWriteMultipleRegisters:
		case ku8MBReadWriteMultipleRegisters:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
 80a118e:	0a19      	lsrs	r1, r3, #8
 80a1190:	f80d 1002 	strb.w	r1, [sp, r2]
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
 80a1194:	b2c0      	uxtb	r0, r0
 80a1196:	1c91      	adds	r1, r2, #2
 80a1198:	f80d 3000 	strb.w	r3, [sp, r0]
 80a119c:	b2c9      	uxtb	r1, r1
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty << 1);
 80a119e:	0058      	lsls	r0, r3, #1
 80a11a0:	3203      	adds	r2, #3
 80a11a2:	b2d2      	uxtb	r2, r2
 80a11a4:	f80d 0001 	strb.w	r0, [sp, r1]
 80a11a8:	2500      	movs	r5, #0
			
			for (i = 0; i < lowByte(_u16WriteQty); i++) {
 80a11aa:	b2db      	uxtb	r3, r3
 80a11ac:	b2e9      	uxtb	r1, r5
 80a11ae:	4299      	cmp	r1, r3
 80a11b0:	f105 0501 	add.w	r5, r5, #1
 80a11b4:	da23      	bge.n	80a11fe <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x162>
				u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[i]);
 80a11b6:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80a11ba:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
 80a11be:	1c50      	adds	r0, r2, #1
 80a11c0:	0a0f      	lsrs	r7, r1, #8
 80a11c2:	f80d 7002 	strb.w	r7, [sp, r2]
 80a11c6:	b2c0      	uxtb	r0, r0
				u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
 80a11c8:	3202      	adds	r2, #2
 80a11ca:	b2d2      	uxtb	r2, r2
 80a11cc:	f80d 1000 	strb.w	r1, [sp, r0]
		case ku8MBReadWriteMultipleRegisters:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteQty);
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty);
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteQty << 1);
			
			for (i = 0; i < lowByte(_u16WriteQty); i++) {
 80a11d0:	e7ec      	b.n	80a11ac <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x110>
				u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
			}
			break;
		
		case ku8MBMaskWriteRegister:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[0]);
 80a11d2:	f8b4 108c 	ldrh.w	r1, [r4, #140]	; 0x8c
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[0]);
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[1]);
 80a11d6:	f8b4 008e 	ldrh.w	r0, [r4, #142]	; 0x8e
				u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[i]);
			}
			break;
		
		case ku8MBMaskWriteRegister:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[0]);
 80a11da:	0a0b      	lsrs	r3, r1, #8
 80a11dc:	f80d 3002 	strb.w	r3, [sp, r2]
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[0]);
 80a11e0:	1c53      	adds	r3, r2, #1
 80a11e2:	b2db      	uxtb	r3, r3
 80a11e4:	f80d 1003 	strb.w	r1, [sp, r3]
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[1]);
 80a11e8:	1cd3      	adds	r3, r2, #3
 80a11ea:	1c91      	adds	r1, r2, #2
 80a11ec:	b2db      	uxtb	r3, r3
 80a11ee:	b2c9      	uxtb	r1, r1
 80a11f0:	0a05      	lsrs	r5, r0, #8
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[1]);
 80a11f2:	3204      	adds	r2, #4
			break;
		
		case ku8MBMaskWriteRegister:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[0]);
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[0]);
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16TransmitBuffer[1]);
 80a11f4:	f80d 5001 	strb.w	r5, [sp, r1]
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[1]);
 80a11f8:	b2d2      	uxtb	r2, r2
 80a11fa:	f80d 0003 	strb.w	r0, [sp, r3]
			break;
	}
  
	// append CRC
	u16CRC = 0xFFFF;
 80a11fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80a1202:	2500      	movs	r5, #0
	for (i = 0; i < u8ModbusADUSize; i++) {
 80a1204:	b2eb      	uxtb	r3, r5
 80a1206:	429a      	cmp	r2, r3
 80a1208:	d905      	bls.n	80a1216 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x17a>
		u16CRC = _crc16_update(u16CRC, u8ModbusADU[i]);
 80a120a:	f81d 1005 	ldrb.w	r1, [sp, r5]
 80a120e:	f7ff ff08 	bl	80a1022 <_Z13_crc16_updateth>
 80a1212:	3501      	adds	r5, #1
			break;
	}
  
	// append CRC
	u16CRC = 0xFFFF;
	for (i = 0; i < u8ModbusADUSize; i++) {
 80a1214:	e7f6      	b.n	80a1204 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x168>
		u16CRC = _crc16_update(u16CRC, u8ModbusADU[i]);
	}
	u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
 80a1216:	f80d 0002 	strb.w	r0, [sp, r2]
	u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
 80a121a:	f102 0802 	add.w	r8, r2, #2
 80a121e:	3201      	adds	r2, #1
 80a1220:	0a00      	lsrs	r0, r0, #8
 80a1222:	b2d2      	uxtb	r2, r2
 80a1224:	f80d 0002 	strb.w	r0, [sp, r2]
 80a1228:	fa5f f888 	uxtb.w	r8, r8
	u8ModbusADU[u8ModbusADUSize] = 0;
 80a122c:	2300      	movs	r3, #0
	
	if (MBSerial.available()) { //Empty the receive buffer before beginning.
 80a122e:	4858      	ldr	r0, [pc, #352]	; (80a1390 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2f4>)
	for (i = 0; i < u8ModbusADUSize; i++) {
		u16CRC = _crc16_update(u16CRC, u8ModbusADU[i]);
	}
	u8ModbusADU[u8ModbusADUSize++] = lowByte(u16CRC);
	u8ModbusADU[u8ModbusADUSize++] = highByte(u16CRC);
	u8ModbusADU[u8ModbusADUSize] = 0;
 80a1230:	f80d 3008 	strb.w	r3, [sp, r8]
	
	if (MBSerial.available()) { //Empty the receive buffer before beginning.
 80a1234:	f000 ffd9 	bl	80a21ea <_ZN11USARTSerial9availableEv>
 80a1238:	b110      	cbz	r0, 80a1240 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x1a4>
		MBSerial.read();
 80a123a:	4855      	ldr	r0, [pc, #340]	; (80a1390 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2f4>)
 80a123c:	f000 ffdb 	bl	80a21f6 <_ZN11USARTSerial4readEv>
	}
			
	// transmit request
	if (MBUseEnablePin == 1) {  //Switch RS485 driver to transmitting mode.
 80a1240:	4d54      	ldr	r5, [pc, #336]	; (80a1394 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2f8>)
 80a1242:	7829      	ldrb	r1, [r5, #0]
 80a1244:	2901      	cmp	r1, #1
 80a1246:	d103      	bne.n	80a1250 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x1b4>
		digitalWrite(MBTXEnablePin, HIGH);  
 80a1248:	4b53      	ldr	r3, [pc, #332]	; (80a1398 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2fc>)
 80a124a:	7818      	ldrb	r0, [r3, #0]
 80a124c:	f001 f8d3 	bl	80a23f6 <digitalWrite>
	}
	
	if(MBDebugSerialPrint == 1) { // Print transmitted frame for Debugging purposes out on Serial
 80a1250:	4f52      	ldr	r7, [pc, #328]	; (80a139c <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x300>)
 80a1252:	783b      	ldrb	r3, [r7, #0]
 80a1254:	2b01      	cmp	r3, #1
 80a1256:	d104      	bne.n	80a1262 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x1c6>
		Serial.print("TX: ");
 80a1258:	f000 ff60 	bl	80a211c <_Z16_fetch_usbserialv>
 80a125c:	4950      	ldr	r1, [pc, #320]	; (80a13a0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x304>)
 80a125e:	f000 fc87 	bl	80a1b70 <_ZN5Print5printEPKc>
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16TransmitBuffer[1]);
			break;
	}
  
	// append CRC
	u16CRC = 0xFFFF;
 80a1262:	f04f 0900 	mov.w	r9, #0
	}
	
	if(MBDebugSerialPrint == 1) { // Print transmitted frame for Debugging purposes out on Serial
		Serial.print("TX: ");
	}
	for (i = 0; i < u8ModbusADUSize; i++) {
 80a1266:	fa5f f389 	uxtb.w	r3, r9
 80a126a:	4598      	cmp	r8, r3
 80a126c:	d916      	bls.n	80a129c <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x200>
		MBSerial.write(u8ModbusADU[i]);
 80a126e:	f81d a009 	ldrb.w	sl, [sp, r9]
 80a1272:	4847      	ldr	r0, [pc, #284]	; (80a1390 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2f4>)
 80a1274:	4651      	mov	r1, sl
 80a1276:	f000 ffc4 	bl	80a2202 <_ZN11USARTSerial5writeEh>
		if(MBDebugSerialPrint == 1) { // Print trasnmitted frame for Debugging purposes out on Serial
 80a127a:	783b      	ldrb	r3, [r7, #0]
 80a127c:	2b01      	cmp	r3, #1
 80a127e:	d10a      	bne.n	80a1296 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x1fa>
			Serial.print(u8ModbusADU[i], HEX);
 80a1280:	f000 ff4c 	bl	80a211c <_Z16_fetch_usbserialv>
 80a1284:	4651      	mov	r1, sl
 80a1286:	2210      	movs	r2, #16
 80a1288:	f000 fcb9 	bl	80a1bfe <_ZN5Print5printEhi>
			Serial.print(" ");
 80a128c:	f000 ff46 	bl	80a211c <_Z16_fetch_usbserialv>
 80a1290:	4944      	ldr	r1, [pc, #272]	; (80a13a4 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x308>)
 80a1292:	f000 fc6d 	bl	80a1b70 <_ZN5Print5printEPKc>
 80a1296:	f109 0901 	add.w	r9, r9, #1
	}
	
	if(MBDebugSerialPrint == 1) { // Print transmitted frame for Debugging purposes out on Serial
		Serial.print("TX: ");
	}
	for (i = 0; i < u8ModbusADUSize; i++) {
 80a129a:	e7e4      	b.n	80a1266 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x1ca>
		if(MBDebugSerialPrint == 1) { // Print trasnmitted frame for Debugging purposes out on Serial
			Serial.print(u8ModbusADU[i], HEX);
			Serial.print(" ");
		}
	}
	if(MBDebugSerialPrint == 1) { // Print received frame for Debugging purposes out on Serial
 80a129c:	783b      	ldrb	r3, [r7, #0]
 80a129e:	2b01      	cmp	r3, #1
 80a12a0:	d109      	bne.n	80a12b6 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x21a>
		Serial.println(" ");
 80a12a2:	f000 ff3b 	bl	80a211c <_Z16_fetch_usbserialv>
 80a12a6:	493f      	ldr	r1, [pc, #252]	; (80a13a4 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x308>)
 80a12a8:	f000 fc75 	bl	80a1b96 <_ZN5Print7printlnEPKc>
		Serial.print("RX: ");
 80a12ac:	f000 ff36 	bl	80a211c <_Z16_fetch_usbserialv>
 80a12b0:	493d      	ldr	r1, [pc, #244]	; (80a13a8 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x30c>)
 80a12b2:	f000 fc5d 	bl	80a1b70 <_ZN5Print5printEPKc>
	}

	u8ModbusADUSize = 0;
	
	MBSerial.flush(); //Wait for transmission to get completed
 80a12b6:	4836      	ldr	r0, [pc, #216]	; (80a1390 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2f4>)
 80a12b8:	f000 ffa0 	bl	80a21fc <_ZN11USARTSerial5flushEv>

	if (MBUseEnablePin == 1) {  //Switch RS485 driver back to receiving mode.
 80a12bc:	782b      	ldrb	r3, [r5, #0]
 80a12be:	2b01      	cmp	r3, #1
 80a12c0:	d104      	bne.n	80a12cc <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x230>
		digitalWrite(MBTXEnablePin, LOW);  
 80a12c2:	4b35      	ldr	r3, [pc, #212]	; (80a1398 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2fc>)
 80a12c4:	2100      	movs	r1, #0
 80a12c6:	7818      	ldrb	r0, [r3, #0]
 80a12c8:	f001 f895 	bl	80a23f6 <digitalWrite>
 80a12cc:	f000 f9b6 	bl	80a163c <HAL_Timer_Get_Milli_Seconds>
	uint8_t u8ModbusADU[256];
	uint8_t u8ModbusADUSize = 0;
	uint8_t i, u8Qty;
	uint16_t u16CRC;
	uint32_t u32StartTime;
	uint8_t u8BytesLeft = 9;
 80a12d0:	2509      	movs	r5, #9
	if(MBDebugSerialPrint == 1) { // Print received frame for Debugging purposes out on Serial
		Serial.println(" ");
		Serial.print("RX: ");
	}

	u8ModbusADUSize = 0;
 80a12d2:	f04f 0800 	mov.w	r8, #0
				case ku8MBMaskWriteRegister:
					u8BytesLeft = 5;
					break;
			}
		}
		if (millis() > (u32StartTime + ku8MBResponseTimeout)) {
 80a12d6:	f100 09c8 	add.w	r9, r0, #200	; 0xc8
	}
	
	// loop until we run out of time or bytes, or an error occurs
	u32StartTime = millis();
	while (u8BytesLeft && !u8MBStatus) {
		if (MBSerial.available()) {
 80a12da:	482d      	ldr	r0, [pc, #180]	; (80a1390 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2f4>)
 80a12dc:	f000 ff85 	bl	80a21ea <_ZN11USARTSerial9availableEv>
 80a12e0:	b308      	cbz	r0, 80a1326 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x28a>
			u8ModbusADU[u8ModbusADUSize++] = MBSerial.read();
 80a12e2:	482b      	ldr	r0, [pc, #172]	; (80a1390 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2f4>)
 80a12e4:	f000 ff87 	bl	80a21f6 <_ZN11USARTSerial4readEv>
 80a12e8:	f80d 0008 	strb.w	r0, [sp, r8]
			if (u8ModbusADU[0] == 0) { //Incase the received character is zero, discard it
 80a12ec:	f89d 3000 	ldrb.w	r3, [sp]
 80a12f0:	2b00      	cmp	r3, #0
 80a12f2:	f000 80e9 	beq.w	80a14c8 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x42c>
				u8ModbusADUSize--;
				continue;
			}
			if(MBDebugSerialPrint == 1) { // Print received frame for Debugging purposes out on Serial
 80a12f6:	783b      	ldrb	r3, [r7, #0]
	
	// loop until we run out of time or bytes, or an error occurs
	u32StartTime = millis();
	while (u8BytesLeft && !u8MBStatus) {
		if (MBSerial.available()) {
			u8ModbusADU[u8ModbusADUSize++] = MBSerial.read();
 80a12f8:	f108 0801 	add.w	r8, r8, #1
			if (u8ModbusADU[0] == 0) { //Incase the received character is zero, discard it
				u8ModbusADUSize--;
				continue;
			}
			if(MBDebugSerialPrint == 1) { // Print received frame for Debugging purposes out on Serial
 80a12fc:	2b01      	cmp	r3, #1
	
	// loop until we run out of time or bytes, or an error occurs
	u32StartTime = millis();
	while (u8BytesLeft && !u8MBStatus) {
		if (MBSerial.available()) {
			u8ModbusADU[u8ModbusADUSize++] = MBSerial.read();
 80a12fe:	fa5f f888 	uxtb.w	r8, r8
			if (u8ModbusADU[0] == 0) { //Incase the received character is zero, discard it
				u8ModbusADUSize--;
				continue;
			}
			if(MBDebugSerialPrint == 1) { // Print received frame for Debugging purposes out on Serial
 80a1302:	d10d      	bne.n	80a1320 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x284>
				Serial.print(u8ModbusADU[u8ModbusADUSize-1], HEX);
 80a1304:	f000 ff0a 	bl	80a211c <_Z16_fetch_usbserialv>
 80a1308:	eb0d 0308 	add.w	r3, sp, r8
 80a130c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80a1310:	2210      	movs	r2, #16
 80a1312:	f000 fc74 	bl	80a1bfe <_ZN5Print5printEhi>
				Serial.print(" "); 
 80a1316:	f000 ff01 	bl	80a211c <_Z16_fetch_usbserialv>
 80a131a:	4922      	ldr	r1, [pc, #136]	; (80a13a4 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x308>)
 80a131c:	f000 fc28 	bl	80a1b70 <_ZN5Print5printEPKc>
			}
			u8BytesLeft--;
 80a1320:	3d01      	subs	r5, #1
 80a1322:	b2ed      	uxtb	r5, r5
 80a1324:	e003      	b.n	80a132e <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x292>
		} else {
			if (_idle) {
 80a1326:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 80a132a:	b103      	cbz	r3, 80a132e <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x292>
				_idle();
 80a132c:	4798      	blx	r3
			}
		}

		// evaluate slave ID, function code once enough bytes have been read
		if (u8ModbusADUSize == 5) {
 80a132e:	f1b8 0f05 	cmp.w	r8, #5
 80a1332:	d122      	bne.n	80a137a <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2de>
			// verify response is for correct Modbus slave
			if (u8ModbusADU[0] != _u8MBSlave) {
 80a1334:	f89d 2000 	ldrb.w	r2, [sp]
 80a1338:	7863      	ldrb	r3, [r4, #1]
 80a133a:	429a      	cmp	r2, r3
 80a133c:	d124      	bne.n	80a1388 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2ec>
				u8MBStatus = ku8MBInvalidSlaveID;
				break;
			}
		  
			// verify response is for correct Modbus function code (mask exception bit 7)
			if ((u8ModbusADU[1] & 0x7F) != u8MBFunction) {
 80a133e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a1342:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80a1346:	42b3      	cmp	r3, r6
 80a1348:	d132      	bne.n	80a13b0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x314>
				u8MBStatus = ku8MBInvalidFunction;
				break;
			}
		  
			// check whether Modbus exception occurred; return Modbus Exception Code
			if (bitRead(u8ModbusADU[1], 7)) {
 80a134a:	0611      	lsls	r1, r2, #24
 80a134c:	d502      	bpl.n	80a1354 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2b8>
				u8MBStatus = u8ModbusADU[2];
 80a134e:	f89d 5002 	ldrb.w	r5, [sp, #2]
				break;
 80a1352:	e02e      	b.n	80a13b2 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x316>
 80a1354:	2a17      	cmp	r2, #23
 80a1356:	d810      	bhi.n	80a137a <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2de>
 80a1358:	2301      	movs	r3, #1
 80a135a:	4093      	lsls	r3, r2
 80a135c:	4a13      	ldr	r2, [pc, #76]	; (80a13ac <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x310>)
 80a135e:	401a      	ands	r2, r3
 80a1360:	b952      	cbnz	r2, 80a1378 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2dc>
 80a1362:	4a0a      	ldr	r2, [pc, #40]	; (80a138c <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2f0>)
 80a1364:	401a      	ands	r2, r3
 80a1366:	b922      	cbnz	r2, 80a1372 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2d6>
				case ku8MBWriteMultipleRegisters:
					u8BytesLeft = 3;
					break;
			  
				case ku8MBMaskWriteRegister:
					u8BytesLeft = 5;
 80a1368:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80a136c:	bf18      	it	ne
 80a136e:	2505      	movne	r5, #5
 80a1370:	e003      	b.n	80a137a <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2de>
				case ku8MBReadCoils:
				case ku8MBReadDiscreteInputs:
				case ku8MBReadInputRegisters:
				case ku8MBReadHoldingRegisters:
				case ku8MBReadWriteMultipleRegisters:
					u8BytesLeft = u8ModbusADU[2];
 80a1372:	f89d 5002 	ldrb.w	r5, [sp, #2]
					break;
 80a1376:	e000      	b.n	80a137a <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x2de>
			  
				case ku8MBWriteSingleCoil:
				case ku8MBWriteMultipleCoils:
				case ku8MBWriteSingleRegister:
				case ku8MBWriteMultipleRegisters:
					u8BytesLeft = 3;
 80a1378:	2503      	movs	r5, #3
 80a137a:	f000 f95f 	bl	80a163c <HAL_Timer_Get_Milli_Seconds>
				case ku8MBMaskWriteRegister:
					u8BytesLeft = 5;
					break;
			}
		}
		if (millis() > (u32StartTime + ku8MBResponseTimeout)) {
 80a137e:	4548      	cmp	r0, r9
 80a1380:	f240 80a2 	bls.w	80a14c8 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x42c>
			u8MBStatus = ku8MBResponseTimedOut;
 80a1384:	25e2      	movs	r5, #226	; 0xe2
 80a1386:	e014      	b.n	80a13b2 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x316>

		// evaluate slave ID, function code once enough bytes have been read
		if (u8ModbusADUSize == 5) {
			// verify response is for correct Modbus slave
			if (u8ModbusADU[0] != _u8MBSlave) {
				u8MBStatus = ku8MBInvalidSlaveID;
 80a1388:	25e0      	movs	r5, #224	; 0xe0
 80a138a:	e012      	b.n	80a13b2 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x316>
 80a138c:	0080001e 	.word	0x0080001e
 80a1390:	2000063c 	.word	0x2000063c
 80a1394:	20000650 	.word	0x20000650
 80a1398:	20000308 	.word	0x20000308
 80a139c:	20000638 	.word	0x20000638
 80a13a0:	080a3a0b 	.word	0x080a3a0b
 80a13a4:	080a3a59 	.word	0x080a3a59
 80a13a8:	080a3a10 	.word	0x080a3a10
 80a13ac:	00018060 	.word	0x00018060
				break;
			}
		  
			// verify response is for correct Modbus function code (mask exception bit 7)
			if ((u8ModbusADU[1] & 0x7F) != u8MBFunction) {
				u8MBStatus = ku8MBInvalidFunction;
 80a13b0:	25e1      	movs	r5, #225	; 0xe1
		if (millis() > (u32StartTime + ku8MBResponseTimeout)) {
			u8MBStatus = ku8MBResponseTimedOut;
		}
	}
	
	if(MBDebugSerialPrint == 1) {  // Print received frame for Debugging purposes out on Serial
 80a13b2:	783b      	ldrb	r3, [r7, #0]
 80a13b4:	2b01      	cmp	r3, #1
 80a13b6:	d104      	bne.n	80a13c2 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x326>
		Serial.println(" "); 
 80a13b8:	f000 feb0 	bl	80a211c <_Z16_fetch_usbserialv>
 80a13bc:	494a      	ldr	r1, [pc, #296]	; (80a14e8 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x44c>)
 80a13be:	f000 fbea 	bl	80a1b96 <_ZN5Print7printlnEPKc>
	}
	// verify response is large enough to inspect further
	if (!u8MBStatus && u8ModbusADUSize >= 5) {
 80a13c2:	2d00      	cmp	r5, #0
 80a13c4:	f040 8084 	bne.w	80a14d0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x434>
 80a13c8:	f1b8 0f04 	cmp.w	r8, #4
 80a13cc:	d92d      	bls.n	80a142a <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x38e>
 80a13ce:	462a      	mov	r2, r5
 80a13d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
		// calculate CRC
		u16CRC = 0xFFFF;
		for (i = 0; i < (u8ModbusADUSize - 2); i++) {
 80a13d4:	f1a8 0602 	sub.w	r6, r8, #2
 80a13d8:	b2d3      	uxtb	r3, r2
 80a13da:	42b3      	cmp	r3, r6
 80a13dc:	f102 0201 	add.w	r2, r2, #1
 80a13e0:	da04      	bge.n	80a13ec <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x350>
			u16CRC = _crc16_update(u16CRC, u8ModbusADU[i]);
 80a13e2:	f81d 1003 	ldrb.w	r1, [sp, r3]
 80a13e6:	f7ff fe1c 	bl	80a1022 <_Z13_crc16_updateth>
	}
	// verify response is large enough to inspect further
	if (!u8MBStatus && u8ModbusADUSize >= 5) {
		// calculate CRC
		u16CRC = 0xFFFF;
		for (i = 0; i < (u8ModbusADUSize - 2); i++) {
 80a13ea:	e7f5      	b.n	80a13d8 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x33c>
			u16CRC = _crc16_update(u16CRC, u8ModbusADU[i]);
		}
		
		// verify CRC
		if (!u8MBStatus && (lowByte(u16CRC) != u8ModbusADU[u8ModbusADUSize - 2] ||
 80a13ec:	f81d 2006 	ldrb.w	r2, [sp, r6]
 80a13f0:	b2c3      	uxtb	r3, r0
 80a13f2:	4293      	cmp	r3, r2
 80a13f4:	d166      	bne.n	80a14c4 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x428>
		highByte(u16CRC) != u8ModbusADU[u8ModbusADUSize - 1])) {
 80a13f6:	44e8      	add	r8, sp
		for (i = 0; i < (u8ModbusADUSize - 2); i++) {
			u16CRC = _crc16_update(u16CRC, u8ModbusADU[i]);
		}
		
		// verify CRC
		if (!u8MBStatus && (lowByte(u16CRC) != u8ModbusADU[u8ModbusADUSize - 2] ||
 80a13f8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80a13fc:	f3c0 200f 	ubfx	r0, r0, #8, #16
 80a1400:	4283      	cmp	r3, r0
 80a1402:	d15f      	bne.n	80a14c4 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x428>
 80a1404:	e011      	b.n	80a142a <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x38e>
	uint8_t u8BytesLeft = 9;
	uint8_t u8MBStatus = ku8MBSuccess;
	
	// assemble Modbus Request Application Data Unit
	u8ModbusADU[u8ModbusADUSize++] = _u8MBSlave;
	u8ModbusADU[u8ModbusADUSize++] = u8MBFunction;
 80a1406:	2202      	movs	r2, #2
 80a1408:	4938      	ldr	r1, [pc, #224]	; (80a14ec <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x450>)
 80a140a:	4019      	ands	r1, r3
 80a140c:	2900      	cmp	r1, #0
 80a140e:	f43f ae67 	beq.w	80a10e0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x44>
		case ku8MBMaskWriteRegister:
		case ku8MBWriteMultipleCoils:
		case ku8MBWriteSingleRegister:
		case ku8MBWriteMultipleRegisters:
		case ku8MBReadWriteMultipleRegisters:
			u8ModbusADU[u8ModbusADUSize++] = highByte(_u16WriteAddress);
 80a1412:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
 80a1416:	1c53      	adds	r3, r2, #1
 80a1418:	0a08      	lsrs	r0, r1, #8
 80a141a:	f80d 0002 	strb.w	r0, [sp, r2]
 80a141e:	b2db      	uxtb	r3, r3
			u8ModbusADU[u8ModbusADUSize++] = lowByte(_u16WriteAddress);
 80a1420:	3202      	adds	r2, #2
 80a1422:	b2d2      	uxtb	r2, r2
 80a1424:	f80d 1003 	strb.w	r1, [sp, r3]
			break;
 80a1428:	e65a      	b.n	80a10e0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x44>
	}

	// disassemble ADU into words
	if (!u8MBStatus) {
		// evaluate returned Modbus function code
		switch(u8ModbusADU[1]) {
 80a142a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80a142e:	2a17      	cmp	r2, #23
 80a1430:	d84e      	bhi.n	80a14d0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x434>
 80a1432:	2301      	movs	r3, #1
 80a1434:	fa03 f202 	lsl.w	r2, r3, r2
 80a1438:	4b2d      	ldr	r3, [pc, #180]	; (80a14f0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x454>)
 80a143a:	4013      	ands	r3, r2
 80a143c:	bb63      	cbnz	r3, 80a1498 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x3fc>
 80a143e:	f012 0f06 	tst.w	r2, #6
 80a1442:	d045      	beq.n	80a14d0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x434>
			case ku8MBReadCoils:
			case ku8MBReadDiscreteInputs:
				// load bytes into word; response bytes are ordered L, H, L, H, ...
				for (i = 0; i < (u8ModbusADU[2] >> 1); i++) {
 80a1444:	461a      	mov	r2, r3
 80a1446:	f89d 6002 	ldrb.w	r6, [sp, #2]
 80a144a:	ea4f 0e66 	mov.w	lr, r6, asr #1
 80a144e:	b2d3      	uxtb	r3, r2
 80a1450:	4573      	cmp	r3, lr
 80a1452:	da11      	bge.n	80a1478 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x3dc>
					if (i < ku8MaxBufferSize) {
 80a1454:	2b3f      	cmp	r3, #63	; 0x3f
 80a1456:	d80b      	bhi.n	80a1470 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x3d4>
					_u16ResponseBuffer[i] = word(u8ModbusADU[2 * i + 4], u8ModbusADU[2 * i + 3]);
 80a1458:	1c9f      	adds	r7, r3, #2
 80a145a:	eb0d 0147 	add.w	r1, sp, r7, lsl #1



// Fix to define word type conversion function
uint16_t word(uint8_t high, uint8_t low) {
	uint16_t ret_val = low;
 80a145e:	f811 0c01 	ldrb.w	r0, [r1, #-1]
			case ku8MBReadCoils:
			case ku8MBReadDiscreteInputs:
				// load bytes into word; response bytes are ordered L, H, L, H, ...
				for (i = 0; i < (u8ModbusADU[2] >> 1); i++) {
					if (i < ku8MaxBufferSize) {
					_u16ResponseBuffer[i] = word(u8ModbusADU[2 * i + 4], u8ModbusADU[2 * i + 3]);
 80a1462:	f81d 7017 	ldrb.w	r7, [sp, r7, lsl #1]
 80a1466:	1d19      	adds	r1, r3, #4
 80a1468:	eb00 2007 	add.w	r0, r0, r7, lsl #8
 80a146c:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
					}
					_u8ResponseBufferLength = i;
 80a1470:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
 80a1474:	3201      	adds	r2, #1
		// evaluate returned Modbus function code
		switch(u8ModbusADU[1]) {
			case ku8MBReadCoils:
			case ku8MBReadDiscreteInputs:
				// load bytes into word; response bytes are ordered L, H, L, H, ...
				for (i = 0; i < (u8ModbusADU[2] >> 1); i++) {
 80a1476:	e7ea      	b.n	80a144e <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x3b2>
					}
					_u8ResponseBufferLength = i;
				}
				
				// in the event of an odd number of bytes, load last byte into zero-padded word
				if (u8ModbusADU[2] % 2) {
 80a1478:	07f2      	lsls	r2, r6, #31
 80a147a:	d529      	bpl.n	80a14d0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x434>
					if (i < ku8MaxBufferSize) {
 80a147c:	2b3f      	cmp	r3, #63	; 0x3f
					_u16ResponseBuffer[i] = word(0, u8ModbusADU[2 * i + 3]);
 80a147e:	bf9e      	ittt	ls
 80a1480:	eb0d 0143 	addls.w	r1, sp, r3, lsl #1
 80a1484:	78c9      	ldrbls	r1, [r1, #3]
 80a1486:	1d1a      	addls	r2, r3, #4
					}
					_u8ResponseBufferLength = i + 1;
 80a1488:	f103 0301 	add.w	r3, r3, #1
				}
				
				// in the event of an odd number of bytes, load last byte into zero-padded word
				if (u8ModbusADU[2] % 2) {
					if (i < ku8MaxBufferSize) {
					_u16ResponseBuffer[i] = word(0, u8ModbusADU[2 * i + 3]);
 80a148c:	bf98      	it	ls
 80a148e:	f824 1012 	strhls.w	r1, [r4, r2, lsl #1]
					}
					_u8ResponseBufferLength = i + 1;
 80a1492:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
 80a1496:	e01b      	b.n	80a14d0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x434>
			
			case ku8MBReadInputRegisters:
			case ku8MBReadHoldingRegisters:
			case ku8MBReadWriteMultipleRegisters:
				// load bytes into word; response bytes are ordered H, L, H, L, ...
				for (i = 0; i < (u8ModbusADU[2] >> 1); i++) {
 80a1498:	f89d 1002 	ldrb.w	r1, [sp, #2]
 80a149c:	2200      	movs	r2, #0
 80a149e:	1049      	asrs	r1, r1, #1
 80a14a0:	b2d3      	uxtb	r3, r2
 80a14a2:	428b      	cmp	r3, r1
 80a14a4:	da14      	bge.n	80a14d0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x434>
					if (i < ku8MaxBufferSize) {
 80a14a6:	2b3f      	cmp	r3, #63	; 0x3f
 80a14a8:	d808      	bhi.n	80a14bc <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x420>
						_u16ResponseBuffer[i] = word(u8ModbusADU[2 * i + 3], u8ModbusADU[2 * i + 4]);
 80a14aa:	eb0d 0743 	add.w	r7, sp, r3, lsl #1



// Fix to define word type conversion function
uint16_t word(uint8_t high, uint8_t low) {
	uint16_t ret_val = low;
 80a14ae:	793e      	ldrb	r6, [r7, #4]
			case ku8MBReadHoldingRegisters:
			case ku8MBReadWriteMultipleRegisters:
				// load bytes into word; response bytes are ordered H, L, H, L, ...
				for (i = 0; i < (u8ModbusADU[2] >> 1); i++) {
					if (i < ku8MaxBufferSize) {
						_u16ResponseBuffer[i] = word(u8ModbusADU[2 * i + 3], u8ModbusADU[2 * i + 4]);
 80a14b0:	78ff      	ldrb	r7, [r7, #3]
 80a14b2:	1d18      	adds	r0, r3, #4
 80a14b4:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 80a14b8:	f824 6010 	strh.w	r6, [r4, r0, lsl #1]
					}
					_u8ResponseBufferLength = i;
 80a14bc:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
 80a14c0:	3201      	adds	r2, #1
			
			case ku8MBReadInputRegisters:
			case ku8MBReadHoldingRegisters:
			case ku8MBReadWriteMultipleRegisters:
				// load bytes into word; response bytes are ordered H, L, H, L, ...
				for (i = 0; i < (u8ModbusADU[2] >> 1); i++) {
 80a14c2:	e7ed      	b.n	80a14a0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x404>
		}
		
		// verify CRC
		if (!u8MBStatus && (lowByte(u16CRC) != u8ModbusADU[u8ModbusADUSize - 2] ||
		highByte(u16CRC) != u8ModbusADU[u8ModbusADUSize - 1])) {
			u8MBStatus = ku8MBInvalidCRC;
 80a14c4:	25e3      	movs	r5, #227	; 0xe3
 80a14c6:	e003      	b.n	80a14d0 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x434>
		digitalWrite(MBTXEnablePin, LOW);  
	}
	
	// loop until we run out of time or bytes, or an error occurs
	u32StartTime = millis();
	while (u8BytesLeft && !u8MBStatus) {
 80a14c8:	2d00      	cmp	r5, #0
 80a14ca:	f47f af06 	bne.w	80a12da <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x23e>
 80a14ce:	e770      	b.n	80a13b2 <_ZN12ModbusMaster23ModbusMasterTransactionEh+0x316>
  
	_u8TransmitBufferIndex = 0;
	u16TransmitBufferLength = 0;
	_u8ResponseBufferIndex = 0;
	return u8MBStatus;
 80a14d0:	4628      	mov	r0, r5
				}
				break;
		}
	}
  
	_u8TransmitBufferIndex = 0;
 80a14d2:	2300      	movs	r3, #0
 80a14d4:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
	u16TransmitBufferLength = 0;
 80a14d8:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	_u8ResponseBufferIndex = 0;
 80a14dc:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	return u8MBStatus;
 80a14e0:	b040      	add	sp, #256	; 0x100
 80a14e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a14e6:	bf00      	nop
 80a14e8:	080a3a59 	.word	0x080a3a59
 80a14ec:	00c18060 	.word	0x00c18060
 80a14f0:	00800018 	.word	0x00800018

080a14f4 <_ZN12ModbusMaster18readInputRegistersEth>:
@return 0 on success; exception number on failure
@ingroup register
*/
uint8_t ModbusMaster::readInputRegisters(uint16_t u16ReadAddress,
  uint8_t u16ReadQty) {
	_u16ReadAddress = u16ReadAddress;
 80a14f4:	8081      	strh	r1, [r0, #4]
	_u16ReadQty = u16ReadQty;
 80a14f6:	80c2      	strh	r2, [r0, #6]
	return ModbusMasterTransaction(ku8MBReadInputRegisters);
 80a14f8:	2104      	movs	r1, #4
 80a14fa:	f7ff bdcf 	b.w	80a109c <_ZN12ModbusMaster23ModbusMasterTransactionEh>

080a14fe <_ZN12ModbusMaster15writeSingleCoilEth>:
@return 0 on success; exception number on failure
@ingroup discrete
*/
uint8_t ModbusMaster::writeSingleCoil(uint16_t u16WriteAddress, uint8_t u8State) {
	_u16WriteAddress = u16WriteAddress;
	_u16WriteQty = (u8State ? 0xFF00 : 0x0000);
 80a14fe:	2a00      	cmp	r2, #0
 80a1500:	bf14      	ite	ne
 80a1502:	f44f 427f 	movne.w	r2, #65280	; 0xff00
 80a1506:	2200      	moveq	r2, #0
@param u8State 0=OFF, non-zero=ON (0x00..0xFF)
@return 0 on success; exception number on failure
@ingroup discrete
*/
uint8_t ModbusMaster::writeSingleCoil(uint16_t u16WriteAddress, uint8_t u8State) {
	_u16WriteAddress = u16WriteAddress;
 80a1508:	f8a0 1088 	strh.w	r1, [r0, #136]	; 0x88
	_u16WriteQty = (u8State ? 0xFF00 : 0x0000);
 80a150c:	f8a0 208a 	strh.w	r2, [r0, #138]	; 0x8a
	return ModbusMasterTransaction(ku8MBWriteSingleCoil);
 80a1510:	2105      	movs	r1, #5
 80a1512:	f7ff bdc3 	b.w	80a109c <_ZN12ModbusMaster23ModbusMasterTransactionEh>
	...

080a1518 <_GLOBAL__sub_I_MBSerial>:
  
	_u8TransmitBufferIndex = 0;
	u16TransmitBufferLength = 0;
	_u8ResponseBufferIndex = 0;
	return u8MBStatus;
 80a1518:	b508      	push	{r3, lr}
 80a151a:	f000 f847 	bl	80a15ac <HAL_Pin_Map>

/* _____PROJECT INCLUDES_____________________________________________________ */
#include "ModbusMaster.h"

/* _____GLOBAL VARIABLES_____________________________________________________ */
USARTSerial MBSerial = Serial1;		 ///< Pointer to Serial1 class object
 80a151e:	f000 fea3 	bl	80a2268 <_Z22__fetch_global_Serial1v>
 80a1522:	4b0a      	ldr	r3, [pc, #40]	; (80a154c <_GLOBAL__sub_I_MBSerial+0x34>)
 80a1524:	6842      	ldr	r2, [r0, #4]
 80a1526:	490a      	ldr	r1, [pc, #40]	; (80a1550 <_GLOBAL__sub_I_MBSerial+0x38>)
 80a1528:	605a      	str	r2, [r3, #4]
 80a152a:	6882      	ldr	r2, [r0, #8]
 80a152c:	609a      	str	r2, [r3, #8]
 80a152e:	68c2      	ldr	r2, [r0, #12]
 80a1530:	60da      	str	r2, [r3, #12]
 80a1532:	4a08      	ldr	r2, [pc, #32]	; (80a1554 <_GLOBAL__sub_I_MBSerial+0x3c>)
 80a1534:	601a      	str	r2, [r3, #0]
 80a1536:	7c02      	ldrb	r2, [r0, #16]
 80a1538:	741a      	strb	r2, [r3, #16]
 80a153a:	7c42      	ldrb	r2, [r0, #17]
 80a153c:	4618      	mov	r0, r3
 80a153e:	745a      	strb	r2, [r3, #17]
  
	_u8TransmitBufferIndex = 0;
	u16TransmitBufferLength = 0;
	_u8ResponseBufferIndex = 0;
	return u8MBStatus;
 80a1540:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* _____PROJECT INCLUDES_____________________________________________________ */
#include "ModbusMaster.h"

/* _____GLOBAL VARIABLES_____________________________________________________ */
USARTSerial MBSerial = Serial1;		 ///< Pointer to Serial1 class object
 80a1544:	4a04      	ldr	r2, [pc, #16]	; (80a1558 <_GLOBAL__sub_I_MBSerial+0x40>)
 80a1546:	f000 bfe1 	b.w	80a250c <__aeabi_atexit>
 80a154a:	bf00      	nop
 80a154c:	2000063c 	.word	0x2000063c
 80a1550:	080a1015 	.word	0x080a1015
 80a1554:	080a3b90 	.word	0x080a3b90
 80a1558:	20000378 	.word	0x20000378

080a155c <_GLOBAL__sub_I__ZN8NexGaugeC2EhhPKcPv>:
 80a155c:	f000 b826 	b.w	80a15ac <HAL_Pin_Map>

080a1560 <_GLOBAL__sub_I__Z14NexSendCommandPKcz>:
 80a1560:	f000 b824 	b.w	80a15ac <HAL_Pin_Map>

080a1564 <_GLOBAL__sub_I__ZN14NexProgressBarC2EhhPKcPv>:
 80a1564:	f000 b822 	b.w	80a15ac <HAL_Pin_Map>

080a1568 <_GLOBAL__sub_I__ZN11NexWaveformC2EhhPKcPv>:
 80a1568:	f000 b820 	b.w	80a15ac <HAL_Pin_Map>

080a156c <_GLOBAL__sub_I__ZN9NexButtonC2EhhPKcPv>:
 80a156c:	f000 b81e 	b.w	80a15ac <HAL_Pin_Map>

080a1570 <_GLOBAL__sub_I__ZN8NexTimerC2EhhPKcPv>:
 80a1570:	f000 b81c 	b.w	80a15ac <HAL_Pin_Map>

080a1574 <_GLOBAL__sub_I__ZN6NexVarC2EhhPKc>:
 80a1574:	f000 b81a 	b.w	80a15ac <HAL_Pin_Map>

080a1578 <_GLOBAL__sub_I__ZN9NexNumberC2EhhPKc>:
 80a1578:	f000 b818 	b.w	80a15ac <HAL_Pin_Map>

080a157c <_GLOBAL__sub_I_ITEADLIB_Nextion.cpp>:
 80a157c:	f000 b816 	b.w	80a15ac <HAL_Pin_Map>

080a1580 <_GLOBAL__sub_I__ZN9NexObjectC2EhhPKcPv>:
 80a1580:	f000 b814 	b.w	80a15ac <HAL_Pin_Map>

080a1584 <_GLOBAL__sub_I__ZN11NexDSButtonC2EhhPKc>:
 80a1584:	f000 b812 	b.w	80a15ac <HAL_Pin_Map>

080a1588 <_GLOBAL__sub_I__Z11clearScreenm>:
 80a1588:	f000 b810 	b.w	80a15ac <HAL_Pin_Map>

080a158c <_GLOBAL__sub_I__ZN7NexCropC2EhhPKcPv>:
 80a158c:	f000 b80e 	b.w	80a15ac <HAL_Pin_Map>

080a1590 <_GLOBAL__sub_I__ZN9NexSliderC2EhhPKcPv>:
 80a1590:	f000 b80c 	b.w	80a15ac <HAL_Pin_Map>

080a1594 <_GLOBAL__sub_I_bkCmd>:
 80a1594:	f000 b80a 	b.w	80a15ac <HAL_Pin_Map>

080a1598 <_GLOBAL__sub_I__ZN10NexHotspotC2EhhPKcPv>:
 80a1598:	f000 b808 	b.w	80a15ac <HAL_Pin_Map>

080a159c <_GLOBAL__sub_I__ZN7NexPageC2EhhPKcPv>:
 80a159c:	f000 b806 	b.w	80a15ac <HAL_Pin_Map>

080a15a0 <_GLOBAL__sub_I__ZN7NexTextC2EhhPKcPv>:
 80a15a0:	f000 b804 	b.w	80a15ac <HAL_Pin_Map>

080a15a4 <_GLOBAL__sub_I__ZN10NexPictureC2EhhPKcPv>:
 80a15a4:	f000 b802 	b.w	80a15ac <HAL_Pin_Map>

080a15a8 <_GLOBAL__sub_I__ZN8NexTouchC2EhhPKcPv>:
 80a15a8:	f000 b800 	b.w	80a15ac <HAL_Pin_Map>

080a15ac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a15ac:	b508      	push	{r3, lr}
 80a15ae:	4b02      	ldr	r3, [pc, #8]	; (80a15b8 <HAL_Pin_Map+0xc>)
 80a15b0:	681b      	ldr	r3, [r3, #0]
 80a15b2:	681b      	ldr	r3, [r3, #0]
 80a15b4:	9301      	str	r3, [sp, #4]
 80a15b6:	bd08      	pop	{r3, pc}
 80a15b8:	080601b0 	.word	0x080601b0

080a15bc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a15bc:	b508      	push	{r3, lr}
 80a15be:	4b02      	ldr	r3, [pc, #8]	; (80a15c8 <HAL_Validate_Pin_Function+0xc>)
 80a15c0:	681b      	ldr	r3, [r3, #0]
 80a15c2:	685b      	ldr	r3, [r3, #4]
 80a15c4:	9301      	str	r3, [sp, #4]
 80a15c6:	bd08      	pop	{r3, pc}
 80a15c8:	080601b0 	.word	0x080601b0

080a15cc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a15cc:	b508      	push	{r3, lr}
 80a15ce:	4b02      	ldr	r3, [pc, #8]	; (80a15d8 <HAL_Pin_Mode+0xc>)
 80a15d0:	681b      	ldr	r3, [r3, #0]
 80a15d2:	689b      	ldr	r3, [r3, #8]
 80a15d4:	9301      	str	r3, [sp, #4]
 80a15d6:	bd08      	pop	{r3, pc}
 80a15d8:	080601b0 	.word	0x080601b0

080a15dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a15dc:	b508      	push	{r3, lr}
 80a15de:	4b02      	ldr	r3, [pc, #8]	; (80a15e8 <HAL_Get_Pin_Mode+0xc>)
 80a15e0:	681b      	ldr	r3, [r3, #0]
 80a15e2:	68db      	ldr	r3, [r3, #12]
 80a15e4:	9301      	str	r3, [sp, #4]
 80a15e6:	bd08      	pop	{r3, pc}
 80a15e8:	080601b0 	.word	0x080601b0

080a15ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a15ec:	b508      	push	{r3, lr}
 80a15ee:	4b02      	ldr	r3, [pc, #8]	; (80a15f8 <HAL_GPIO_Write+0xc>)
 80a15f0:	681b      	ldr	r3, [r3, #0]
 80a15f2:	691b      	ldr	r3, [r3, #16]
 80a15f4:	9301      	str	r3, [sp, #4]
 80a15f6:	bd08      	pop	{r3, pc}
 80a15f8:	080601b0 	.word	0x080601b0

080a15fc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a15fc:	b508      	push	{r3, lr}
 80a15fe:	4b02      	ldr	r3, [pc, #8]	; (80a1608 <HAL_ADC_Read+0xc>)
 80a1600:	681b      	ldr	r3, [r3, #0]
 80a1602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1604:	9301      	str	r3, [sp, #4]
 80a1606:	bd08      	pop	{r3, pc}
 80a1608:	080601b0 	.word	0x080601b0

080a160c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a160c:	b508      	push	{r3, lr}
 80a160e:	4b02      	ldr	r3, [pc, #8]	; (80a1618 <HAL_SPI_Init+0xc>)
 80a1610:	681b      	ldr	r3, [r3, #0]
 80a1612:	69db      	ldr	r3, [r3, #28]
 80a1614:	9301      	str	r3, [sp, #4]
 80a1616:	bd08      	pop	{r3, pc}
 80a1618:	080601b4 	.word	0x080601b4

080a161c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a161c:	b508      	push	{r3, lr}
 80a161e:	4b02      	ldr	r3, [pc, #8]	; (80a1628 <HAL_SPI_Is_Enabled+0xc>)
 80a1620:	681b      	ldr	r3, [r3, #0]
 80a1622:	6a1b      	ldr	r3, [r3, #32]
 80a1624:	9301      	str	r3, [sp, #4]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	080601b4 	.word	0x080601b4

080a162c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <HAL_RNG_GetRandomNumber+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	685b      	ldr	r3, [r3, #4]
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	0806019c 	.word	0x0806019c

080a163c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	695b      	ldr	r3, [r3, #20]
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	0806019c 	.word	0x0806019c

080a164c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <HAL_RTC_Get_UnixTime+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	69db      	ldr	r3, [r3, #28]
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	0806019c 	.word	0x0806019c

080a165c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <HAL_RTC_Time_Is_Valid+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	0806019c 	.word	0x0806019c

080a166c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601b8 	.word	0x080601b8

080a167c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <os_thread_create+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	685b      	ldr	r3, [r3, #4]
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601d0 	.word	0x080601d0

080a168c <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <os_thread_yield+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	68db      	ldr	r3, [r3, #12]
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601d0 	.word	0x080601d0

080a169c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a169c:	b508      	push	{r3, lr}
 80a169e:	4b02      	ldr	r3, [pc, #8]	; (80a16a8 <os_mutex_create+0xc>)
 80a16a0:	681b      	ldr	r3, [r3, #0]
 80a16a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	bd08      	pop	{r3, pc}
 80a16a8:	080601d0 	.word	0x080601d0

080a16ac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a16ac:	b508      	push	{r3, lr}
 80a16ae:	4b02      	ldr	r3, [pc, #8]	; (80a16b8 <os_mutex_recursive_create+0xc>)
 80a16b0:	681b      	ldr	r3, [r3, #0]
 80a16b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a16b4:	9301      	str	r3, [sp, #4]
 80a16b6:	bd08      	pop	{r3, pc}
 80a16b8:	080601d0 	.word	0x080601d0

080a16bc <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a16bc:	b508      	push	{r3, lr}
 80a16be:	4b02      	ldr	r3, [pc, #8]	; (80a16c8 <os_mutex_recursive_lock+0xc>)
 80a16c0:	681b      	ldr	r3, [r3, #0]
 80a16c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a16c4:	9301      	str	r3, [sp, #4]
 80a16c6:	bd08      	pop	{r3, pc}
 80a16c8:	080601d0 	.word	0x080601d0

080a16cc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a16cc:	b508      	push	{r3, lr}
 80a16ce:	4b02      	ldr	r3, [pc, #8]	; (80a16d8 <os_mutex_recursive_unlock+0xc>)
 80a16d0:	681b      	ldr	r3, [r3, #0]
 80a16d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a16d4:	9301      	str	r3, [sp, #4]
 80a16d6:	bd08      	pop	{r3, pc}
 80a16d8:	080601d0 	.word	0x080601d0

080a16dc <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 80a16dc:	b508      	push	{r3, lr}
 80a16de:	4b02      	ldr	r3, [pc, #8]	; (80a16e8 <os_thread_exit+0xc>)
 80a16e0:	681b      	ldr	r3, [r3, #0]
 80a16e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a16e4:	9301      	str	r3, [sp, #4]
 80a16e6:	bd08      	pop	{r3, pc}
 80a16e8:	080601d0 	.word	0x080601d0

080a16ec <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <HAL_USART_Init+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	699b      	ldr	r3, [r3, #24]
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	080601c4 	.word	0x080601c4

080a16fc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <HAL_USART_Write_Data+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	080601c4 	.word	0x080601c4

080a170c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b02      	ldr	r3, [pc, #8]	; (80a1718 <HAL_USART_Available_Data+0xc>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1714:	9301      	str	r3, [sp, #4]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	080601c4 	.word	0x080601c4

080a171c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a171c:	b508      	push	{r3, lr}
 80a171e:	4b02      	ldr	r3, [pc, #8]	; (80a1728 <HAL_USART_Read_Data+0xc>)
 80a1720:	681b      	ldr	r3, [r3, #0]
 80a1722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1724:	9301      	str	r3, [sp, #4]
 80a1726:	bd08      	pop	{r3, pc}
 80a1728:	080601c4 	.word	0x080601c4

080a172c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a172c:	b508      	push	{r3, lr}
 80a172e:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <HAL_USART_Peek_Data+0xc>)
 80a1730:	681b      	ldr	r3, [r3, #0]
 80a1732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1734:	9301      	str	r3, [sp, #4]
 80a1736:	bd08      	pop	{r3, pc}
 80a1738:	080601c4 	.word	0x080601c4

080a173c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a173c:	b508      	push	{r3, lr}
 80a173e:	4b02      	ldr	r3, [pc, #8]	; (80a1748 <HAL_USART_Flush_Data+0xc>)
 80a1740:	681b      	ldr	r3, [r3, #0]
 80a1742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1744:	9301      	str	r3, [sp, #4]
 80a1746:	bd08      	pop	{r3, pc}
 80a1748:	080601c4 	.word	0x080601c4

080a174c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a174c:	b508      	push	{r3, lr}
 80a174e:	4b02      	ldr	r3, [pc, #8]	; (80a1758 <HAL_USART_Is_Enabled+0xc>)
 80a1750:	681b      	ldr	r3, [r3, #0]
 80a1752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1754:	9301      	str	r3, [sp, #4]
 80a1756:	bd08      	pop	{r3, pc}
 80a1758:	080601c4 	.word	0x080601c4

080a175c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a175c:	b508      	push	{r3, lr}
 80a175e:	4b02      	ldr	r3, [pc, #8]	; (80a1768 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1760:	681b      	ldr	r3, [r3, #0]
 80a1762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1764:	9301      	str	r3, [sp, #4]
 80a1766:	bd08      	pop	{r3, pc}
 80a1768:	080601c4 	.word	0x080601c4

080a176c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a176c:	b508      	push	{r3, lr}
 80a176e:	4b02      	ldr	r3, [pc, #8]	; (80a1778 <HAL_USART_BeginConfig+0xc>)
 80a1770:	681b      	ldr	r3, [r3, #0]
 80a1772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1774:	9301      	str	r3, [sp, #4]
 80a1776:	bd08      	pop	{r3, pc}
 80a1778:	080601c4 	.word	0x080601c4

080a177c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a177c:	b508      	push	{r3, lr}
 80a177e:	4b02      	ldr	r3, [pc, #8]	; (80a1788 <HAL_I2C_Write_Data+0xc>)
 80a1780:	681b      	ldr	r3, [r3, #0]
 80a1782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1784:	9301      	str	r3, [sp, #4]
 80a1786:	bd08      	pop	{r3, pc}
 80a1788:	080601ac 	.word	0x080601ac

080a178c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a178c:	b508      	push	{r3, lr}
 80a178e:	4b02      	ldr	r3, [pc, #8]	; (80a1798 <HAL_I2C_Available_Data+0xc>)
 80a1790:	681b      	ldr	r3, [r3, #0]
 80a1792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1794:	9301      	str	r3, [sp, #4]
 80a1796:	bd08      	pop	{r3, pc}
 80a1798:	080601ac 	.word	0x080601ac

080a179c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a179c:	b508      	push	{r3, lr}
 80a179e:	4b02      	ldr	r3, [pc, #8]	; (80a17a8 <HAL_I2C_Read_Data+0xc>)
 80a17a0:	681b      	ldr	r3, [r3, #0]
 80a17a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a17a4:	9301      	str	r3, [sp, #4]
 80a17a6:	bd08      	pop	{r3, pc}
 80a17a8:	080601ac 	.word	0x080601ac

080a17ac <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a17ac:	b508      	push	{r3, lr}
 80a17ae:	4b02      	ldr	r3, [pc, #8]	; (80a17b8 <HAL_I2C_Peek_Data+0xc>)
 80a17b0:	681b      	ldr	r3, [r3, #0]
 80a17b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a17b4:	9301      	str	r3, [sp, #4]
 80a17b6:	bd08      	pop	{r3, pc}
 80a17b8:	080601ac 	.word	0x080601ac

080a17bc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a17bc:	b508      	push	{r3, lr}
 80a17be:	4b02      	ldr	r3, [pc, #8]	; (80a17c8 <HAL_I2C_Flush_Data+0xc>)
 80a17c0:	681b      	ldr	r3, [r3, #0]
 80a17c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a17c4:	9301      	str	r3, [sp, #4]
 80a17c6:	bd08      	pop	{r3, pc}
 80a17c8:	080601ac 	.word	0x080601ac

080a17cc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a17cc:	b508      	push	{r3, lr}
 80a17ce:	4b02      	ldr	r3, [pc, #8]	; (80a17d8 <HAL_I2C_Is_Enabled+0xc>)
 80a17d0:	681b      	ldr	r3, [r3, #0]
 80a17d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a17d4:	9301      	str	r3, [sp, #4]
 80a17d6:	bd08      	pop	{r3, pc}
 80a17d8:	080601ac 	.word	0x080601ac

080a17dc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a17dc:	b508      	push	{r3, lr}
 80a17de:	4b03      	ldr	r3, [pc, #12]	; (80a17ec <HAL_I2C_Init+0x10>)
 80a17e0:	681b      	ldr	r3, [r3, #0]
 80a17e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a17e6:	9301      	str	r3, [sp, #4]
 80a17e8:	bd08      	pop	{r3, pc}
 80a17ea:	0000      	.short	0x0000
 80a17ec:	080601ac 	.word	0x080601ac

080a17f0 <HAL_CAN_Init>:
#include "can_hal.h"
#endif

DYNALIB_BEGIN(hal_can)

DYNALIB_FN(0, hal_can, HAL_CAN_Init, void(HAL_CAN_Channel, uint16_t, uint16_t, void*))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <HAL_CAN_Init+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	681b      	ldr	r3, [r3, #0]
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601d4 	.word	0x080601d4

080a1800 <HAL_CAN_Begin>:
DYNALIB_FN(1, hal_can, HAL_CAN_Begin, void(HAL_CAN_Channel, uint32_t, uint32_t, void*))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <HAL_CAN_Begin+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	685b      	ldr	r3, [r3, #4]
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601d4 	.word	0x080601d4

080a1810 <HAL_CAN_Receive>:
DYNALIB_FN(2, hal_can, HAL_CAN_End, void(HAL_CAN_Channel, void*))
DYNALIB_FN(3, hal_can, HAL_CAN_Transmit, bool(HAL_CAN_Channel, const CANMessage*, void*))
DYNALIB_FN(4, hal_can, HAL_CAN_Receive, bool(HAL_CAN_Channel, CANMessage*, void*))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <HAL_CAN_Receive+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	691b      	ldr	r3, [r3, #16]
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601d4 	.word	0x080601d4

080a1820 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <HAL_USB_USART_Init+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	681b      	ldr	r3, [r3, #0]
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	080601d8 	.word	0x080601d8

080a1830 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <HAL_USB_USART_Available_Data+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	691b      	ldr	r3, [r3, #16]
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	080601d8 	.word	0x080601d8

080a1840 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	695b      	ldr	r3, [r3, #20]
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080601d8 	.word	0x080601d8

080a1850 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <HAL_USB_USART_Receive_Data+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	699b      	ldr	r3, [r3, #24]
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	080601d8 	.word	0x080601d8

080a1860 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <HAL_USB_USART_Send_Data+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	69db      	ldr	r3, [r3, #28]
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	080601d8 	.word	0x080601d8

080a1870 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <HAL_USB_USART_Flush_Data+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	6a1b      	ldr	r3, [r3, #32]
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	080601d8 	.word	0x080601d8

080a1880 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <system_mode+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	681b      	ldr	r3, [r3, #0]
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601a4 	.word	0x080601a4

080a1890 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <set_system_mode+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	685b      	ldr	r3, [r3, #4]
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601a4 	.word	0x080601a4

080a18a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <system_delay_ms+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	695b      	ldr	r3, [r3, #20]
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601a4 	.word	0x080601a4

080a18b0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a18b0:	b508      	push	{r3, lr}
 80a18b2:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <system_thread_get_state+0xc>)
 80a18b4:	681b      	ldr	r3, [r3, #0]
 80a18b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a18b8:	9301      	str	r3, [sp, #4]
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	080601a4 	.word	0x080601a4

080a18c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b03      	ldr	r3, [pc, #12]	; (80a18d0 <system_ctrl_set_app_request_handler+0x10>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a18ca:	9301      	str	r3, [sp, #4]
 80a18cc:	bd08      	pop	{r3, pc}
 80a18ce:	0000      	.short	0x0000
 80a18d0:	080601a4 	.word	0x080601a4

080a18d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a18d4:	b508      	push	{r3, lr}
 80a18d6:	4b03      	ldr	r3, [pc, #12]	; (80a18e4 <system_ctrl_set_result+0x10>)
 80a18d8:	681b      	ldr	r3, [r3, #0]
 80a18da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a18de:	9301      	str	r3, [sp, #4]
 80a18e0:	bd08      	pop	{r3, pc}
 80a18e2:	0000      	.short	0x0000
 80a18e4:	080601a4 	.word	0x080601a4

080a18e8 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a18e8:	b508      	push	{r3, lr}
 80a18ea:	4b02      	ldr	r3, [pc, #8]	; (80a18f4 <network_ready+0xc>)
 80a18ec:	681b      	ldr	r3, [r3, #0]
 80a18ee:	691b      	ldr	r3, [r3, #16]
 80a18f0:	9301      	str	r3, [sp, #4]
 80a18f2:	bd08      	pop	{r3, pc}
 80a18f4:	080601c8 	.word	0x080601c8

080a18f8 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a18f8:	b508      	push	{r3, lr}
 80a18fa:	4b02      	ldr	r3, [pc, #8]	; (80a1904 <spark_variable+0xc>)
 80a18fc:	681b      	ldr	r3, [r3, #0]
 80a18fe:	681b      	ldr	r3, [r3, #0]
 80a1900:	9301      	str	r3, [sp, #4]
 80a1902:	bd08      	pop	{r3, pc}
 80a1904:	080601cc 	.word	0x080601cc

080a1908 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1908:	b508      	push	{r3, lr}
 80a190a:	4b02      	ldr	r3, [pc, #8]	; (80a1914 <spark_function+0xc>)
 80a190c:	681b      	ldr	r3, [r3, #0]
 80a190e:	685b      	ldr	r3, [r3, #4]
 80a1910:	9301      	str	r3, [sp, #4]
 80a1912:	bd08      	pop	{r3, pc}
 80a1914:	080601cc 	.word	0x080601cc

080a1918 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1918:	b508      	push	{r3, lr}
 80a191a:	4b02      	ldr	r3, [pc, #8]	; (80a1924 <spark_process+0xc>)
 80a191c:	681b      	ldr	r3, [r3, #0]
 80a191e:	689b      	ldr	r3, [r3, #8]
 80a1920:	9301      	str	r3, [sp, #4]
 80a1922:	bd08      	pop	{r3, pc}
 80a1924:	080601cc 	.word	0x080601cc

080a1928 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1928:	b508      	push	{r3, lr}
 80a192a:	4b02      	ldr	r3, [pc, #8]	; (80a1934 <spark_cloud_flag_connected+0xc>)
 80a192c:	681b      	ldr	r3, [r3, #0]
 80a192e:	695b      	ldr	r3, [r3, #20]
 80a1930:	9301      	str	r3, [sp, #4]
 80a1932:	bd08      	pop	{r3, pc}
 80a1934:	080601cc 	.word	0x080601cc

080a1938 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1938:	b508      	push	{r3, lr}
 80a193a:	4b02      	ldr	r3, [pc, #8]	; (80a1944 <spark_sync_time_pending+0xc>)
 80a193c:	681b      	ldr	r3, [r3, #0]
 80a193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1940:	9301      	str	r3, [sp, #4]
 80a1942:	bd08      	pop	{r3, pc}
 80a1944:	080601cc 	.word	0x080601cc

080a1948 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1948:	b508      	push	{r3, lr}
 80a194a:	4b02      	ldr	r3, [pc, #8]	; (80a1954 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a194c:	681b      	ldr	r3, [r3, #0]
 80a194e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1950:	9301      	str	r3, [sp, #4]
 80a1952:	bd08      	pop	{r3, pc}
 80a1954:	080601cc 	.word	0x080601cc

080a1958 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1958:	b508      	push	{r3, lr}
 80a195a:	4b02      	ldr	r3, [pc, #8]	; (80a1964 <malloc+0xc>)
 80a195c:	681b      	ldr	r3, [r3, #0]
 80a195e:	681b      	ldr	r3, [r3, #0]
 80a1960:	9301      	str	r3, [sp, #4]
 80a1962:	bd08      	pop	{r3, pc}
 80a1964:	080601a0 	.word	0x080601a0

080a1968 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1968:	b508      	push	{r3, lr}
 80a196a:	4b02      	ldr	r3, [pc, #8]	; (80a1974 <free+0xc>)
 80a196c:	681b      	ldr	r3, [r3, #0]
 80a196e:	685b      	ldr	r3, [r3, #4]
 80a1970:	9301      	str	r3, [sp, #4]
 80a1972:	bd08      	pop	{r3, pc}
 80a1974:	080601a0 	.word	0x080601a0

080a1978 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1978:	b508      	push	{r3, lr}
 80a197a:	4b02      	ldr	r3, [pc, #8]	; (80a1984 <realloc+0xc>)
 80a197c:	681b      	ldr	r3, [r3, #0]
 80a197e:	689b      	ldr	r3, [r3, #8]
 80a1980:	9301      	str	r3, [sp, #4]
 80a1982:	bd08      	pop	{r3, pc}
 80a1984:	080601a0 	.word	0x080601a0

080a1988 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1988:	b508      	push	{r3, lr}
 80a198a:	4b02      	ldr	r3, [pc, #8]	; (80a1994 <abort+0xc>)
 80a198c:	681b      	ldr	r3, [r3, #0]
 80a198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1990:	9301      	str	r3, [sp, #4]
 80a1992:	bd08      	pop	{r3, pc}
 80a1994:	080601a0 	.word	0x080601a0

080a1998 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1998:	4770      	bx	lr

080a199a <_ZN8SPIClassD0Ev>:
 80a199a:	b510      	push	{r4, lr}
 80a199c:	4604      	mov	r4, r0
 80a199e:	f7fe fb7e 	bl	80a009e <_ZdlPv>
 80a19a2:	4620      	mov	r0, r4
 80a19a4:	bd10      	pop	{r4, pc}
	...

080a19a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a19a8:	b570      	push	{r4, r5, r6, lr}
 80a19aa:	4604      	mov	r4, r0
 80a19ac:	460e      	mov	r6, r1
 80a19ae:	4b07      	ldr	r3, [pc, #28]	; (80a19cc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a19b0:	2500      	movs	r5, #0
 80a19b2:	6003      	str	r3, [r0, #0]
 80a19b4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a19b8:	f7ff fe70 	bl	80a169c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a19bc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a19be:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a19c0:	f7ff fe24 	bl	80a160c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a19c4:	60a5      	str	r5, [r4, #8]
}
 80a19c6:	4620      	mov	r0, r4
 80a19c8:	bd70      	pop	{r4, r5, r6, pc}
 80a19ca:	bf00      	nop
 80a19cc:	080a3a20 	.word	0x080a3a20

080a19d0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a19d0:	7900      	ldrb	r0, [r0, #4]
 80a19d2:	f7ff be23 	b.w	80a161c <HAL_SPI_Is_Enabled>
	...

080a19d8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a19d8:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a19dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a19de:	4c0d      	ldr	r4, [pc, #52]	; (80a1a14 <_GLOBAL__sub_I_System+0x3c>)
 80a19e0:	2500      	movs	r5, #0
 80a19e2:	8063      	strh	r3, [r4, #2]
 80a19e4:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a19e8:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a19ea:	80a3      	strh	r3, [r4, #4]
 80a19ec:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a19ee:	f7ff ff4f 	bl	80a1890 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a19f2:	a802      	add	r0, sp, #8
 80a19f4:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a19f8:	462a      	mov	r2, r5
 80a19fa:	4629      	mov	r1, r5
 80a19fc:	f7ff fe36 	bl	80a166c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a1a00:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a1a02:	2b1e      	cmp	r3, #30
 80a1a04:	d104      	bne.n	80a1a10 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a1a06:	2303      	movs	r3, #3
 80a1a08:	7023      	strb	r3, [r4, #0]
 80a1a0a:	2311      	movs	r3, #17
 80a1a0c:	8065      	strh	r5, [r4, #2]
 80a1a0e:	80a3      	strh	r3, [r4, #4]
 80a1a10:	b003      	add	sp, #12
 80a1a12:	bd30      	pop	{r4, r5, pc}
 80a1a14:	20000652 	.word	0x20000652

080a1a18 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1a18:	b510      	push	{r4, lr}
 80a1a1a:	4604      	mov	r4, r0
{
	free(buffer);
 80a1a1c:	6800      	ldr	r0, [r0, #0]
 80a1a1e:	f7ff ffa3 	bl	80a1968 <free>
}
 80a1a22:	4620      	mov	r0, r4
 80a1a24:	bd10      	pop	{r4, pc}

080a1a26 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1a26:	b510      	push	{r4, lr}
 80a1a28:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1a2a:	6800      	ldr	r0, [r0, #0]
 80a1a2c:	b108      	cbz	r0, 80a1a32 <_ZN6String10invalidateEv+0xc>
 80a1a2e:	f7ff ff9b 	bl	80a1968 <free>
	buffer = NULL;
 80a1a32:	2300      	movs	r3, #0
 80a1a34:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1a36:	60a3      	str	r3, [r4, #8]
 80a1a38:	6063      	str	r3, [r4, #4]
 80a1a3a:	bd10      	pop	{r4, pc}

080a1a3c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1a3c:	b538      	push	{r3, r4, r5, lr}
 80a1a3e:	4604      	mov	r4, r0
 80a1a40:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1a42:	6800      	ldr	r0, [r0, #0]
 80a1a44:	3101      	adds	r1, #1
 80a1a46:	f7ff ff97 	bl	80a1978 <realloc>
	if (newbuffer) {
 80a1a4a:	b110      	cbz	r0, 80a1a52 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1a4c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1a50:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1a52:	bd38      	pop	{r3, r4, r5, pc}

080a1a54 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1a54:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1a56:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1a58:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1a5a:	b113      	cbz	r3, 80a1a62 <_ZN6String7reserveEj+0xe>
 80a1a5c:	6843      	ldr	r3, [r0, #4]
 80a1a5e:	428b      	cmp	r3, r1
 80a1a60:	d207      	bcs.n	80a1a72 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1a62:	4620      	mov	r0, r4
 80a1a64:	f7ff ffea 	bl	80a1a3c <_ZN6String12changeBufferEj>
 80a1a68:	b120      	cbz	r0, 80a1a74 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1a6a:	68a3      	ldr	r3, [r4, #8]
 80a1a6c:	b90b      	cbnz	r3, 80a1a72 <_ZN6String7reserveEj+0x1e>
 80a1a6e:	6822      	ldr	r2, [r4, #0]
 80a1a70:	7013      	strb	r3, [r2, #0]
 80a1a72:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1a74:	bd10      	pop	{r4, pc}

080a1a76 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1a76:	b570      	push	{r4, r5, r6, lr}
 80a1a78:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1a7a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1a7c:	4604      	mov	r4, r0
 80a1a7e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1a80:	f7ff ffe8 	bl	80a1a54 <_ZN6String7reserveEj>
 80a1a84:	b918      	cbnz	r0, 80a1a8e <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1a86:	4620      	mov	r0, r4
 80a1a88:	f7ff ffcd 	bl	80a1a26 <_ZN6String10invalidateEv>
		return *this;
 80a1a8c:	e009      	b.n	80a1aa2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1a8e:	462a      	mov	r2, r5
 80a1a90:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1a92:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1a94:	6820      	ldr	r0, [r4, #0]
 80a1a96:	f001 fdc1 	bl	80a361c <memcpy>
	buffer[len] = 0;
 80a1a9a:	6822      	ldr	r2, [r4, #0]
 80a1a9c:	68a3      	ldr	r3, [r4, #8]
 80a1a9e:	2100      	movs	r1, #0
 80a1aa0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1aa2:	4620      	mov	r0, r4
 80a1aa4:	bd70      	pop	{r4, r5, r6, pc}

080a1aa6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1aa6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1aa8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1aaa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1aac:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1aae:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1ab0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1ab2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1ab4:	460d      	mov	r5, r1
 80a1ab6:	b139      	cbz	r1, 80a1ac8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1ab8:	4608      	mov	r0, r1
 80a1aba:	f001 fdfd 	bl	80a36b8 <strlen>
 80a1abe:	4629      	mov	r1, r5
 80a1ac0:	4602      	mov	r2, r0
 80a1ac2:	4620      	mov	r0, r4
 80a1ac4:	f7ff ffd7 	bl	80a1a76 <_ZN6String4copyEPKcj>
}
 80a1ac8:	4620      	mov	r0, r4
 80a1aca:	bd38      	pop	{r3, r4, r5, pc}

080a1acc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1acc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1ace:	b510      	push	{r4, lr}
 80a1ad0:	460b      	mov	r3, r1
 80a1ad2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1ad4:	d007      	beq.n	80a1ae6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1ad6:	6809      	ldr	r1, [r1, #0]
 80a1ad8:	b119      	cbz	r1, 80a1ae2 <_ZN6StringaSERKS_+0x16>
 80a1ada:	689a      	ldr	r2, [r3, #8]
 80a1adc:	f7ff ffcb 	bl	80a1a76 <_ZN6String4copyEPKcj>
 80a1ae0:	e001      	b.n	80a1ae6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1ae2:	f7ff ffa0 	bl	80a1a26 <_ZN6String10invalidateEv>

	return *this;
}
 80a1ae6:	4620      	mov	r0, r4
 80a1ae8:	bd10      	pop	{r4, pc}

080a1aea <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1aea:	b510      	push	{r4, lr}
 80a1aec:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1aee:	2300      	movs	r3, #0
 80a1af0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1af2:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1af4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1af6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1af8:	f7ff ffe8 	bl	80a1acc <_ZN6StringaSERKS_>
}
 80a1afc:	4620      	mov	r0, r4
 80a1afe:	bd10      	pop	{r4, pc}

080a1b00 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1b00:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1b02:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1b04:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1b06:	b912      	cbnz	r2, 80a1b0e <_ZNK6String6equalsEPKc+0xe>
 80a1b08:	b919      	cbnz	r1, 80a1b12 <_ZNK6String6equalsEPKc+0x12>
 80a1b0a:	2001      	movs	r0, #1
 80a1b0c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a1b0e:	b911      	cbnz	r1, 80a1b16 <_ZNK6String6equalsEPKc+0x16>
 80a1b10:	6803      	ldr	r3, [r0, #0]
 80a1b12:	7818      	ldrb	r0, [r3, #0]
 80a1b14:	e002      	b.n	80a1b1c <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a1b16:	6800      	ldr	r0, [r0, #0]
 80a1b18:	f001 fdbc 	bl	80a3694 <strcmp>
 80a1b1c:	fab0 f080 	clz	r0, r0
 80a1b20:	0940      	lsrs	r0, r0, #5
}
 80a1b22:	bd08      	pop	{r3, pc}

080a1b24 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b26:	4606      	mov	r6, r0
 80a1b28:	460d      	mov	r5, r1
 80a1b2a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1b2c:	2400      	movs	r4, #0
  while (size--) {
 80a1b2e:	42bd      	cmp	r5, r7
 80a1b30:	d00c      	beq.n	80a1b4c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1b32:	6833      	ldr	r3, [r6, #0]
 80a1b34:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1b38:	689b      	ldr	r3, [r3, #8]
 80a1b3a:	4630      	mov	r0, r6
 80a1b3c:	4798      	blx	r3
     if (chunk>=0)
 80a1b3e:	2800      	cmp	r0, #0
 80a1b40:	db01      	blt.n	80a1b46 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1b42:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1b44:	e7f3      	b.n	80a1b2e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1b46:	2c00      	cmp	r4, #0
 80a1b48:	bf08      	it	eq
 80a1b4a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1b4c:	4620      	mov	r0, r4
 80a1b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b50 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1b50:	b570      	push	{r4, r5, r6, lr}
 80a1b52:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1b54:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1b56:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1b58:	b149      	cbz	r1, 80a1b6e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1b5a:	f001 fdad 	bl	80a36b8 <strlen>
 80a1b5e:	682b      	ldr	r3, [r5, #0]
 80a1b60:	4602      	mov	r2, r0
 80a1b62:	4621      	mov	r1, r4
 80a1b64:	4628      	mov	r0, r5
    }
 80a1b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1b6a:	68db      	ldr	r3, [r3, #12]
 80a1b6c:	4718      	bx	r3
    }
 80a1b6e:	bd70      	pop	{r4, r5, r6, pc}

080a1b70 <_ZN5Print5printEPKc>:
 80a1b70:	b508      	push	{r3, lr}
 80a1b72:	f7ff ffed 	bl	80a1b50 <_ZN5Print5writeEPKc>
 80a1b76:	bd08      	pop	{r3, pc}

080a1b78 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1b78:	6803      	ldr	r3, [r0, #0]
 80a1b7a:	689b      	ldr	r3, [r3, #8]
 80a1b7c:	4718      	bx	r3

080a1b7e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1b7e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1b80:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1b82:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1b84:	f7ff fff8 	bl	80a1b78 <_ZN5Print5printEc>
  n += print('\n');
 80a1b88:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1b8a:	4604      	mov	r4, r0
  n += print('\n');
 80a1b8c:	4628      	mov	r0, r5
 80a1b8e:	f7ff fff3 	bl	80a1b78 <_ZN5Print5printEc>
  return n;
}
 80a1b92:	4420      	add	r0, r4
 80a1b94:	bd38      	pop	{r3, r4, r5, pc}

080a1b96 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1b96:	b538      	push	{r3, r4, r5, lr}
 80a1b98:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1b9a:	f7ff ffd9 	bl	80a1b50 <_ZN5Print5writeEPKc>
 80a1b9e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1ba0:	4628      	mov	r0, r5
 80a1ba2:	f7ff ffec 	bl	80a1b7e <_ZN5Print7printlnEv>
  return n;
}
 80a1ba6:	4420      	add	r0, r4
 80a1ba8:	bd38      	pop	{r3, r4, r5, pc}

080a1baa <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1baa:	2a01      	cmp	r2, #1
 80a1bac:	bf98      	it	ls
 80a1bae:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1bb0:	b530      	push	{r4, r5, lr}
 80a1bb2:	460b      	mov	r3, r1
 80a1bb4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1bb6:	2100      	movs	r1, #0
 80a1bb8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1bbc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1bc0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1bc4:	fb05 3312 	mls	r3, r5, r2, r3
 80a1bc8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1bca:	2b09      	cmp	r3, #9
 80a1bcc:	bf94      	ite	ls
 80a1bce:	3330      	addls	r3, #48	; 0x30
 80a1bd0:	3337      	addhi	r3, #55	; 0x37
 80a1bd2:	b2db      	uxtb	r3, r3
 80a1bd4:	4621      	mov	r1, r4
 80a1bd6:	f804 3901 	strb.w	r3, [r4], #-1
 80a1bda:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1bdc:	2d00      	cmp	r5, #0
 80a1bde:	d1ef      	bne.n	80a1bc0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1be0:	f7ff ffb6 	bl	80a1b50 <_ZN5Print5writeEPKc>
}
 80a1be4:	b00b      	add	sp, #44	; 0x2c
 80a1be6:	bd30      	pop	{r4, r5, pc}

080a1be8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1be8:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1bea:	b922      	cbnz	r2, 80a1bf6 <_ZN5Print5printEmi+0xe>
 80a1bec:	6803      	ldr	r3, [r0, #0]
 80a1bee:	b2c9      	uxtb	r1, r1
 80a1bf0:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1bf2:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1bf4:	4718      	bx	r3
  else return printNumber(n, base);
 80a1bf6:	b2d2      	uxtb	r2, r2
}
 80a1bf8:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1bfa:	f7ff bfd6 	b.w	80a1baa <_ZN5Print11printNumberEmh>

080a1bfe <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1bfe:	f7ff bff3 	b.w	80a1be8 <_ZN5Print5printEmi>

080a1c02 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a1c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1c06:	4607      	mov	r7, r0
 80a1c08:	460e      	mov	r6, r1
  if (base == 0) {
 80a1c0a:	4615      	mov	r5, r2
 80a1c0c:	b92a      	cbnz	r2, 80a1c1a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1c0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a1c12:	6803      	ldr	r3, [r0, #0]
 80a1c14:	b2c9      	uxtb	r1, r1
 80a1c16:	689b      	ldr	r3, [r3, #8]
 80a1c18:	4718      	bx	r3
  } else if (base == 10) {
 80a1c1a:	2a0a      	cmp	r2, #10
 80a1c1c:	d102      	bne.n	80a1c24 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a1c1e:	2900      	cmp	r1, #0
 80a1c20:	da01      	bge.n	80a1c26 <_ZN5Print5printEli+0x24>
 80a1c22:	e004      	b.n	80a1c2e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1c24:	b2d2      	uxtb	r2, r2
  }
}
 80a1c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1c2a:	f7ff bfbe 	b.w	80a1baa <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1c2e:	212d      	movs	r1, #45	; 0x2d
 80a1c30:	f7ff ffa2 	bl	80a1b78 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1c34:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1c36:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1c38:	4271      	negs	r1, r6
 80a1c3a:	4638      	mov	r0, r7
 80a1c3c:	f7ff ffb5 	bl	80a1baa <_ZN5Print11printNumberEmh>
 80a1c40:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a1c48 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1c4c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1c4e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1c50:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1c52:	4617      	mov	r7, r2
 80a1c54:	461e      	mov	r6, r3
 80a1c56:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1c5a:	f001 fa11 	bl	80a3080 <__aeabi_dcmpun>
 80a1c5e:	b108      	cbz	r0, 80a1c64 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1c60:	4947      	ldr	r1, [pc, #284]	; (80a1d80 <_ZN5Print10printFloatEdh+0x138>)
 80a1c62:	e012      	b.n	80a1c8a <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1c64:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1c68:	f04f 32ff 	mov.w	r2, #4294967295
 80a1c6c:	4b45      	ldr	r3, [pc, #276]	; (80a1d84 <_ZN5Print10printFloatEdh+0x13c>)
 80a1c6e:	4638      	mov	r0, r7
 80a1c70:	4621      	mov	r1, r4
 80a1c72:	f001 fa05 	bl	80a3080 <__aeabi_dcmpun>
 80a1c76:	b968      	cbnz	r0, 80a1c94 <_ZN5Print10printFloatEdh+0x4c>
 80a1c78:	f04f 32ff 	mov.w	r2, #4294967295
 80a1c7c:	4b41      	ldr	r3, [pc, #260]	; (80a1d84 <_ZN5Print10printFloatEdh+0x13c>)
 80a1c7e:	4638      	mov	r0, r7
 80a1c80:	4621      	mov	r1, r4
 80a1c82:	f001 f9df 	bl	80a3044 <__aeabi_dcmple>
 80a1c86:	b928      	cbnz	r0, 80a1c94 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1c88:	493f      	ldr	r1, [pc, #252]	; (80a1d88 <_ZN5Print10printFloatEdh+0x140>)
 80a1c8a:	4640      	mov	r0, r8
 80a1c8c:	f7ff ff60 	bl	80a1b50 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1c94:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1c98:	4b3c      	ldr	r3, [pc, #240]	; (80a1d8c <_ZN5Print10printFloatEdh+0x144>)
 80a1c9a:	4638      	mov	r0, r7
 80a1c9c:	4631      	mov	r1, r6
 80a1c9e:	f001 f9e5 	bl	80a306c <__aeabi_dcmpgt>
 80a1ca2:	b108      	cbz	r0, 80a1ca8 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ca4:	493a      	ldr	r1, [pc, #232]	; (80a1d90 <_ZN5Print10printFloatEdh+0x148>)
 80a1ca6:	e7f0      	b.n	80a1c8a <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1ca8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1cac:	4b39      	ldr	r3, [pc, #228]	; (80a1d94 <_ZN5Print10printFloatEdh+0x14c>)
 80a1cae:	4638      	mov	r0, r7
 80a1cb0:	4631      	mov	r1, r6
 80a1cb2:	f001 f9bd 	bl	80a3030 <__aeabi_dcmplt>
 80a1cb6:	2800      	cmp	r0, #0
 80a1cb8:	d1f4      	bne.n	80a1ca4 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a1cba:	2200      	movs	r2, #0
 80a1cbc:	2300      	movs	r3, #0
 80a1cbe:	4638      	mov	r0, r7
 80a1cc0:	4631      	mov	r1, r6
 80a1cc2:	f001 f9b5 	bl	80a3030 <__aeabi_dcmplt>
 80a1cc6:	b138      	cbz	r0, 80a1cd8 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a1cc8:	212d      	movs	r1, #45	; 0x2d
 80a1cca:	4640      	mov	r0, r8
 80a1ccc:	f7ff ff54 	bl	80a1b78 <_ZN5Print5printEc>
     number = -number;
 80a1cd0:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a1cd4:	4604      	mov	r4, r0
 80a1cd6:	e000      	b.n	80a1cda <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1cd8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1cda:	492f      	ldr	r1, [pc, #188]	; (80a1d98 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1cdc:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1ce0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a1ce2:	fa5f f389 	uxtb.w	r3, r9
 80a1ce6:	429d      	cmp	r5, r3
 80a1ce8:	d906      	bls.n	80a1cf8 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a1cea:	2200      	movs	r2, #0
 80a1cec:	4b2b      	ldr	r3, [pc, #172]	; (80a1d9c <_ZN5Print10printFloatEdh+0x154>)
 80a1cee:	f001 f857 	bl	80a2da0 <__aeabi_ddiv>
 80a1cf2:	f109 0901 	add.w	r9, r9, #1
 80a1cf6:	e7f4      	b.n	80a1ce2 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1cf8:	463a      	mov	r2, r7
 80a1cfa:	4633      	mov	r3, r6
 80a1cfc:	f000 fd74 	bl	80a27e8 <__adddf3>
 80a1d00:	460f      	mov	r7, r1
 80a1d02:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1d04:	f001 f9fa 	bl	80a30fc <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1d08:	220a      	movs	r2, #10
 80a1d0a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1d0c:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1d0e:	4640      	mov	r0, r8
 80a1d10:	f7ff ff4b 	bl	80a1baa <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1d14:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1d16:	b37d      	cbz	r5, 80a1d78 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1d18:	4648      	mov	r0, r9
 80a1d1a:	f000 fea1 	bl	80a2a60 <__aeabi_ui2d>
 80a1d1e:	4602      	mov	r2, r0
 80a1d20:	460b      	mov	r3, r1
 80a1d22:	4630      	mov	r0, r6
 80a1d24:	4639      	mov	r1, r7
 80a1d26:	f000 fd5d 	bl	80a27e4 <__aeabi_dsub>
 80a1d2a:	4606      	mov	r6, r0
 80a1d2c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1d2e:	4640      	mov	r0, r8
 80a1d30:	491b      	ldr	r1, [pc, #108]	; (80a1da0 <_ZN5Print10printFloatEdh+0x158>)
 80a1d32:	f7ff ff0d 	bl	80a1b50 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1d36:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1d38:	4b18      	ldr	r3, [pc, #96]	; (80a1d9c <_ZN5Print10printFloatEdh+0x154>)
 80a1d3a:	2200      	movs	r2, #0
 80a1d3c:	4630      	mov	r0, r6
 80a1d3e:	4639      	mov	r1, r7
 80a1d40:	f000 ff04 	bl	80a2b4c <__aeabi_dmul>
 80a1d44:	460f      	mov	r7, r1
 80a1d46:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a1d48:	f001 f9b0 	bl	80a30ac <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1d4c:	220a      	movs	r2, #10
 80a1d4e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a1d50:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1d52:	4640      	mov	r0, r8
 80a1d54:	f7ff ff55 	bl	80a1c02 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a1d58:	4404      	add	r4, r0
    remainder -= toPrint;
 80a1d5a:	4648      	mov	r0, r9
 80a1d5c:	f000 fe90 	bl	80a2a80 <__aeabi_i2d>
 80a1d60:	4602      	mov	r2, r0
 80a1d62:	460b      	mov	r3, r1
 80a1d64:	4630      	mov	r0, r6
 80a1d66:	4639      	mov	r1, r7
 80a1d68:	f000 fd3c 	bl	80a27e4 <__aeabi_dsub>
 80a1d6c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1d6e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1d72:	4606      	mov	r6, r0
 80a1d74:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1d76:	d1df      	bne.n	80a1d38 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1d78:	4620      	mov	r0, r4
 80a1d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1d7e:	bf00      	nop
 80a1d80:	080a3a28 	.word	0x080a3a28
 80a1d84:	7fefffff 	.word	0x7fefffff
 80a1d88:	080a3a32 	.word	0x080a3a32
 80a1d8c:	41efffff 	.word	0x41efffff
 80a1d90:	080a3a2c 	.word	0x080a3a2c
 80a1d94:	c1efffff 	.word	0xc1efffff
 80a1d98:	3fe00000 	.word	0x3fe00000
 80a1d9c:	40240000 	.word	0x40240000
 80a1da0:	080a3a30 	.word	0x080a3a30

080a1da4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1da4:	f89d 1000 	ldrb.w	r1, [sp]
 80a1da8:	9100      	str	r1, [sp, #0]
 80a1daa:	f7ff bf4d 	b.w	80a1c48 <_ZN5Print10printFloatEdh>
	...

080a1db0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1db0:	4a01      	ldr	r2, [pc, #4]	; (80a1db8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1db2:	4b02      	ldr	r3, [pc, #8]	; (80a1dbc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1db4:	601a      	str	r2, [r3, #0]
 80a1db6:	4770      	bx	lr
 80a1db8:	080a3aef 	.word	0x080a3aef
 80a1dbc:	20000658 	.word	0x20000658

080a1dc0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a1dc0:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a1dc2:	2000      	movs	r0, #0
 80a1dc4:	f7ff fdb8 	bl	80a1938 <spark_sync_time_pending>
 80a1dc8:	b128      	cbz	r0, 80a1dd6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1dca:	f7ff fdad 	bl	80a1928 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a1dce:	f080 0001 	eor.w	r0, r0, #1
 80a1dd2:	b2c0      	uxtb	r0, r0
 80a1dd4:	bd08      	pop	{r3, pc}
 80a1dd6:	2001      	movs	r0, #1
    }
 80a1dd8:	bd08      	pop	{r3, pc}

080a1dda <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a1dda:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a1ddc:	2000      	movs	r0, #0
 80a1dde:	f7ff fc3d 	bl	80a165c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a1de2:	4604      	mov	r4, r0
 80a1de4:	b968      	cbnz	r0, 80a1e02 <_ZN9TimeClass7isValidEv+0x28>
        }
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a1de6:	f7ff fd4b 	bl	80a1880 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a1dea:	2801      	cmp	r0, #1
 80a1dec:	d10b      	bne.n	80a1e06 <_ZN9TimeClass7isValidEv+0x2c>
 80a1dee:	4620      	mov	r0, r4
 80a1df0:	f7ff fd5e 	bl	80a18b0 <system_thread_get_state>
 80a1df4:	b938      	cbnz	r0, 80a1e06 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a1df6:	f7ff ffe3 	bl	80a1dc0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a1dfa:	b930      	cbnz	r0, 80a1e0a <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a1dfc:	f7ff fd8c 	bl	80a1918 <spark_process>
 80a1e00:	e7f9      	b.n	80a1df6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a1e02:	2001      	movs	r0, #1
 80a1e04:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a1e06:	2000      	movs	r0, #0
 80a1e08:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a1e0a:	f7ff ffd9 	bl	80a1dc0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a1e0e:	2000      	movs	r0, #0
 80a1e10:	f7ff fc24 	bl	80a165c <HAL_RTC_Time_Is_Valid>
 80a1e14:	3000      	adds	r0, #0
 80a1e16:	bf18      	it	ne
 80a1e18:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a1e1a:	bd10      	pop	{r4, pc}

080a1e1c <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a1e1c:	b508      	push	{r3, lr}
    (void)isValid();
 80a1e1e:	f7ff ffdc 	bl	80a1dda <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a1e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a1e26:	f7ff bc11 	b.w	80a164c <HAL_RTC_Get_UnixTime>
	...

080a1e2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1e2c:	4b02      	ldr	r3, [pc, #8]	; (80a1e38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1e2e:	681a      	ldr	r2, [r3, #0]
 80a1e30:	4b02      	ldr	r3, [pc, #8]	; (80a1e3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1e32:	601a      	str	r2, [r3, #0]
 80a1e34:	4770      	bx	lr
 80a1e36:	bf00      	nop
 80a1e38:	2000030c 	.word	0x2000030c
 80a1e3c:	2000065c 	.word	0x2000065c

080a1e40 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1e40:	2100      	movs	r1, #0
 80a1e42:	f7ff bd2d 	b.w	80a18a0 <system_delay_ms>

080a1e46 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1e46:	b510      	push	{r4, lr}
 80a1e48:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1e4a:	f7fe fcca 	bl	80a07e2 <_ZNSt14_Function_baseD1Ev>
 80a1e4e:	4620      	mov	r0, r4
 80a1e50:	bd10      	pop	{r4, pc}
	...

080a1e54 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1e54:	4803      	ldr	r0, [pc, #12]	; (80a1e64 <_GLOBAL__sub_I_RGB+0x10>)
 80a1e56:	2300      	movs	r3, #0
 80a1e58:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1e5a:	4a03      	ldr	r2, [pc, #12]	; (80a1e68 <_GLOBAL__sub_I_RGB+0x14>)
 80a1e5c:	4903      	ldr	r1, [pc, #12]	; (80a1e6c <_GLOBAL__sub_I_RGB+0x18>)
 80a1e5e:	f000 bb55 	b.w	80a250c <__aeabi_atexit>
 80a1e62:	bf00      	nop
 80a1e64:	20000660 	.word	0x20000660
 80a1e68:	20000378 	.word	0x20000378
 80a1e6c:	080a1e47 	.word	0x080a1e47

080a1e70 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1e70:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1e72:	4b14      	ldr	r3, [pc, #80]	; (80a1ec4 <serialEventRun+0x54>)
 80a1e74:	b133      	cbz	r3, 80a1e84 <serialEventRun+0x14>
 80a1e76:	f000 f951 	bl	80a211c <_Z16_fetch_usbserialv>
 80a1e7a:	6803      	ldr	r3, [r0, #0]
 80a1e7c:	691b      	ldr	r3, [r3, #16]
 80a1e7e:	4798      	blx	r3
 80a1e80:	2800      	cmp	r0, #0
 80a1e82:	dc16      	bgt.n	80a1eb2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1e84:	4b10      	ldr	r3, [pc, #64]	; (80a1ec8 <serialEventRun+0x58>)
 80a1e86:	b133      	cbz	r3, 80a1e96 <serialEventRun+0x26>
 80a1e88:	f000 f9ee 	bl	80a2268 <_Z22__fetch_global_Serial1v>
 80a1e8c:	6803      	ldr	r3, [r0, #0]
 80a1e8e:	691b      	ldr	r3, [r3, #16]
 80a1e90:	4798      	blx	r3
 80a1e92:	2800      	cmp	r0, #0
 80a1e94:	dc10      	bgt.n	80a1eb8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1e96:	4b0d      	ldr	r3, [pc, #52]	; (80a1ecc <serialEventRun+0x5c>)
 80a1e98:	b10b      	cbz	r3, 80a1e9e <serialEventRun+0x2e>
 80a1e9a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1e9e:	4b0c      	ldr	r3, [pc, #48]	; (80a1ed0 <serialEventRun+0x60>)
 80a1ea0:	b17b      	cbz	r3, 80a1ec2 <serialEventRun+0x52>
 80a1ea2:	f000 f977 	bl	80a2194 <_Z17_fetch_usbserial1v>
 80a1ea6:	6803      	ldr	r3, [r0, #0]
 80a1ea8:	691b      	ldr	r3, [r3, #16]
 80a1eaa:	4798      	blx	r3
 80a1eac:	2800      	cmp	r0, #0
 80a1eae:	dc06      	bgt.n	80a1ebe <serialEventRun+0x4e>
 80a1eb0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1eb2:	f3af 8000 	nop.w
 80a1eb6:	e7e5      	b.n	80a1e84 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1eb8:	f3af 8000 	nop.w
 80a1ebc:	e7eb      	b.n	80a1e96 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1ebe:	f3af 8000 	nop.w
 80a1ec2:	bd08      	pop	{r3, pc}
	...

080a1ed4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1ed4:	b508      	push	{r3, lr}
	serialEventRun();
 80a1ed6:	f7ff ffcb 	bl	80a1e70 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1eda:	f7ff fbaf 	bl	80a163c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1ede:	4b01      	ldr	r3, [pc, #4]	; (80a1ee4 <_post_loop+0x10>)
 80a1ee0:	6018      	str	r0, [r3, #0]
 80a1ee2:	bd08      	pop	{r3, pc}
 80a1ee4:	20000af8 	.word	0x20000af8

080a1ee8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1ee8:	4802      	ldr	r0, [pc, #8]	; (80a1ef4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1eea:	4a03      	ldr	r2, [pc, #12]	; (80a1ef8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1eec:	4903      	ldr	r1, [pc, #12]	; (80a1efc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1eee:	1a12      	subs	r2, r2, r0
 80a1ef0:	f001 bb94 	b.w	80a361c <memcpy>
 80a1ef4:	40024000 	.word	0x40024000
 80a1ef8:	40024004 	.word	0x40024004
 80a1efc:	080a3e00 	.word	0x080a3e00

080a1f00 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1f00:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1f02:	2300      	movs	r3, #0
 80a1f04:	9300      	str	r3, [sp, #0]
 80a1f06:	461a      	mov	r2, r3
 80a1f08:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1f0c:	f7ff fce2 	bl	80a18d4 <system_ctrl_set_result>
}
 80a1f10:	b003      	add	sp, #12
 80a1f12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1f18 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1f18:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1f1a:	8843      	ldrh	r3, [r0, #2]
 80a1f1c:	2b0a      	cmp	r3, #10
 80a1f1e:	d008      	beq.n	80a1f32 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1f20:	2b50      	cmp	r3, #80	; 0x50
 80a1f22:	d109      	bne.n	80a1f38 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1f24:	4b09      	ldr	r3, [pc, #36]	; (80a1f4c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1f26:	681b      	ldr	r3, [r3, #0]
 80a1f28:	b13b      	cbz	r3, 80a1f3a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1f2a:	b003      	add	sp, #12
 80a1f2c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1f30:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1f32:	f7ff ffe5 	bl	80a1f00 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1f36:	e006      	b.n	80a1f46 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1f38:	2300      	movs	r3, #0
 80a1f3a:	9300      	str	r3, [sp, #0]
 80a1f3c:	461a      	mov	r2, r3
 80a1f3e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1f42:	f7ff fcc7 	bl	80a18d4 <system_ctrl_set_result>
        break;
    }
}
 80a1f46:	b003      	add	sp, #12
 80a1f48:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1f4c:	20000670 	.word	0x20000670

080a1f50 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1f50:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1f52:	4c10      	ldr	r4, [pc, #64]	; (80a1f94 <module_user_init_hook+0x44>)
 80a1f54:	4d10      	ldr	r5, [pc, #64]	; (80a1f98 <module_user_init_hook+0x48>)
 80a1f56:	6823      	ldr	r3, [r4, #0]
 80a1f58:	42ab      	cmp	r3, r5
 80a1f5a:	4b10      	ldr	r3, [pc, #64]	; (80a1f9c <module_user_init_hook+0x4c>)
 80a1f5c:	bf0c      	ite	eq
 80a1f5e:	2201      	moveq	r2, #1
 80a1f60:	2200      	movne	r2, #0
 80a1f62:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1f64:	d002      	beq.n	80a1f6c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1f66:	f7ff ffbf 	bl	80a1ee8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1f6a:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a1f6c:	f7ff fb5e 	bl	80a162c <HAL_RNG_GetRandomNumber>
 80a1f70:	f001 fb68 	bl	80a3644 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1f74:	4b0a      	ldr	r3, [pc, #40]	; (80a1fa0 <module_user_init_hook+0x50>)
 80a1f76:	b11b      	cbz	r3, 80a1f80 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1f78:	f7ff fb58 	bl	80a162c <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a1f7c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1f80:	2100      	movs	r1, #0
 80a1f82:	4807      	ldr	r0, [pc, #28]	; (80a1fa0 <module_user_init_hook+0x50>)
 80a1f84:	f7ff fce0 	bl	80a1948 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1f8c:	2100      	movs	r1, #0
 80a1f8e:	4805      	ldr	r0, [pc, #20]	; (80a1fa4 <module_user_init_hook+0x54>)
 80a1f90:	f7ff bc96 	b.w	80a18c0 <system_ctrl_set_app_request_handler>
 80a1f94:	40024000 	.word	0x40024000
 80a1f98:	9a271c1e 	.word	0x9a271c1e
 80a1f9c:	20000674 	.word	0x20000674
 80a1fa0:	00000000 	.word	0x00000000
 80a1fa4:	080a1f19 	.word	0x080a1f19

080a1fa8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1fa8:	b510      	push	{r4, lr}
 80a1faa:	b088      	sub	sp, #32
 80a1fac:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1fae:	4668      	mov	r0, sp
 80a1fb0:	f7ff fd79 	bl	80a1aa6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a1fb4:	4669      	mov	r1, sp
 80a1fb6:	a804      	add	r0, sp, #16
 80a1fb8:	f7ff fd97 	bl	80a1aea <_ZN6StringC1ERKS_>
 80a1fbc:	a804      	add	r0, sp, #16
 80a1fbe:	47a0      	blx	r4
 80a1fc0:	4604      	mov	r4, r0
 80a1fc2:	a804      	add	r0, sp, #16
 80a1fc4:	f7ff fd28 	bl	80a1a18 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1fc8:	4668      	mov	r0, sp
 80a1fca:	f7ff fd25 	bl	80a1a18 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a1fce:	4620      	mov	r0, r4
 80a1fd0:	b008      	add	sp, #32
 80a1fd2:	bd10      	pop	{r4, pc}

080a1fd4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a1fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1fd6:	4607      	mov	r7, r0
 80a1fd8:	460e      	mov	r6, r1
 80a1fda:	4615      	mov	r5, r2
 80a1fdc:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a1fde:	2410      	movs	r4, #16
 80a1fe0:	4622      	mov	r2, r4
 80a1fe2:	2100      	movs	r1, #0
 80a1fe4:	4668      	mov	r0, sp
 80a1fe6:	f001 fb24 	bl	80a3632 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1fea:	2200      	movs	r2, #0
 80a1fec:	4669      	mov	r1, sp
 80a1fee:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a1ff0:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a1ff4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a1ff6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1ff8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1ffa:	f7ff fc85 	bl	80a1908 <spark_function>
}
 80a1ffe:	b005      	add	sp, #20
 80a2000:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2002 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2002:	4770      	bx	lr

080a2004 <_ZN9IPAddressD0Ev>:
 80a2004:	b510      	push	{r4, lr}
 80a2006:	4604      	mov	r4, r0
 80a2008:	f7fe f849 	bl	80a009e <_ZdlPv>
 80a200c:	4620      	mov	r0, r4
 80a200e:	bd10      	pop	{r4, pc}

080a2010 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2012:	460f      	mov	r7, r1
 80a2014:	f100 0608 	add.w	r6, r0, #8
 80a2018:	1d05      	adds	r5, r0, #4
 80a201a:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a201c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2020:	220a      	movs	r2, #10
 80a2022:	4638      	mov	r0, r7
 80a2024:	f7ff fdeb 	bl	80a1bfe <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2028:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a202a:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a202c:	d007      	beq.n	80a203e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a202e:	2c00      	cmp	r4, #0
 80a2030:	d0f4      	beq.n	80a201c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2032:	212e      	movs	r1, #46	; 0x2e
 80a2034:	4638      	mov	r0, r7
 80a2036:	f7ff fd9f 	bl	80a1b78 <_ZN5Print5printEc>
 80a203a:	4404      	add	r4, r0
 80a203c:	e7ee      	b.n	80a201c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a203e:	4620      	mov	r0, r4
 80a2040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2042 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2042:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2044:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2048:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a204c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2050:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2054:	2304      	movs	r3, #4
 80a2056:	6041      	str	r1, [r0, #4]
 80a2058:	7503      	strb	r3, [r0, #20]
 80a205a:	bd10      	pop	{r4, pc}

080a205c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a205c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a205e:	4d04      	ldr	r5, [pc, #16]	; (80a2070 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2060:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2062:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2066:	9500      	str	r5, [sp, #0]
 80a2068:	f7ff ffeb 	bl	80a2042 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a206c:	b003      	add	sp, #12
 80a206e:	bd30      	pop	{r4, r5, pc}
 80a2070:	080a3b4c 	.word	0x080a3b4c

080a2074 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2074:	7441      	strb	r1, [r0, #17]
 80a2076:	4770      	bx	lr

080a2078 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a2078:	4770      	bx	lr

080a207a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a207a:	2100      	movs	r1, #0
 80a207c:	7c00      	ldrb	r0, [r0, #16]
 80a207e:	f7ff bbe7 	b.w	80a1850 <HAL_USB_USART_Receive_Data>

080a2082 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a2082:	2101      	movs	r1, #1
 80a2084:	7c00      	ldrb	r0, [r0, #16]
 80a2086:	f7ff bbe3 	b.w	80a1850 <HAL_USB_USART_Receive_Data>

080a208a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a208a:	7c00      	ldrb	r0, [r0, #16]
 80a208c:	f7ff bbd8 	b.w	80a1840 <HAL_USB_USART_Available_Data_For_Write>

080a2090 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a2090:	7c00      	ldrb	r0, [r0, #16]
 80a2092:	f7ff bbcd 	b.w	80a1830 <HAL_USB_USART_Available_Data>

080a2096 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a2096:	b538      	push	{r3, r4, r5, lr}
 80a2098:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a209a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a209c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a209e:	f7ff fbcf 	bl	80a1840 <HAL_USB_USART_Available_Data_For_Write>
 80a20a2:	2800      	cmp	r0, #0
 80a20a4:	dc01      	bgt.n	80a20aa <_ZN9USBSerial5writeEh+0x14>
 80a20a6:	7c60      	ldrb	r0, [r4, #17]
 80a20a8:	b120      	cbz	r0, 80a20b4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a20aa:	4629      	mov	r1, r5
 80a20ac:	7c20      	ldrb	r0, [r4, #16]
 80a20ae:	f7ff fbd7 	bl	80a1860 <HAL_USB_USART_Send_Data>
    return 1;
 80a20b2:	2001      	movs	r0, #1
  }
  return 0;
}
 80a20b4:	bd38      	pop	{r3, r4, r5, pc}

080a20b6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a20b6:	7c00      	ldrb	r0, [r0, #16]
 80a20b8:	f7ff bbda 	b.w	80a1870 <HAL_USB_USART_Flush_Data>

080a20bc <_ZN9USBSerialD0Ev>:
 80a20bc:	b510      	push	{r4, lr}
 80a20be:	4604      	mov	r4, r0
 80a20c0:	f7fd ffed 	bl	80a009e <_ZdlPv>
 80a20c4:	4620      	mov	r0, r4
 80a20c6:	bd10      	pop	{r4, pc}

080a20c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a20c8:	b510      	push	{r4, lr}
 80a20ca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a20cc:	2300      	movs	r3, #0
 80a20ce:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a20d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a20d4:	60a3      	str	r3, [r4, #8]
 80a20d6:	4b05      	ldr	r3, [pc, #20]	; (80a20ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a20d8:	4608      	mov	r0, r1
 80a20da:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a20dc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a20de:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a20e0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a20e2:	4611      	mov	r1, r2
 80a20e4:	f7ff fb9c 	bl	80a1820 <HAL_USB_USART_Init>
}
 80a20e8:	4620      	mov	r0, r4
 80a20ea:	bd10      	pop	{r4, pc}
 80a20ec:	080a3b60 	.word	0x080a3b60

080a20f0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a20f0:	b510      	push	{r4, lr}
 80a20f2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a20f4:	2214      	movs	r2, #20
 80a20f6:	2100      	movs	r1, #0
 80a20f8:	f001 fa9b 	bl	80a3632 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a20fc:	4b05      	ldr	r3, [pc, #20]	; (80a2114 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a20fe:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2100:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2102:	4b05      	ldr	r3, [pc, #20]	; (80a2118 <_Z19acquireSerialBufferv+0x28>)
 80a2104:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2106:	f240 1301 	movw	r3, #257	; 0x101
 80a210a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a210c:	2381      	movs	r3, #129	; 0x81
 80a210e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2110:	bd10      	pop	{r4, pc}
 80a2112:	bf00      	nop
 80a2114:	200006fd 	.word	0x200006fd
 80a2118:	2000067c 	.word	0x2000067c

080a211c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a211c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a211e:	4d0e      	ldr	r5, [pc, #56]	; (80a2158 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2120:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2122:	a801      	add	r0, sp, #4
 80a2124:	f7ff ffe4 	bl	80a20f0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2128:	6829      	ldr	r1, [r5, #0]
 80a212a:	f011 0401 	ands.w	r4, r1, #1
 80a212e:	d110      	bne.n	80a2152 <_Z16_fetch_usbserialv+0x36>
 80a2130:	4628      	mov	r0, r5
 80a2132:	f7fd ffb6 	bl	80a00a2 <__cxa_guard_acquire>
 80a2136:	b160      	cbz	r0, 80a2152 <_Z16_fetch_usbserialv+0x36>
 80a2138:	aa01      	add	r2, sp, #4
 80a213a:	4621      	mov	r1, r4
 80a213c:	4807      	ldr	r0, [pc, #28]	; (80a215c <_Z16_fetch_usbserialv+0x40>)
 80a213e:	f7ff ffc3 	bl	80a20c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2142:	4628      	mov	r0, r5
 80a2144:	f7fd ffb2 	bl	80a00ac <__cxa_guard_release>
 80a2148:	4a05      	ldr	r2, [pc, #20]	; (80a2160 <_Z16_fetch_usbserialv+0x44>)
 80a214a:	4906      	ldr	r1, [pc, #24]	; (80a2164 <_Z16_fetch_usbserialv+0x48>)
 80a214c:	4803      	ldr	r0, [pc, #12]	; (80a215c <_Z16_fetch_usbserialv+0x40>)
 80a214e:	f000 f9dd 	bl	80a250c <__aeabi_atexit>
	return _usbserial;
}
 80a2152:	4802      	ldr	r0, [pc, #8]	; (80a215c <_Z16_fetch_usbserialv+0x40>)
 80a2154:	b007      	add	sp, #28
 80a2156:	bd30      	pop	{r4, r5, pc}
 80a2158:	20000678 	.word	0x20000678
 80a215c:	20000800 	.word	0x20000800
 80a2160:	20000378 	.word	0x20000378
 80a2164:	080a2079 	.word	0x080a2079

080a2168 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2168:	b510      	push	{r4, lr}
 80a216a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a216c:	2214      	movs	r2, #20
 80a216e:	2100      	movs	r1, #0
 80a2170:	f001 fa5f 	bl	80a3632 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2174:	4b05      	ldr	r3, [pc, #20]	; (80a218c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2176:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2178:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a217a:	4b05      	ldr	r3, [pc, #20]	; (80a2190 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a217c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a217e:	f240 1301 	movw	r3, #257	; 0x101
 80a2182:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2184:	2381      	movs	r3, #129	; 0x81
 80a2186:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2188:	bd10      	pop	{r4, pc}
 80a218a:	bf00      	nop
 80a218c:	200008b0 	.word	0x200008b0
 80a2190:	20000818 	.word	0x20000818

080a2194 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2194:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2196:	4c0e      	ldr	r4, [pc, #56]	; (80a21d0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2198:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a219a:	a801      	add	r0, sp, #4
 80a219c:	f7ff ffe4 	bl	80a2168 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a21a0:	6823      	ldr	r3, [r4, #0]
 80a21a2:	07db      	lsls	r3, r3, #31
 80a21a4:	d410      	bmi.n	80a21c8 <_Z17_fetch_usbserial1v+0x34>
 80a21a6:	4620      	mov	r0, r4
 80a21a8:	f7fd ff7b 	bl	80a00a2 <__cxa_guard_acquire>
 80a21ac:	b160      	cbz	r0, 80a21c8 <_Z17_fetch_usbserial1v+0x34>
 80a21ae:	aa01      	add	r2, sp, #4
 80a21b0:	2101      	movs	r1, #1
 80a21b2:	4808      	ldr	r0, [pc, #32]	; (80a21d4 <_Z17_fetch_usbserial1v+0x40>)
 80a21b4:	f7ff ff88 	bl	80a20c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a21b8:	4620      	mov	r0, r4
 80a21ba:	f7fd ff77 	bl	80a00ac <__cxa_guard_release>
 80a21be:	4a06      	ldr	r2, [pc, #24]	; (80a21d8 <_Z17_fetch_usbserial1v+0x44>)
 80a21c0:	4906      	ldr	r1, [pc, #24]	; (80a21dc <_Z17_fetch_usbserial1v+0x48>)
 80a21c2:	4804      	ldr	r0, [pc, #16]	; (80a21d4 <_Z17_fetch_usbserial1v+0x40>)
 80a21c4:	f000 f9a2 	bl	80a250c <__aeabi_atexit>
  return _usbserial1;
}
 80a21c8:	4802      	ldr	r0, [pc, #8]	; (80a21d4 <_Z17_fetch_usbserial1v+0x40>)
 80a21ca:	b006      	add	sp, #24
 80a21cc:	bd10      	pop	{r4, pc}
 80a21ce:	bf00      	nop
 80a21d0:	20000814 	.word	0x20000814
 80a21d4:	2000089c 	.word	0x2000089c
 80a21d8:	20000378 	.word	0x20000378
 80a21dc:	080a2079 	.word	0x080a2079

080a21e0 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a21e0:	7441      	strb	r1, [r0, #17]
 80a21e2:	4770      	bx	lr

080a21e4 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a21e4:	7c00      	ldrb	r0, [r0, #16]
 80a21e6:	f7ff bab9 	b.w	80a175c <HAL_USART_Available_Data_For_Write>

080a21ea <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a21ea:	7c00      	ldrb	r0, [r0, #16]
 80a21ec:	f7ff ba8e 	b.w	80a170c <HAL_USART_Available_Data>

080a21f0 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a21f0:	7c00      	ldrb	r0, [r0, #16]
 80a21f2:	f7ff ba9b 	b.w	80a172c <HAL_USART_Peek_Data>

080a21f6 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a21f6:	7c00      	ldrb	r0, [r0, #16]
 80a21f8:	f7ff ba90 	b.w	80a171c <HAL_USART_Read_Data>

080a21fc <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a21fc:	7c00      	ldrb	r0, [r0, #16]
 80a21fe:	f7ff ba9d 	b.w	80a173c <HAL_USART_Flush_Data>

080a2202 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2202:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2204:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2206:	4604      	mov	r4, r0
 80a2208:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a220a:	b925      	cbnz	r5, 80a2216 <_ZN11USARTSerial5writeEh+0x14>
 80a220c:	7c00      	ldrb	r0, [r0, #16]
 80a220e:	f7ff faa5 	bl	80a175c <HAL_USART_Available_Data_For_Write>
 80a2212:	2800      	cmp	r0, #0
 80a2214:	dd05      	ble.n	80a2222 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2216:	4631      	mov	r1, r6
 80a2218:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a221a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a221e:	f7ff ba6d 	b.w	80a16fc <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2222:	4628      	mov	r0, r5
 80a2224:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2228 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2228:	b510      	push	{r4, lr}
 80a222a:	4604      	mov	r4, r0
 80a222c:	4608      	mov	r0, r1
 80a222e:	4611      	mov	r1, r2
 80a2230:	2200      	movs	r2, #0
 80a2232:	6062      	str	r2, [r4, #4]
 80a2234:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2238:	60a2      	str	r2, [r4, #8]
 80a223a:	4a05      	ldr	r2, [pc, #20]	; (80a2250 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a223c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a223e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2240:	2201      	movs	r2, #1
 80a2242:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2244:	461a      	mov	r2, r3
 80a2246:	f7ff fa51 	bl	80a16ec <HAL_USART_Init>
}
 80a224a:	4620      	mov	r0, r4
 80a224c:	bd10      	pop	{r4, pc}
 80a224e:	bf00      	nop
 80a2250:	080a3b90 	.word	0x080a3b90

080a2254 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a2254:	2300      	movs	r3, #0
 80a2256:	7c00      	ldrb	r0, [r0, #16]
 80a2258:	f7ff ba88 	b.w	80a176c <HAL_USART_BeginConfig>

080a225c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a225c:	2200      	movs	r2, #0
 80a225e:	f7ff bff9 	b.w	80a2254 <_ZN11USARTSerial5beginEmm>

080a2262 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2262:	7c00      	ldrb	r0, [r0, #16]
 80a2264:	f7ff ba72 	b.w	80a174c <HAL_USART_Is_Enabled>

080a2268 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2268:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a226a:	4d0c      	ldr	r5, [pc, #48]	; (80a229c <_Z22__fetch_global_Serial1v+0x34>)
 80a226c:	6829      	ldr	r1, [r5, #0]
 80a226e:	f011 0401 	ands.w	r4, r1, #1
 80a2272:	d111      	bne.n	80a2298 <_Z22__fetch_global_Serial1v+0x30>
 80a2274:	4628      	mov	r0, r5
 80a2276:	f7fd ff14 	bl	80a00a2 <__cxa_guard_acquire>
 80a227a:	b168      	cbz	r0, 80a2298 <_Z22__fetch_global_Serial1v+0x30>
 80a227c:	4a08      	ldr	r2, [pc, #32]	; (80a22a0 <_Z22__fetch_global_Serial1v+0x38>)
 80a227e:	4621      	mov	r1, r4
 80a2280:	4b08      	ldr	r3, [pc, #32]	; (80a22a4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2282:	4809      	ldr	r0, [pc, #36]	; (80a22a8 <_Z22__fetch_global_Serial1v+0x40>)
 80a2284:	f7ff ffd0 	bl	80a2228 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2288:	4628      	mov	r0, r5
 80a228a:	f7fd ff0f 	bl	80a00ac <__cxa_guard_release>
 80a228e:	4a07      	ldr	r2, [pc, #28]	; (80a22ac <_Z22__fetch_global_Serial1v+0x44>)
 80a2290:	4907      	ldr	r1, [pc, #28]	; (80a22b0 <_Z22__fetch_global_Serial1v+0x48>)
 80a2292:	4805      	ldr	r0, [pc, #20]	; (80a22a8 <_Z22__fetch_global_Serial1v+0x40>)
 80a2294:	f000 f93a 	bl	80a250c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2298:	4803      	ldr	r0, [pc, #12]	; (80a22a8 <_Z22__fetch_global_Serial1v+0x40>)
 80a229a:	bd38      	pop	{r3, r4, r5, pc}
 80a229c:	20000a4c 	.word	0x20000a4c
 80a22a0:	20000a50 	.word	0x20000a50
 80a22a4:	200009c8 	.word	0x200009c8
 80a22a8:	200009b4 	.word	0x200009b4
 80a22ac:	20000378 	.word	0x20000378
 80a22b0:	080a1015 	.word	0x080a1015

080a22b4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a22b4:	4770      	bx	lr

080a22b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a22b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a22b8:	4606      	mov	r6, r0
 80a22ba:	4615      	mov	r5, r2
 80a22bc:	460c      	mov	r4, r1
 80a22be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a22c0:	42bc      	cmp	r4, r7
 80a22c2:	d006      	beq.n	80a22d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a22c4:	6833      	ldr	r3, [r6, #0]
 80a22c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a22ca:	689b      	ldr	r3, [r3, #8]
 80a22cc:	4630      	mov	r0, r6
 80a22ce:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a22d0:	e7f6      	b.n	80a22c0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a22d2:	4628      	mov	r0, r5
 80a22d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a22d6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a22d6:	2200      	movs	r2, #0
 80a22d8:	7c00      	ldrb	r0, [r0, #16]
 80a22da:	f7ff ba4f 	b.w	80a177c <HAL_I2C_Write_Data>

080a22de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a22de:	2100      	movs	r1, #0
 80a22e0:	7c00      	ldrb	r0, [r0, #16]
 80a22e2:	f7ff ba53 	b.w	80a178c <HAL_I2C_Available_Data>

080a22e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a22e6:	2100      	movs	r1, #0
 80a22e8:	7c00      	ldrb	r0, [r0, #16]
 80a22ea:	f7ff ba57 	b.w	80a179c <HAL_I2C_Read_Data>

080a22ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a22ee:	2100      	movs	r1, #0
 80a22f0:	7c00      	ldrb	r0, [r0, #16]
 80a22f2:	f7ff ba5b 	b.w	80a17ac <HAL_I2C_Peek_Data>

080a22f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a22f6:	2100      	movs	r1, #0
 80a22f8:	7c00      	ldrb	r0, [r0, #16]
 80a22fa:	f7ff ba5f 	b.w	80a17bc <HAL_I2C_Flush_Data>

080a22fe <_ZN7TwoWireD0Ev>:
 80a22fe:	b510      	push	{r4, lr}
 80a2300:	4604      	mov	r4, r0
 80a2302:	f7fd fecc 	bl	80a009e <_ZdlPv>
 80a2306:	4620      	mov	r0, r4
 80a2308:	bd10      	pop	{r4, pc}
	...

080a230c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a230c:	b510      	push	{r4, lr}
 80a230e:	4604      	mov	r4, r0
 80a2310:	4608      	mov	r0, r1
 80a2312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2316:	60a3      	str	r3, [r4, #8]
 80a2318:	4b04      	ldr	r3, [pc, #16]	; (80a232c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a231a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a231c:	7420      	strb	r0, [r4, #16]
 80a231e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2320:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a2322:	f7ff fa5b 	bl	80a17dc <HAL_I2C_Init>

}
 80a2326:	4620      	mov	r0, r4
 80a2328:	bd10      	pop	{r4, pc}
 80a232a:	bf00      	nop
 80a232c:	080a3bc0 	.word	0x080a3bc0

080a2330 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2330:	2100      	movs	r1, #0
 80a2332:	7c00      	ldrb	r0, [r0, #16]
 80a2334:	f7ff ba4a 	b.w	80a17cc <HAL_I2C_Is_Enabled>

080a2338 <_ZN10CANChannelC1E15HAL_CAN_Channeltt>:
#include "spark_wiring_can.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

CANChannel::CANChannel(HAL_CAN_Channel channel,
 80a2338:	b510      	push	{r4, lr}
 80a233a:	4604      	mov	r4, r0
 80a233c:	4608      	mov	r0, r1
 80a233e:	4611      	mov	r1, r2
        uint16_t rxQueueSize, uint16_t txQueueSize)
{
    _channel = channel;
 80a2340:	7020      	strb	r0, [r4, #0]
#include "spark_wiring_can.h"
#include "spark_wiring_constants.h"

// Constructors ////////////////////////////////////////////////////////////////

CANChannel::CANChannel(HAL_CAN_Channel channel,
 80a2342:	461a      	mov	r2, r3
        uint16_t rxQueueSize, uint16_t txQueueSize)
{
    _channel = channel;
    HAL_CAN_Init(_channel, rxQueueSize, txQueueSize, NULL);
 80a2344:	2300      	movs	r3, #0
 80a2346:	f7ff fa53 	bl	80a17f0 <HAL_CAN_Init>
}
 80a234a:	4620      	mov	r0, r4
 80a234c:	bd10      	pop	{r4, pc}

080a234e <_ZN10CANChannel5beginEmm>:
// Public Methods //////////////////////////////////////////////////////////////

void CANChannel::begin(unsigned long baud, uint32_t flags)
{
    HAL_CAN_Begin(_channel, baud, flags, NULL);
 80a234e:	2300      	movs	r3, #0
 80a2350:	7800      	ldrb	r0, [r0, #0]
 80a2352:	f7ff ba55 	b.w	80a1800 <HAL_CAN_Begin>

080a2356 <_ZN10CANChannel7receiveER10CANMessage>:
    return HAL_CAN_Available_Messages(_channel, NULL);
}

bool CANChannel::receive(CANMessage &message)
{
    return HAL_CAN_Receive(_channel, &message, NULL);
 80a2356:	2200      	movs	r2, #0
 80a2358:	7800      	ldrb	r0, [r0, #0]
 80a235a:	f7ff ba59 	b.w	80a1810 <HAL_CAN_Receive>

080a235e <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a235e:	4770      	bx	lr

080a2360 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2360:	2200      	movs	r2, #0
 80a2362:	4611      	mov	r1, r2
 80a2364:	4610      	mov	r0, r2
 80a2366:	f7ff babf 	b.w	80a18e8 <network_ready>
	...

080a236c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a236c:	4803      	ldr	r0, [pc, #12]	; (80a237c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a236e:	4b04      	ldr	r3, [pc, #16]	; (80a2380 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a2370:	4a04      	ldr	r2, [pc, #16]	; (80a2384 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a2372:	4905      	ldr	r1, [pc, #20]	; (80a2388 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a2374:	6003      	str	r3, [r0, #0]
 80a2376:	f000 b8c9 	b.w	80a250c <__aeabi_atexit>
 80a237a:	bf00      	nop
 80a237c:	20000ad4 	.word	0x20000ad4
 80a2380:	080a3be8 	.word	0x080a3be8
 80a2384:	20000378 	.word	0x20000378
 80a2388:	080a235f 	.word	0x080a235f

080a238c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a238c:	b510      	push	{r4, lr}
 80a238e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2390:	480f      	ldr	r0, [pc, #60]	; (80a23d0 <pinAvailable+0x44>)
 80a2392:	f7ff fb1d 	bl	80a19d0 <_ZN8SPIClass9isEnabledEv>
 80a2396:	b128      	cbz	r0, 80a23a4 <pinAvailable+0x18>
 80a2398:	f1a4 030d 	sub.w	r3, r4, #13
 80a239c:	2b02      	cmp	r3, #2
 80a239e:	d801      	bhi.n	80a23a4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a23a0:	2000      	movs	r0, #0
 80a23a2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a23a4:	f000 f892 	bl	80a24cc <_Z19__fetch_global_Wirev>
 80a23a8:	f7ff ffc2 	bl	80a2330 <_ZN7TwoWire9isEnabledEv>
 80a23ac:	b108      	cbz	r0, 80a23b2 <pinAvailable+0x26>
 80a23ae:	2c01      	cmp	r4, #1
 80a23b0:	d9f6      	bls.n	80a23a0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a23b2:	f7ff ff59 	bl	80a2268 <_Z22__fetch_global_Serial1v>
 80a23b6:	f7ff ff54 	bl	80a2262 <_ZN11USARTSerial9isEnabledEv>
 80a23ba:	b118      	cbz	r0, 80a23c4 <pinAvailable+0x38>
 80a23bc:	f1a4 0312 	sub.w	r3, r4, #18
 80a23c0:	2b01      	cmp	r3, #1
 80a23c2:	d9ed      	bls.n	80a23a0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a23c4:	2c17      	cmp	r4, #23
 80a23c6:	bf8c      	ite	hi
 80a23c8:	2000      	movhi	r0, #0
 80a23ca:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a23cc:	bd10      	pop	{r4, pc}
 80a23ce:	bf00      	nop
 80a23d0:	20000ad8 	.word	0x20000ad8

080a23d4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a23d4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a23d6:	b538      	push	{r3, r4, r5, lr}
 80a23d8:	4604      	mov	r4, r0
 80a23da:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a23dc:	d80a      	bhi.n	80a23f4 <pinMode+0x20>
 80a23de:	29ff      	cmp	r1, #255	; 0xff
 80a23e0:	d008      	beq.n	80a23f4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a23e2:	f7ff ffd3 	bl	80a238c <pinAvailable>
 80a23e6:	b128      	cbz	r0, 80a23f4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a23e8:	4629      	mov	r1, r5
 80a23ea:	4620      	mov	r0, r4
}
 80a23ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a23f0:	f7ff b8ec 	b.w	80a15cc <HAL_Pin_Mode>
 80a23f4:	bd38      	pop	{r3, r4, r5, pc}

080a23f6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a23f6:	b538      	push	{r3, r4, r5, lr}
 80a23f8:	4604      	mov	r4, r0
 80a23fa:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a23fc:	f7ff f8ee 	bl	80a15dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2400:	28ff      	cmp	r0, #255	; 0xff
 80a2402:	d010      	beq.n	80a2426 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2404:	2806      	cmp	r0, #6
 80a2406:	d804      	bhi.n	80a2412 <digitalWrite+0x1c>
 80a2408:	234d      	movs	r3, #77	; 0x4d
 80a240a:	fa23 f000 	lsr.w	r0, r3, r0
 80a240e:	07c3      	lsls	r3, r0, #31
 80a2410:	d409      	bmi.n	80a2426 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2412:	4620      	mov	r0, r4
 80a2414:	f7ff ffba 	bl	80a238c <pinAvailable>
 80a2418:	b128      	cbz	r0, 80a2426 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a241a:	4629      	mov	r1, r5
 80a241c:	4620      	mov	r0, r4
}
 80a241e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2422:	f7ff b8e3 	b.w	80a15ec <HAL_GPIO_Write>
 80a2426:	bd38      	pop	{r3, r4, r5, pc}

080a2428 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2428:	b510      	push	{r4, lr}
 80a242a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a242c:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a242e:	bf9c      	itt	ls
 80a2430:	340a      	addls	r4, #10
 80a2432:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2434:	4620      	mov	r0, r4
 80a2436:	f7ff ffa9 	bl	80a238c <pinAvailable>
 80a243a:	b150      	cbz	r0, 80a2452 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a243c:	2103      	movs	r1, #3
 80a243e:	4620      	mov	r0, r4
 80a2440:	f7ff f8bc 	bl	80a15bc <HAL_Validate_Pin_Function>
 80a2444:	2803      	cmp	r0, #3
 80a2446:	d104      	bne.n	80a2452 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2448:	4620      	mov	r0, r4
}
 80a244a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a244e:	f7ff b8d5 	b.w	80a15fc <HAL_ADC_Read>
}
 80a2452:	2000      	movs	r0, #0
 80a2454:	bd10      	pop	{r4, pc}
	...

080a2458 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2458:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a245a:	4c0c      	ldr	r4, [pc, #48]	; (80a248c <_GLOBAL__sub_I_SPI+0x34>)
 80a245c:	4e0c      	ldr	r6, [pc, #48]	; (80a2490 <_GLOBAL__sub_I_SPI+0x38>)
 80a245e:	4d0d      	ldr	r5, [pc, #52]	; (80a2494 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2460:	2100      	movs	r1, #0
 80a2462:	4620      	mov	r0, r4
 80a2464:	f7ff faa0 	bl	80a19a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2468:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a246a:	4c0b      	ldr	r4, [pc, #44]	; (80a2498 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a246c:	4632      	mov	r2, r6
 80a246e:	4629      	mov	r1, r5
 80a2470:	f000 f84c 	bl	80a250c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2474:	2101      	movs	r1, #1
 80a2476:	4620      	mov	r0, r4
 80a2478:	f7ff fa96 	bl	80a19a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a247c:	4632      	mov	r2, r6
 80a247e:	4629      	mov	r1, r5
 80a2480:	4620      	mov	r0, r4
 80a2482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2486:	f000 b841 	b.w	80a250c <__aeabi_atexit>
 80a248a:	bf00      	nop
 80a248c:	20000ad8 	.word	0x20000ad8
 80a2490:	20000378 	.word	0x20000378
 80a2494:	080a1999 	.word	0x080a1999
 80a2498:	20000ae8 	.word	0x20000ae8

080a249c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a249c:	b513      	push	{r0, r1, r4, lr}
 80a249e:	4c08      	ldr	r4, [pc, #32]	; (80a24c0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a24a0:	2300      	movs	r3, #0
 80a24a2:	461a      	mov	r2, r3
 80a24a4:	4619      	mov	r1, r3
 80a24a6:	9300      	str	r3, [sp, #0]
 80a24a8:	4620      	mov	r0, r4
 80a24aa:	f7ff fdd7 	bl	80a205c <_ZN9IPAddressC1Ehhhh>
 80a24ae:	4620      	mov	r0, r4
 80a24b0:	4a04      	ldr	r2, [pc, #16]	; (80a24c4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a24b2:	4905      	ldr	r1, [pc, #20]	; (80a24c8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a24b4:	b002      	add	sp, #8
 80a24b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a24ba:	f000 b827 	b.w	80a250c <__aeabi_atexit>
 80a24be:	bf00      	nop
 80a24c0:	20000afc 	.word	0x20000afc
 80a24c4:	20000378 	.word	0x20000378
 80a24c8:	080a2003 	.word	0x080a2003

080a24cc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a24cc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a24ce:	4d0b      	ldr	r5, [pc, #44]	; (80a24fc <_Z19__fetch_global_Wirev+0x30>)
 80a24d0:	6829      	ldr	r1, [r5, #0]
 80a24d2:	f011 0401 	ands.w	r4, r1, #1
 80a24d6:	d10f      	bne.n	80a24f8 <_Z19__fetch_global_Wirev+0x2c>
 80a24d8:	4628      	mov	r0, r5
 80a24da:	f7fd fde2 	bl	80a00a2 <__cxa_guard_acquire>
 80a24de:	b158      	cbz	r0, 80a24f8 <_Z19__fetch_global_Wirev+0x2c>
 80a24e0:	4621      	mov	r1, r4
 80a24e2:	4807      	ldr	r0, [pc, #28]	; (80a2500 <_Z19__fetch_global_Wirev+0x34>)
 80a24e4:	f7ff ff12 	bl	80a230c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a24e8:	4628      	mov	r0, r5
 80a24ea:	f7fd fddf 	bl	80a00ac <__cxa_guard_release>
 80a24ee:	4a05      	ldr	r2, [pc, #20]	; (80a2504 <_Z19__fetch_global_Wirev+0x38>)
 80a24f0:	4905      	ldr	r1, [pc, #20]	; (80a2508 <_Z19__fetch_global_Wirev+0x3c>)
 80a24f2:	4803      	ldr	r0, [pc, #12]	; (80a2500 <_Z19__fetch_global_Wirev+0x34>)
 80a24f4:	f000 f80a 	bl	80a250c <__aeabi_atexit>
	return wire;
}
 80a24f8:	4801      	ldr	r0, [pc, #4]	; (80a2500 <_Z19__fetch_global_Wirev+0x34>)
 80a24fa:	bd38      	pop	{r3, r4, r5, pc}
 80a24fc:	20000b14 	.word	0x20000b14
 80a2500:	20000b18 	.word	0x20000b18
 80a2504:	20000378 	.word	0x20000378
 80a2508:	080a22b5 	.word	0x080a22b5

080a250c <__aeabi_atexit>:
 80a250c:	460b      	mov	r3, r1
 80a250e:	4601      	mov	r1, r0
 80a2510:	4618      	mov	r0, r3
 80a2512:	f001 b875 	b.w	80a3600 <__cxa_atexit>
	...

080a2518 <_ZSt15get_new_handlerv>:
 80a2518:	4b02      	ldr	r3, [pc, #8]	; (80a2524 <_ZSt15get_new_handlerv+0xc>)
 80a251a:	6818      	ldr	r0, [r3, #0]
 80a251c:	f3bf 8f5f 	dmb	sy
 80a2520:	4770      	bx	lr
 80a2522:	bf00      	nop
 80a2524:	20000b2c 	.word	0x20000b2c

080a2528 <_ZnwjRKSt9nothrow_t>:
 80a2528:	b510      	push	{r4, lr}
 80a252a:	2800      	cmp	r0, #0
 80a252c:	bf14      	ite	ne
 80a252e:	4604      	movne	r4, r0
 80a2530:	2401      	moveq	r4, #1
 80a2532:	4620      	mov	r0, r4
 80a2534:	f7ff fa10 	bl	80a1958 <malloc>
 80a2538:	b920      	cbnz	r0, 80a2544 <_ZnwjRKSt9nothrow_t+0x1c>
 80a253a:	f7ff ffed 	bl	80a2518 <_ZSt15get_new_handlerv>
 80a253e:	b108      	cbz	r0, 80a2544 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2540:	4780      	blx	r0
 80a2542:	e7f6      	b.n	80a2532 <_ZnwjRKSt9nothrow_t+0xa>
 80a2544:	bd10      	pop	{r4, pc}

080a2546 <_ZSt25__throw_bad_function_callv>:
 80a2546:	b508      	push	{r3, lr}
 80a2548:	f7ff fa1e 	bl	80a1988 <abort>

080a254c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a254c:	4b18      	ldr	r3, [pc, #96]	; (80a25b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a254e:	681a      	ldr	r2, [r3, #0]
 80a2550:	07d1      	lsls	r1, r2, #31
 80a2552:	bf5c      	itt	pl
 80a2554:	2201      	movpl	r2, #1
 80a2556:	601a      	strpl	r2, [r3, #0]
 80a2558:	4b16      	ldr	r3, [pc, #88]	; (80a25b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a255a:	681a      	ldr	r2, [r3, #0]
 80a255c:	07d2      	lsls	r2, r2, #31
 80a255e:	bf5c      	itt	pl
 80a2560:	2201      	movpl	r2, #1
 80a2562:	601a      	strpl	r2, [r3, #0]
 80a2564:	4b14      	ldr	r3, [pc, #80]	; (80a25b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2566:	681a      	ldr	r2, [r3, #0]
 80a2568:	07d0      	lsls	r0, r2, #31
 80a256a:	bf5c      	itt	pl
 80a256c:	2201      	movpl	r2, #1
 80a256e:	601a      	strpl	r2, [r3, #0]
 80a2570:	4b12      	ldr	r3, [pc, #72]	; (80a25bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2572:	681a      	ldr	r2, [r3, #0]
 80a2574:	07d1      	lsls	r1, r2, #31
 80a2576:	bf5c      	itt	pl
 80a2578:	2201      	movpl	r2, #1
 80a257a:	601a      	strpl	r2, [r3, #0]
 80a257c:	4b10      	ldr	r3, [pc, #64]	; (80a25c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a257e:	681a      	ldr	r2, [r3, #0]
 80a2580:	07d2      	lsls	r2, r2, #31
 80a2582:	bf5c      	itt	pl
 80a2584:	2201      	movpl	r2, #1
 80a2586:	601a      	strpl	r2, [r3, #0]
 80a2588:	4b0e      	ldr	r3, [pc, #56]	; (80a25c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a258a:	681a      	ldr	r2, [r3, #0]
 80a258c:	07d0      	lsls	r0, r2, #31
 80a258e:	bf5c      	itt	pl
 80a2590:	2201      	movpl	r2, #1
 80a2592:	601a      	strpl	r2, [r3, #0]
 80a2594:	4b0c      	ldr	r3, [pc, #48]	; (80a25c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2596:	681a      	ldr	r2, [r3, #0]
 80a2598:	07d1      	lsls	r1, r2, #31
 80a259a:	bf5c      	itt	pl
 80a259c:	2201      	movpl	r2, #1
 80a259e:	601a      	strpl	r2, [r3, #0]
 80a25a0:	4b0a      	ldr	r3, [pc, #40]	; (80a25cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a25a2:	681a      	ldr	r2, [r3, #0]
 80a25a4:	07d2      	lsls	r2, r2, #31
 80a25a6:	bf5c      	itt	pl
 80a25a8:	2201      	movpl	r2, #1
 80a25aa:	601a      	strpl	r2, [r3, #0]
 80a25ac:	4770      	bx	lr
 80a25ae:	bf00      	nop
 80a25b0:	20000b4c 	.word	0x20000b4c
 80a25b4:	20000b48 	.word	0x20000b48
 80a25b8:	20000b44 	.word	0x20000b44
 80a25bc:	20000b40 	.word	0x20000b40
 80a25c0:	20000b3c 	.word	0x20000b3c
 80a25c4:	20000b38 	.word	0x20000b38
 80a25c8:	20000b34 	.word	0x20000b34
 80a25cc:	20000b30 	.word	0x20000b30

080a25d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a25d0:	4b24      	ldr	r3, [pc, #144]	; (80a2664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a25d2:	681a      	ldr	r2, [r3, #0]
 80a25d4:	07d0      	lsls	r0, r2, #31
 80a25d6:	bf5c      	itt	pl
 80a25d8:	2201      	movpl	r2, #1
 80a25da:	601a      	strpl	r2, [r3, #0]
 80a25dc:	4b22      	ldr	r3, [pc, #136]	; (80a2668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a25de:	681a      	ldr	r2, [r3, #0]
 80a25e0:	07d1      	lsls	r1, r2, #31
 80a25e2:	bf5c      	itt	pl
 80a25e4:	2201      	movpl	r2, #1
 80a25e6:	601a      	strpl	r2, [r3, #0]
 80a25e8:	4b20      	ldr	r3, [pc, #128]	; (80a266c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a25ea:	681a      	ldr	r2, [r3, #0]
 80a25ec:	07d2      	lsls	r2, r2, #31
 80a25ee:	bf5c      	itt	pl
 80a25f0:	2201      	movpl	r2, #1
 80a25f2:	601a      	strpl	r2, [r3, #0]
 80a25f4:	4b1e      	ldr	r3, [pc, #120]	; (80a2670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a25f6:	681a      	ldr	r2, [r3, #0]
 80a25f8:	07d0      	lsls	r0, r2, #31
 80a25fa:	bf5c      	itt	pl
 80a25fc:	2201      	movpl	r2, #1
 80a25fe:	601a      	strpl	r2, [r3, #0]
 80a2600:	4b1c      	ldr	r3, [pc, #112]	; (80a2674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2602:	681a      	ldr	r2, [r3, #0]
 80a2604:	07d1      	lsls	r1, r2, #31
 80a2606:	bf5c      	itt	pl
 80a2608:	2201      	movpl	r2, #1
 80a260a:	601a      	strpl	r2, [r3, #0]
 80a260c:	4b1a      	ldr	r3, [pc, #104]	; (80a2678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a260e:	681a      	ldr	r2, [r3, #0]
 80a2610:	07d2      	lsls	r2, r2, #31
 80a2612:	bf5c      	itt	pl
 80a2614:	2201      	movpl	r2, #1
 80a2616:	601a      	strpl	r2, [r3, #0]
 80a2618:	4b18      	ldr	r3, [pc, #96]	; (80a267c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a261a:	681a      	ldr	r2, [r3, #0]
 80a261c:	07d0      	lsls	r0, r2, #31
 80a261e:	bf5c      	itt	pl
 80a2620:	2201      	movpl	r2, #1
 80a2622:	601a      	strpl	r2, [r3, #0]
 80a2624:	4b16      	ldr	r3, [pc, #88]	; (80a2680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2626:	681a      	ldr	r2, [r3, #0]
 80a2628:	07d1      	lsls	r1, r2, #31
 80a262a:	bf5c      	itt	pl
 80a262c:	2201      	movpl	r2, #1
 80a262e:	601a      	strpl	r2, [r3, #0]
 80a2630:	4b14      	ldr	r3, [pc, #80]	; (80a2684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2632:	681a      	ldr	r2, [r3, #0]
 80a2634:	07d2      	lsls	r2, r2, #31
 80a2636:	bf5c      	itt	pl
 80a2638:	2201      	movpl	r2, #1
 80a263a:	601a      	strpl	r2, [r3, #0]
 80a263c:	4b12      	ldr	r3, [pc, #72]	; (80a2688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a263e:	681a      	ldr	r2, [r3, #0]
 80a2640:	07d0      	lsls	r0, r2, #31
 80a2642:	bf5c      	itt	pl
 80a2644:	2201      	movpl	r2, #1
 80a2646:	601a      	strpl	r2, [r3, #0]
 80a2648:	4b10      	ldr	r3, [pc, #64]	; (80a268c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a264a:	681a      	ldr	r2, [r3, #0]
 80a264c:	07d1      	lsls	r1, r2, #31
 80a264e:	bf5c      	itt	pl
 80a2650:	2201      	movpl	r2, #1
 80a2652:	601a      	strpl	r2, [r3, #0]
 80a2654:	4b0e      	ldr	r3, [pc, #56]	; (80a2690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2656:	681a      	ldr	r2, [r3, #0]
 80a2658:	07d2      	lsls	r2, r2, #31
 80a265a:	bf5c      	itt	pl
 80a265c:	2201      	movpl	r2, #1
 80a265e:	601a      	strpl	r2, [r3, #0]
 80a2660:	4770      	bx	lr
 80a2662:	bf00      	nop
 80a2664:	20000b7c 	.word	0x20000b7c
 80a2668:	20000b78 	.word	0x20000b78
 80a266c:	20000b74 	.word	0x20000b74
 80a2670:	20000b70 	.word	0x20000b70
 80a2674:	20000b6c 	.word	0x20000b6c
 80a2678:	20000b68 	.word	0x20000b68
 80a267c:	20000b64 	.word	0x20000b64
 80a2680:	20000b60 	.word	0x20000b60
 80a2684:	20000b5c 	.word	0x20000b5c
 80a2688:	20000b58 	.word	0x20000b58
 80a268c:	20000b54 	.word	0x20000b54
 80a2690:	20000b50 	.word	0x20000b50

080a2694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2694:	4b24      	ldr	r3, [pc, #144]	; (80a2728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2696:	681a      	ldr	r2, [r3, #0]
 80a2698:	07d0      	lsls	r0, r2, #31
 80a269a:	bf5c      	itt	pl
 80a269c:	2201      	movpl	r2, #1
 80a269e:	601a      	strpl	r2, [r3, #0]
 80a26a0:	4b22      	ldr	r3, [pc, #136]	; (80a272c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a26a2:	681a      	ldr	r2, [r3, #0]
 80a26a4:	07d1      	lsls	r1, r2, #31
 80a26a6:	bf5c      	itt	pl
 80a26a8:	2201      	movpl	r2, #1
 80a26aa:	601a      	strpl	r2, [r3, #0]
 80a26ac:	4b20      	ldr	r3, [pc, #128]	; (80a2730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a26ae:	681a      	ldr	r2, [r3, #0]
 80a26b0:	07d2      	lsls	r2, r2, #31
 80a26b2:	bf5c      	itt	pl
 80a26b4:	2201      	movpl	r2, #1
 80a26b6:	601a      	strpl	r2, [r3, #0]
 80a26b8:	4b1e      	ldr	r3, [pc, #120]	; (80a2734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a26ba:	681a      	ldr	r2, [r3, #0]
 80a26bc:	07d0      	lsls	r0, r2, #31
 80a26be:	bf5c      	itt	pl
 80a26c0:	2201      	movpl	r2, #1
 80a26c2:	601a      	strpl	r2, [r3, #0]
 80a26c4:	4b1c      	ldr	r3, [pc, #112]	; (80a2738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a26c6:	681a      	ldr	r2, [r3, #0]
 80a26c8:	07d1      	lsls	r1, r2, #31
 80a26ca:	bf5c      	itt	pl
 80a26cc:	2201      	movpl	r2, #1
 80a26ce:	601a      	strpl	r2, [r3, #0]
 80a26d0:	4b1a      	ldr	r3, [pc, #104]	; (80a273c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a26d2:	681a      	ldr	r2, [r3, #0]
 80a26d4:	07d2      	lsls	r2, r2, #31
 80a26d6:	bf5c      	itt	pl
 80a26d8:	2201      	movpl	r2, #1
 80a26da:	601a      	strpl	r2, [r3, #0]
 80a26dc:	4b18      	ldr	r3, [pc, #96]	; (80a2740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a26de:	681a      	ldr	r2, [r3, #0]
 80a26e0:	07d0      	lsls	r0, r2, #31
 80a26e2:	bf5c      	itt	pl
 80a26e4:	2201      	movpl	r2, #1
 80a26e6:	601a      	strpl	r2, [r3, #0]
 80a26e8:	4b16      	ldr	r3, [pc, #88]	; (80a2744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a26ea:	681a      	ldr	r2, [r3, #0]
 80a26ec:	07d1      	lsls	r1, r2, #31
 80a26ee:	bf5c      	itt	pl
 80a26f0:	2201      	movpl	r2, #1
 80a26f2:	601a      	strpl	r2, [r3, #0]
 80a26f4:	4b14      	ldr	r3, [pc, #80]	; (80a2748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a26f6:	681a      	ldr	r2, [r3, #0]
 80a26f8:	07d2      	lsls	r2, r2, #31
 80a26fa:	bf5c      	itt	pl
 80a26fc:	2201      	movpl	r2, #1
 80a26fe:	601a      	strpl	r2, [r3, #0]
 80a2700:	4b12      	ldr	r3, [pc, #72]	; (80a274c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2702:	681a      	ldr	r2, [r3, #0]
 80a2704:	07d0      	lsls	r0, r2, #31
 80a2706:	bf5c      	itt	pl
 80a2708:	2201      	movpl	r2, #1
 80a270a:	601a      	strpl	r2, [r3, #0]
 80a270c:	4b10      	ldr	r3, [pc, #64]	; (80a2750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a270e:	681a      	ldr	r2, [r3, #0]
 80a2710:	07d1      	lsls	r1, r2, #31
 80a2712:	bf5c      	itt	pl
 80a2714:	2201      	movpl	r2, #1
 80a2716:	601a      	strpl	r2, [r3, #0]
 80a2718:	4b0e      	ldr	r3, [pc, #56]	; (80a2754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a271a:	681a      	ldr	r2, [r3, #0]
 80a271c:	07d2      	lsls	r2, r2, #31
 80a271e:	bf5c      	itt	pl
 80a2720:	2201      	movpl	r2, #1
 80a2722:	601a      	strpl	r2, [r3, #0]
 80a2724:	4770      	bx	lr
 80a2726:	bf00      	nop
 80a2728:	20000bac 	.word	0x20000bac
 80a272c:	20000ba8 	.word	0x20000ba8
 80a2730:	20000ba4 	.word	0x20000ba4
 80a2734:	20000ba0 	.word	0x20000ba0
 80a2738:	20000b9c 	.word	0x20000b9c
 80a273c:	20000b98 	.word	0x20000b98
 80a2740:	20000b94 	.word	0x20000b94
 80a2744:	20000b90 	.word	0x20000b90
 80a2748:	20000b8c 	.word	0x20000b8c
 80a274c:	20000b88 	.word	0x20000b88
 80a2750:	20000b84 	.word	0x20000b84
 80a2754:	20000b80 	.word	0x20000b80

080a2758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2758:	4b18      	ldr	r3, [pc, #96]	; (80a27bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a275a:	681a      	ldr	r2, [r3, #0]
 80a275c:	07d1      	lsls	r1, r2, #31
 80a275e:	bf5c      	itt	pl
 80a2760:	2201      	movpl	r2, #1
 80a2762:	601a      	strpl	r2, [r3, #0]
 80a2764:	4b16      	ldr	r3, [pc, #88]	; (80a27c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2766:	681a      	ldr	r2, [r3, #0]
 80a2768:	07d2      	lsls	r2, r2, #31
 80a276a:	bf5c      	itt	pl
 80a276c:	2201      	movpl	r2, #1
 80a276e:	601a      	strpl	r2, [r3, #0]
 80a2770:	4b14      	ldr	r3, [pc, #80]	; (80a27c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2772:	681a      	ldr	r2, [r3, #0]
 80a2774:	07d0      	lsls	r0, r2, #31
 80a2776:	bf5c      	itt	pl
 80a2778:	2201      	movpl	r2, #1
 80a277a:	601a      	strpl	r2, [r3, #0]
 80a277c:	4b12      	ldr	r3, [pc, #72]	; (80a27c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a277e:	681a      	ldr	r2, [r3, #0]
 80a2780:	07d1      	lsls	r1, r2, #31
 80a2782:	bf5c      	itt	pl
 80a2784:	2201      	movpl	r2, #1
 80a2786:	601a      	strpl	r2, [r3, #0]
 80a2788:	4b10      	ldr	r3, [pc, #64]	; (80a27cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a278a:	681a      	ldr	r2, [r3, #0]
 80a278c:	07d2      	lsls	r2, r2, #31
 80a278e:	bf5c      	itt	pl
 80a2790:	2201      	movpl	r2, #1
 80a2792:	601a      	strpl	r2, [r3, #0]
 80a2794:	4b0e      	ldr	r3, [pc, #56]	; (80a27d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2796:	681a      	ldr	r2, [r3, #0]
 80a2798:	07d0      	lsls	r0, r2, #31
 80a279a:	bf5c      	itt	pl
 80a279c:	2201      	movpl	r2, #1
 80a279e:	601a      	strpl	r2, [r3, #0]
 80a27a0:	4b0c      	ldr	r3, [pc, #48]	; (80a27d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a27a2:	681a      	ldr	r2, [r3, #0]
 80a27a4:	07d1      	lsls	r1, r2, #31
 80a27a6:	bf5c      	itt	pl
 80a27a8:	2201      	movpl	r2, #1
 80a27aa:	601a      	strpl	r2, [r3, #0]
 80a27ac:	4b0a      	ldr	r3, [pc, #40]	; (80a27d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a27ae:	681a      	ldr	r2, [r3, #0]
 80a27b0:	07d2      	lsls	r2, r2, #31
 80a27b2:	bf5c      	itt	pl
 80a27b4:	2201      	movpl	r2, #1
 80a27b6:	601a      	strpl	r2, [r3, #0]
 80a27b8:	4770      	bx	lr
 80a27ba:	bf00      	nop
 80a27bc:	20000bcc 	.word	0x20000bcc
 80a27c0:	20000bc8 	.word	0x20000bc8
 80a27c4:	20000bc4 	.word	0x20000bc4
 80a27c8:	20000bc0 	.word	0x20000bc0
 80a27cc:	20000bbc 	.word	0x20000bbc
 80a27d0:	20000bb8 	.word	0x20000bb8
 80a27d4:	20000bb4 	.word	0x20000bb4
 80a27d8:	20000bb0 	.word	0x20000bb0

080a27dc <__aeabi_drsub>:
 80a27dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a27e0:	e002      	b.n	80a27e8 <__adddf3>
 80a27e2:	bf00      	nop

080a27e4 <__aeabi_dsub>:
 80a27e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a27e8 <__adddf3>:
 80a27e8:	b530      	push	{r4, r5, lr}
 80a27ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a27ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a27f2:	ea94 0f05 	teq	r4, r5
 80a27f6:	bf08      	it	eq
 80a27f8:	ea90 0f02 	teqeq	r0, r2
 80a27fc:	bf1f      	itttt	ne
 80a27fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2802:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a280a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a280e:	f000 80e2 	beq.w	80a29d6 <__adddf3+0x1ee>
 80a2812:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a281a:	bfb8      	it	lt
 80a281c:	426d      	neglt	r5, r5
 80a281e:	dd0c      	ble.n	80a283a <__adddf3+0x52>
 80a2820:	442c      	add	r4, r5
 80a2822:	ea80 0202 	eor.w	r2, r0, r2
 80a2826:	ea81 0303 	eor.w	r3, r1, r3
 80a282a:	ea82 0000 	eor.w	r0, r2, r0
 80a282e:	ea83 0101 	eor.w	r1, r3, r1
 80a2832:	ea80 0202 	eor.w	r2, r0, r2
 80a2836:	ea81 0303 	eor.w	r3, r1, r3
 80a283a:	2d36      	cmp	r5, #54	; 0x36
 80a283c:	bf88      	it	hi
 80a283e:	bd30      	pophi	{r4, r5, pc}
 80a2840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a284c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2850:	d002      	beq.n	80a2858 <__adddf3+0x70>
 80a2852:	4240      	negs	r0, r0
 80a2854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a285c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2864:	d002      	beq.n	80a286c <__adddf3+0x84>
 80a2866:	4252      	negs	r2, r2
 80a2868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a286c:	ea94 0f05 	teq	r4, r5
 80a2870:	f000 80a7 	beq.w	80a29c2 <__adddf3+0x1da>
 80a2874:	f1a4 0401 	sub.w	r4, r4, #1
 80a2878:	f1d5 0e20 	rsbs	lr, r5, #32
 80a287c:	db0d      	blt.n	80a289a <__adddf3+0xb2>
 80a287e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2882:	fa22 f205 	lsr.w	r2, r2, r5
 80a2886:	1880      	adds	r0, r0, r2
 80a2888:	f141 0100 	adc.w	r1, r1, #0
 80a288c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2890:	1880      	adds	r0, r0, r2
 80a2892:	fa43 f305 	asr.w	r3, r3, r5
 80a2896:	4159      	adcs	r1, r3
 80a2898:	e00e      	b.n	80a28b8 <__adddf3+0xd0>
 80a289a:	f1a5 0520 	sub.w	r5, r5, #32
 80a289e:	f10e 0e20 	add.w	lr, lr, #32
 80a28a2:	2a01      	cmp	r2, #1
 80a28a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a28a8:	bf28      	it	cs
 80a28aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a28ae:	fa43 f305 	asr.w	r3, r3, r5
 80a28b2:	18c0      	adds	r0, r0, r3
 80a28b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a28b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a28bc:	d507      	bpl.n	80a28ce <__adddf3+0xe6>
 80a28be:	f04f 0e00 	mov.w	lr, #0
 80a28c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a28c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a28ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80a28ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a28d2:	d31b      	bcc.n	80a290c <__adddf3+0x124>
 80a28d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a28d8:	d30c      	bcc.n	80a28f4 <__adddf3+0x10c>
 80a28da:	0849      	lsrs	r1, r1, #1
 80a28dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80a28e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a28e4:	f104 0401 	add.w	r4, r4, #1
 80a28e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a28ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a28f0:	f080 809a 	bcs.w	80a2a28 <__adddf3+0x240>
 80a28f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a28f8:	bf08      	it	eq
 80a28fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a28fe:	f150 0000 	adcs.w	r0, r0, #0
 80a2902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2906:	ea41 0105 	orr.w	r1, r1, r5
 80a290a:	bd30      	pop	{r4, r5, pc}
 80a290c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2910:	4140      	adcs	r0, r0
 80a2912:	eb41 0101 	adc.w	r1, r1, r1
 80a2916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a291a:	f1a4 0401 	sub.w	r4, r4, #1
 80a291e:	d1e9      	bne.n	80a28f4 <__adddf3+0x10c>
 80a2920:	f091 0f00 	teq	r1, #0
 80a2924:	bf04      	itt	eq
 80a2926:	4601      	moveq	r1, r0
 80a2928:	2000      	moveq	r0, #0
 80a292a:	fab1 f381 	clz	r3, r1
 80a292e:	bf08      	it	eq
 80a2930:	3320      	addeq	r3, #32
 80a2932:	f1a3 030b 	sub.w	r3, r3, #11
 80a2936:	f1b3 0220 	subs.w	r2, r3, #32
 80a293a:	da0c      	bge.n	80a2956 <__adddf3+0x16e>
 80a293c:	320c      	adds	r2, #12
 80a293e:	dd08      	ble.n	80a2952 <__adddf3+0x16a>
 80a2940:	f102 0c14 	add.w	ip, r2, #20
 80a2944:	f1c2 020c 	rsb	r2, r2, #12
 80a2948:	fa01 f00c 	lsl.w	r0, r1, ip
 80a294c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2950:	e00c      	b.n	80a296c <__adddf3+0x184>
 80a2952:	f102 0214 	add.w	r2, r2, #20
 80a2956:	bfd8      	it	le
 80a2958:	f1c2 0c20 	rsble	ip, r2, #32
 80a295c:	fa01 f102 	lsl.w	r1, r1, r2
 80a2960:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2964:	bfdc      	itt	le
 80a2966:	ea41 010c 	orrle.w	r1, r1, ip
 80a296a:	4090      	lslle	r0, r2
 80a296c:	1ae4      	subs	r4, r4, r3
 80a296e:	bfa2      	ittt	ge
 80a2970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2974:	4329      	orrge	r1, r5
 80a2976:	bd30      	popge	{r4, r5, pc}
 80a2978:	ea6f 0404 	mvn.w	r4, r4
 80a297c:	3c1f      	subs	r4, #31
 80a297e:	da1c      	bge.n	80a29ba <__adddf3+0x1d2>
 80a2980:	340c      	adds	r4, #12
 80a2982:	dc0e      	bgt.n	80a29a2 <__adddf3+0x1ba>
 80a2984:	f104 0414 	add.w	r4, r4, #20
 80a2988:	f1c4 0220 	rsb	r2, r4, #32
 80a298c:	fa20 f004 	lsr.w	r0, r0, r4
 80a2990:	fa01 f302 	lsl.w	r3, r1, r2
 80a2994:	ea40 0003 	orr.w	r0, r0, r3
 80a2998:	fa21 f304 	lsr.w	r3, r1, r4
 80a299c:	ea45 0103 	orr.w	r1, r5, r3
 80a29a0:	bd30      	pop	{r4, r5, pc}
 80a29a2:	f1c4 040c 	rsb	r4, r4, #12
 80a29a6:	f1c4 0220 	rsb	r2, r4, #32
 80a29aa:	fa20 f002 	lsr.w	r0, r0, r2
 80a29ae:	fa01 f304 	lsl.w	r3, r1, r4
 80a29b2:	ea40 0003 	orr.w	r0, r0, r3
 80a29b6:	4629      	mov	r1, r5
 80a29b8:	bd30      	pop	{r4, r5, pc}
 80a29ba:	fa21 f004 	lsr.w	r0, r1, r4
 80a29be:	4629      	mov	r1, r5
 80a29c0:	bd30      	pop	{r4, r5, pc}
 80a29c2:	f094 0f00 	teq	r4, #0
 80a29c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a29ca:	bf06      	itte	eq
 80a29cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a29d0:	3401      	addeq	r4, #1
 80a29d2:	3d01      	subne	r5, #1
 80a29d4:	e74e      	b.n	80a2874 <__adddf3+0x8c>
 80a29d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a29da:	bf18      	it	ne
 80a29dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a29e0:	d029      	beq.n	80a2a36 <__adddf3+0x24e>
 80a29e2:	ea94 0f05 	teq	r4, r5
 80a29e6:	bf08      	it	eq
 80a29e8:	ea90 0f02 	teqeq	r0, r2
 80a29ec:	d005      	beq.n	80a29fa <__adddf3+0x212>
 80a29ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80a29f2:	bf04      	itt	eq
 80a29f4:	4619      	moveq	r1, r3
 80a29f6:	4610      	moveq	r0, r2
 80a29f8:	bd30      	pop	{r4, r5, pc}
 80a29fa:	ea91 0f03 	teq	r1, r3
 80a29fe:	bf1e      	ittt	ne
 80a2a00:	2100      	movne	r1, #0
 80a2a02:	2000      	movne	r0, #0
 80a2a04:	bd30      	popne	{r4, r5, pc}
 80a2a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2a0a:	d105      	bne.n	80a2a18 <__adddf3+0x230>
 80a2a0c:	0040      	lsls	r0, r0, #1
 80a2a0e:	4149      	adcs	r1, r1
 80a2a10:	bf28      	it	cs
 80a2a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2a16:	bd30      	pop	{r4, r5, pc}
 80a2a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2a1c:	bf3c      	itt	cc
 80a2a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2a22:	bd30      	popcc	{r4, r5, pc}
 80a2a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2a30:	f04f 0000 	mov.w	r0, #0
 80a2a34:	bd30      	pop	{r4, r5, pc}
 80a2a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2a3a:	bf1a      	itte	ne
 80a2a3c:	4619      	movne	r1, r3
 80a2a3e:	4610      	movne	r0, r2
 80a2a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2a44:	bf1c      	itt	ne
 80a2a46:	460b      	movne	r3, r1
 80a2a48:	4602      	movne	r2, r0
 80a2a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2a4e:	bf06      	itte	eq
 80a2a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2a54:	ea91 0f03 	teqeq	r1, r3
 80a2a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2a5c:	bd30      	pop	{r4, r5, pc}
 80a2a5e:	bf00      	nop

080a2a60 <__aeabi_ui2d>:
 80a2a60:	f090 0f00 	teq	r0, #0
 80a2a64:	bf04      	itt	eq
 80a2a66:	2100      	moveq	r1, #0
 80a2a68:	4770      	bxeq	lr
 80a2a6a:	b530      	push	{r4, r5, lr}
 80a2a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a74:	f04f 0500 	mov.w	r5, #0
 80a2a78:	f04f 0100 	mov.w	r1, #0
 80a2a7c:	e750      	b.n	80a2920 <__adddf3+0x138>
 80a2a7e:	bf00      	nop

080a2a80 <__aeabi_i2d>:
 80a2a80:	f090 0f00 	teq	r0, #0
 80a2a84:	bf04      	itt	eq
 80a2a86:	2100      	moveq	r1, #0
 80a2a88:	4770      	bxeq	lr
 80a2a8a:	b530      	push	{r4, r5, lr}
 80a2a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2a98:	bf48      	it	mi
 80a2a9a:	4240      	negmi	r0, r0
 80a2a9c:	f04f 0100 	mov.w	r1, #0
 80a2aa0:	e73e      	b.n	80a2920 <__adddf3+0x138>
 80a2aa2:	bf00      	nop

080a2aa4 <__aeabi_f2d>:
 80a2aa4:	0042      	lsls	r2, r0, #1
 80a2aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2aaa:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2ab2:	bf1f      	itttt	ne
 80a2ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2ac0:	4770      	bxne	lr
 80a2ac2:	f092 0f00 	teq	r2, #0
 80a2ac6:	bf14      	ite	ne
 80a2ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2acc:	4770      	bxeq	lr
 80a2ace:	b530      	push	{r4, r5, lr}
 80a2ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2adc:	e720      	b.n	80a2920 <__adddf3+0x138>
 80a2ade:	bf00      	nop

080a2ae0 <__aeabi_ul2d>:
 80a2ae0:	ea50 0201 	orrs.w	r2, r0, r1
 80a2ae4:	bf08      	it	eq
 80a2ae6:	4770      	bxeq	lr
 80a2ae8:	b530      	push	{r4, r5, lr}
 80a2aea:	f04f 0500 	mov.w	r5, #0
 80a2aee:	e00a      	b.n	80a2b06 <__aeabi_l2d+0x16>

080a2af0 <__aeabi_l2d>:
 80a2af0:	ea50 0201 	orrs.w	r2, r0, r1
 80a2af4:	bf08      	it	eq
 80a2af6:	4770      	bxeq	lr
 80a2af8:	b530      	push	{r4, r5, lr}
 80a2afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2afe:	d502      	bpl.n	80a2b06 <__aeabi_l2d+0x16>
 80a2b00:	4240      	negs	r0, r0
 80a2b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2b12:	f43f aedc 	beq.w	80a28ce <__adddf3+0xe6>
 80a2b16:	f04f 0203 	mov.w	r2, #3
 80a2b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2b1e:	bf18      	it	ne
 80a2b20:	3203      	addne	r2, #3
 80a2b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2b26:	bf18      	it	ne
 80a2b28:	3203      	addne	r2, #3
 80a2b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2b2e:	f1c2 0320 	rsb	r3, r2, #32
 80a2b32:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2b36:	fa20 f002 	lsr.w	r0, r0, r2
 80a2b3a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2b3e:	ea40 000e 	orr.w	r0, r0, lr
 80a2b42:	fa21 f102 	lsr.w	r1, r1, r2
 80a2b46:	4414      	add	r4, r2
 80a2b48:	e6c1      	b.n	80a28ce <__adddf3+0xe6>
 80a2b4a:	bf00      	nop

080a2b4c <__aeabi_dmul>:
 80a2b4c:	b570      	push	{r4, r5, r6, lr}
 80a2b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2b5a:	bf1d      	ittte	ne
 80a2b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2b60:	ea94 0f0c 	teqne	r4, ip
 80a2b64:	ea95 0f0c 	teqne	r5, ip
 80a2b68:	f000 f8de 	bleq	80a2d28 <__aeabi_dmul+0x1dc>
 80a2b6c:	442c      	add	r4, r5
 80a2b6e:	ea81 0603 	eor.w	r6, r1, r3
 80a2b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2b7e:	bf18      	it	ne
 80a2b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2b8c:	d038      	beq.n	80a2c00 <__aeabi_dmul+0xb4>
 80a2b8e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2b92:	f04f 0500 	mov.w	r5, #0
 80a2b96:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2ba2:	f04f 0600 	mov.w	r6, #0
 80a2ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2baa:	f09c 0f00 	teq	ip, #0
 80a2bae:	bf18      	it	ne
 80a2bb0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2bc0:	d204      	bcs.n	80a2bcc <__aeabi_dmul+0x80>
 80a2bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2bc6:	416d      	adcs	r5, r5
 80a2bc8:	eb46 0606 	adc.w	r6, r6, r6
 80a2bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2be4:	bf88      	it	hi
 80a2be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2bea:	d81e      	bhi.n	80a2c2a <__aeabi_dmul+0xde>
 80a2bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2bf0:	bf08      	it	eq
 80a2bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2bf6:	f150 0000 	adcs.w	r0, r0, #0
 80a2bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2bfe:	bd70      	pop	{r4, r5, r6, pc}
 80a2c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2c04:	ea46 0101 	orr.w	r1, r6, r1
 80a2c08:	ea40 0002 	orr.w	r0, r0, r2
 80a2c0c:	ea81 0103 	eor.w	r1, r1, r3
 80a2c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2c14:	bfc2      	ittt	gt
 80a2c16:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2c1e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2c24:	f04f 0e00 	mov.w	lr, #0
 80a2c28:	3c01      	subs	r4, #1
 80a2c2a:	f300 80ab 	bgt.w	80a2d84 <__aeabi_dmul+0x238>
 80a2c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2c32:	bfde      	ittt	le
 80a2c34:	2000      	movle	r0, #0
 80a2c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2c3a:	bd70      	pople	{r4, r5, r6, pc}
 80a2c3c:	f1c4 0400 	rsb	r4, r4, #0
 80a2c40:	3c20      	subs	r4, #32
 80a2c42:	da35      	bge.n	80a2cb0 <__aeabi_dmul+0x164>
 80a2c44:	340c      	adds	r4, #12
 80a2c46:	dc1b      	bgt.n	80a2c80 <__aeabi_dmul+0x134>
 80a2c48:	f104 0414 	add.w	r4, r4, #20
 80a2c4c:	f1c4 0520 	rsb	r5, r4, #32
 80a2c50:	fa00 f305 	lsl.w	r3, r0, r5
 80a2c54:	fa20 f004 	lsr.w	r0, r0, r4
 80a2c58:	fa01 f205 	lsl.w	r2, r1, r5
 80a2c5c:	ea40 0002 	orr.w	r0, r0, r2
 80a2c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2c6c:	fa21 f604 	lsr.w	r6, r1, r4
 80a2c70:	eb42 0106 	adc.w	r1, r2, r6
 80a2c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2c78:	bf08      	it	eq
 80a2c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2c7e:	bd70      	pop	{r4, r5, r6, pc}
 80a2c80:	f1c4 040c 	rsb	r4, r4, #12
 80a2c84:	f1c4 0520 	rsb	r5, r4, #32
 80a2c88:	fa00 f304 	lsl.w	r3, r0, r4
 80a2c8c:	fa20 f005 	lsr.w	r0, r0, r5
 80a2c90:	fa01 f204 	lsl.w	r2, r1, r4
 80a2c94:	ea40 0002 	orr.w	r0, r0, r2
 80a2c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2ca0:	f141 0100 	adc.w	r1, r1, #0
 80a2ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2ca8:	bf08      	it	eq
 80a2caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2cae:	bd70      	pop	{r4, r5, r6, pc}
 80a2cb0:	f1c4 0520 	rsb	r5, r4, #32
 80a2cb4:	fa00 f205 	lsl.w	r2, r0, r5
 80a2cb8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2cbc:	fa20 f304 	lsr.w	r3, r0, r4
 80a2cc0:	fa01 f205 	lsl.w	r2, r1, r5
 80a2cc4:	ea43 0302 	orr.w	r3, r3, r2
 80a2cc8:	fa21 f004 	lsr.w	r0, r1, r4
 80a2ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2cd0:	fa21 f204 	lsr.w	r2, r1, r4
 80a2cd4:	ea20 0002 	bic.w	r0, r0, r2
 80a2cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2ce0:	bf08      	it	eq
 80a2ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2ce6:	bd70      	pop	{r4, r5, r6, pc}
 80a2ce8:	f094 0f00 	teq	r4, #0
 80a2cec:	d10f      	bne.n	80a2d0e <__aeabi_dmul+0x1c2>
 80a2cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2cf2:	0040      	lsls	r0, r0, #1
 80a2cf4:	eb41 0101 	adc.w	r1, r1, r1
 80a2cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2cfc:	bf08      	it	eq
 80a2cfe:	3c01      	subeq	r4, #1
 80a2d00:	d0f7      	beq.n	80a2cf2 <__aeabi_dmul+0x1a6>
 80a2d02:	ea41 0106 	orr.w	r1, r1, r6
 80a2d06:	f095 0f00 	teq	r5, #0
 80a2d0a:	bf18      	it	ne
 80a2d0c:	4770      	bxne	lr
 80a2d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2d12:	0052      	lsls	r2, r2, #1
 80a2d14:	eb43 0303 	adc.w	r3, r3, r3
 80a2d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2d1c:	bf08      	it	eq
 80a2d1e:	3d01      	subeq	r5, #1
 80a2d20:	d0f7      	beq.n	80a2d12 <__aeabi_dmul+0x1c6>
 80a2d22:	ea43 0306 	orr.w	r3, r3, r6
 80a2d26:	4770      	bx	lr
 80a2d28:	ea94 0f0c 	teq	r4, ip
 80a2d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2d30:	bf18      	it	ne
 80a2d32:	ea95 0f0c 	teqne	r5, ip
 80a2d36:	d00c      	beq.n	80a2d52 <__aeabi_dmul+0x206>
 80a2d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d3c:	bf18      	it	ne
 80a2d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d42:	d1d1      	bne.n	80a2ce8 <__aeabi_dmul+0x19c>
 80a2d44:	ea81 0103 	eor.w	r1, r1, r3
 80a2d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2d4c:	f04f 0000 	mov.w	r0, #0
 80a2d50:	bd70      	pop	{r4, r5, r6, pc}
 80a2d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2d56:	bf06      	itte	eq
 80a2d58:	4610      	moveq	r0, r2
 80a2d5a:	4619      	moveq	r1, r3
 80a2d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2d60:	d019      	beq.n	80a2d96 <__aeabi_dmul+0x24a>
 80a2d62:	ea94 0f0c 	teq	r4, ip
 80a2d66:	d102      	bne.n	80a2d6e <__aeabi_dmul+0x222>
 80a2d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2d6c:	d113      	bne.n	80a2d96 <__aeabi_dmul+0x24a>
 80a2d6e:	ea95 0f0c 	teq	r5, ip
 80a2d72:	d105      	bne.n	80a2d80 <__aeabi_dmul+0x234>
 80a2d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2d78:	bf1c      	itt	ne
 80a2d7a:	4610      	movne	r0, r2
 80a2d7c:	4619      	movne	r1, r3
 80a2d7e:	d10a      	bne.n	80a2d96 <__aeabi_dmul+0x24a>
 80a2d80:	ea81 0103 	eor.w	r1, r1, r3
 80a2d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2d90:	f04f 0000 	mov.w	r0, #0
 80a2d94:	bd70      	pop	{r4, r5, r6, pc}
 80a2d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2d9e:	bd70      	pop	{r4, r5, r6, pc}

080a2da0 <__aeabi_ddiv>:
 80a2da0:	b570      	push	{r4, r5, r6, lr}
 80a2da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2dae:	bf1d      	ittte	ne
 80a2db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2db4:	ea94 0f0c 	teqne	r4, ip
 80a2db8:	ea95 0f0c 	teqne	r5, ip
 80a2dbc:	f000 f8a7 	bleq	80a2f0e <__aeabi_ddiv+0x16e>
 80a2dc0:	eba4 0405 	sub.w	r4, r4, r5
 80a2dc4:	ea81 0e03 	eor.w	lr, r1, r3
 80a2dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2dd0:	f000 8088 	beq.w	80a2ee4 <__aeabi_ddiv+0x144>
 80a2dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2df8:	429d      	cmp	r5, r3
 80a2dfa:	bf08      	it	eq
 80a2dfc:	4296      	cmpeq	r6, r2
 80a2dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2e06:	d202      	bcs.n	80a2e0e <__aeabi_ddiv+0x6e>
 80a2e08:	085b      	lsrs	r3, r3, #1
 80a2e0a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e0e:	1ab6      	subs	r6, r6, r2
 80a2e10:	eb65 0503 	sbc.w	r5, r5, r3
 80a2e14:	085b      	lsrs	r3, r3, #1
 80a2e16:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2e22:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e26:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e2a:	bf22      	ittt	cs
 80a2e2c:	1ab6      	subcs	r6, r6, r2
 80a2e2e:	4675      	movcs	r5, lr
 80a2e30:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2e34:	085b      	lsrs	r3, r3, #1
 80a2e36:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e3a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e42:	bf22      	ittt	cs
 80a2e44:	1ab6      	subcs	r6, r6, r2
 80a2e46:	4675      	movcs	r5, lr
 80a2e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2e4c:	085b      	lsrs	r3, r3, #1
 80a2e4e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e52:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e56:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e5a:	bf22      	ittt	cs
 80a2e5c:	1ab6      	subcs	r6, r6, r2
 80a2e5e:	4675      	movcs	r5, lr
 80a2e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2e64:	085b      	lsrs	r3, r3, #1
 80a2e66:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2e6a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2e72:	bf22      	ittt	cs
 80a2e74:	1ab6      	subcs	r6, r6, r2
 80a2e76:	4675      	movcs	r5, lr
 80a2e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2e7c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2e80:	d018      	beq.n	80a2eb4 <__aeabi_ddiv+0x114>
 80a2e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2e9e:	d1c0      	bne.n	80a2e22 <__aeabi_ddiv+0x82>
 80a2ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2ea4:	d10b      	bne.n	80a2ebe <__aeabi_ddiv+0x11e>
 80a2ea6:	ea41 0100 	orr.w	r1, r1, r0
 80a2eaa:	f04f 0000 	mov.w	r0, #0
 80a2eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2eb2:	e7b6      	b.n	80a2e22 <__aeabi_ddiv+0x82>
 80a2eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2eb8:	bf04      	itt	eq
 80a2eba:	4301      	orreq	r1, r0
 80a2ebc:	2000      	moveq	r0, #0
 80a2ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2ec2:	bf88      	it	hi
 80a2ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2ec8:	f63f aeaf 	bhi.w	80a2c2a <__aeabi_dmul+0xde>
 80a2ecc:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2ed0:	bf04      	itt	eq
 80a2ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2eda:	f150 0000 	adcs.w	r0, r0, #0
 80a2ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2ee2:	bd70      	pop	{r4, r5, r6, pc}
 80a2ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2ef0:	bfc2      	ittt	gt
 80a2ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2efa:	bd70      	popgt	{r4, r5, r6, pc}
 80a2efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2f00:	f04f 0e00 	mov.w	lr, #0
 80a2f04:	3c01      	subs	r4, #1
 80a2f06:	e690      	b.n	80a2c2a <__aeabi_dmul+0xde>
 80a2f08:	ea45 0e06 	orr.w	lr, r5, r6
 80a2f0c:	e68d      	b.n	80a2c2a <__aeabi_dmul+0xde>
 80a2f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2f12:	ea94 0f0c 	teq	r4, ip
 80a2f16:	bf08      	it	eq
 80a2f18:	ea95 0f0c 	teqeq	r5, ip
 80a2f1c:	f43f af3b 	beq.w	80a2d96 <__aeabi_dmul+0x24a>
 80a2f20:	ea94 0f0c 	teq	r4, ip
 80a2f24:	d10a      	bne.n	80a2f3c <__aeabi_ddiv+0x19c>
 80a2f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2f2a:	f47f af34 	bne.w	80a2d96 <__aeabi_dmul+0x24a>
 80a2f2e:	ea95 0f0c 	teq	r5, ip
 80a2f32:	f47f af25 	bne.w	80a2d80 <__aeabi_dmul+0x234>
 80a2f36:	4610      	mov	r0, r2
 80a2f38:	4619      	mov	r1, r3
 80a2f3a:	e72c      	b.n	80a2d96 <__aeabi_dmul+0x24a>
 80a2f3c:	ea95 0f0c 	teq	r5, ip
 80a2f40:	d106      	bne.n	80a2f50 <__aeabi_ddiv+0x1b0>
 80a2f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2f46:	f43f aefd 	beq.w	80a2d44 <__aeabi_dmul+0x1f8>
 80a2f4a:	4610      	mov	r0, r2
 80a2f4c:	4619      	mov	r1, r3
 80a2f4e:	e722      	b.n	80a2d96 <__aeabi_dmul+0x24a>
 80a2f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2f54:	bf18      	it	ne
 80a2f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2f5a:	f47f aec5 	bne.w	80a2ce8 <__aeabi_dmul+0x19c>
 80a2f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2f62:	f47f af0d 	bne.w	80a2d80 <__aeabi_dmul+0x234>
 80a2f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2f6a:	f47f aeeb 	bne.w	80a2d44 <__aeabi_dmul+0x1f8>
 80a2f6e:	e712      	b.n	80a2d96 <__aeabi_dmul+0x24a>

080a2f70 <__gedf2>:
 80a2f70:	f04f 3cff 	mov.w	ip, #4294967295
 80a2f74:	e006      	b.n	80a2f84 <__cmpdf2+0x4>
 80a2f76:	bf00      	nop

080a2f78 <__ledf2>:
 80a2f78:	f04f 0c01 	mov.w	ip, #1
 80a2f7c:	e002      	b.n	80a2f84 <__cmpdf2+0x4>
 80a2f7e:	bf00      	nop

080a2f80 <__cmpdf2>:
 80a2f80:	f04f 0c01 	mov.w	ip, #1
 80a2f84:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2f94:	bf18      	it	ne
 80a2f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a2f9a:	d01b      	beq.n	80a2fd4 <__cmpdf2+0x54>
 80a2f9c:	b001      	add	sp, #4
 80a2f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2fa2:	bf0c      	ite	eq
 80a2fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2fa8:	ea91 0f03 	teqne	r1, r3
 80a2fac:	bf02      	ittt	eq
 80a2fae:	ea90 0f02 	teqeq	r0, r2
 80a2fb2:	2000      	moveq	r0, #0
 80a2fb4:	4770      	bxeq	lr
 80a2fb6:	f110 0f00 	cmn.w	r0, #0
 80a2fba:	ea91 0f03 	teq	r1, r3
 80a2fbe:	bf58      	it	pl
 80a2fc0:	4299      	cmppl	r1, r3
 80a2fc2:	bf08      	it	eq
 80a2fc4:	4290      	cmpeq	r0, r2
 80a2fc6:	bf2c      	ite	cs
 80a2fc8:	17d8      	asrcs	r0, r3, #31
 80a2fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2fce:	f040 0001 	orr.w	r0, r0, #1
 80a2fd2:	4770      	bx	lr
 80a2fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2fdc:	d102      	bne.n	80a2fe4 <__cmpdf2+0x64>
 80a2fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2fe2:	d107      	bne.n	80a2ff4 <__cmpdf2+0x74>
 80a2fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2fec:	d1d6      	bne.n	80a2f9c <__cmpdf2+0x1c>
 80a2fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2ff2:	d0d3      	beq.n	80a2f9c <__cmpdf2+0x1c>
 80a2ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2ff8:	4770      	bx	lr
 80a2ffa:	bf00      	nop

080a2ffc <__aeabi_cdrcmple>:
 80a2ffc:	4684      	mov	ip, r0
 80a2ffe:	4610      	mov	r0, r2
 80a3000:	4662      	mov	r2, ip
 80a3002:	468c      	mov	ip, r1
 80a3004:	4619      	mov	r1, r3
 80a3006:	4663      	mov	r3, ip
 80a3008:	e000      	b.n	80a300c <__aeabi_cdcmpeq>
 80a300a:	bf00      	nop

080a300c <__aeabi_cdcmpeq>:
 80a300c:	b501      	push	{r0, lr}
 80a300e:	f7ff ffb7 	bl	80a2f80 <__cmpdf2>
 80a3012:	2800      	cmp	r0, #0
 80a3014:	bf48      	it	mi
 80a3016:	f110 0f00 	cmnmi.w	r0, #0
 80a301a:	bd01      	pop	{r0, pc}

080a301c <__aeabi_dcmpeq>:
 80a301c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3020:	f7ff fff4 	bl	80a300c <__aeabi_cdcmpeq>
 80a3024:	bf0c      	ite	eq
 80a3026:	2001      	moveq	r0, #1
 80a3028:	2000      	movne	r0, #0
 80a302a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a302e:	bf00      	nop

080a3030 <__aeabi_dcmplt>:
 80a3030:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3034:	f7ff ffea 	bl	80a300c <__aeabi_cdcmpeq>
 80a3038:	bf34      	ite	cc
 80a303a:	2001      	movcc	r0, #1
 80a303c:	2000      	movcs	r0, #0
 80a303e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3042:	bf00      	nop

080a3044 <__aeabi_dcmple>:
 80a3044:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3048:	f7ff ffe0 	bl	80a300c <__aeabi_cdcmpeq>
 80a304c:	bf94      	ite	ls
 80a304e:	2001      	movls	r0, #1
 80a3050:	2000      	movhi	r0, #0
 80a3052:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3056:	bf00      	nop

080a3058 <__aeabi_dcmpge>:
 80a3058:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a305c:	f7ff ffce 	bl	80a2ffc <__aeabi_cdrcmple>
 80a3060:	bf94      	ite	ls
 80a3062:	2001      	movls	r0, #1
 80a3064:	2000      	movhi	r0, #0
 80a3066:	f85d fb08 	ldr.w	pc, [sp], #8
 80a306a:	bf00      	nop

080a306c <__aeabi_dcmpgt>:
 80a306c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3070:	f7ff ffc4 	bl	80a2ffc <__aeabi_cdrcmple>
 80a3074:	bf34      	ite	cc
 80a3076:	2001      	movcc	r0, #1
 80a3078:	2000      	movcs	r0, #0
 80a307a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a307e:	bf00      	nop

080a3080 <__aeabi_dcmpun>:
 80a3080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3088:	d102      	bne.n	80a3090 <__aeabi_dcmpun+0x10>
 80a308a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a308e:	d10a      	bne.n	80a30a6 <__aeabi_dcmpun+0x26>
 80a3090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3098:	d102      	bne.n	80a30a0 <__aeabi_dcmpun+0x20>
 80a309a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a309e:	d102      	bne.n	80a30a6 <__aeabi_dcmpun+0x26>
 80a30a0:	f04f 0000 	mov.w	r0, #0
 80a30a4:	4770      	bx	lr
 80a30a6:	f04f 0001 	mov.w	r0, #1
 80a30aa:	4770      	bx	lr

080a30ac <__aeabi_d2iz>:
 80a30ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a30b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a30b4:	d215      	bcs.n	80a30e2 <__aeabi_d2iz+0x36>
 80a30b6:	d511      	bpl.n	80a30dc <__aeabi_d2iz+0x30>
 80a30b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a30bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a30c0:	d912      	bls.n	80a30e8 <__aeabi_d2iz+0x3c>
 80a30c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a30c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a30ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a30ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a30d2:	fa23 f002 	lsr.w	r0, r3, r2
 80a30d6:	bf18      	it	ne
 80a30d8:	4240      	negne	r0, r0
 80a30da:	4770      	bx	lr
 80a30dc:	f04f 0000 	mov.w	r0, #0
 80a30e0:	4770      	bx	lr
 80a30e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a30e6:	d105      	bne.n	80a30f4 <__aeabi_d2iz+0x48>
 80a30e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a30ec:	bf08      	it	eq
 80a30ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a30f2:	4770      	bx	lr
 80a30f4:	f04f 0000 	mov.w	r0, #0
 80a30f8:	4770      	bx	lr
 80a30fa:	bf00      	nop

080a30fc <__aeabi_d2uiz>:
 80a30fc:	004a      	lsls	r2, r1, #1
 80a30fe:	d211      	bcs.n	80a3124 <__aeabi_d2uiz+0x28>
 80a3100:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3104:	d211      	bcs.n	80a312a <__aeabi_d2uiz+0x2e>
 80a3106:	d50d      	bpl.n	80a3124 <__aeabi_d2uiz+0x28>
 80a3108:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a310c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3110:	d40e      	bmi.n	80a3130 <__aeabi_d2uiz+0x34>
 80a3112:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a311a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a311e:	fa23 f002 	lsr.w	r0, r3, r2
 80a3122:	4770      	bx	lr
 80a3124:	f04f 0000 	mov.w	r0, #0
 80a3128:	4770      	bx	lr
 80a312a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a312e:	d102      	bne.n	80a3136 <__aeabi_d2uiz+0x3a>
 80a3130:	f04f 30ff 	mov.w	r0, #4294967295
 80a3134:	4770      	bx	lr
 80a3136:	f04f 0000 	mov.w	r0, #0
 80a313a:	4770      	bx	lr

080a313c <__aeabi_frsub>:
 80a313c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3140:	e002      	b.n	80a3148 <__addsf3>
 80a3142:	bf00      	nop

080a3144 <__aeabi_fsub>:
 80a3144:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3148 <__addsf3>:
 80a3148:	0042      	lsls	r2, r0, #1
 80a314a:	bf1f      	itttt	ne
 80a314c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3150:	ea92 0f03 	teqne	r2, r3
 80a3154:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3158:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a315c:	d06a      	beq.n	80a3234 <__addsf3+0xec>
 80a315e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3162:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3166:	bfc1      	itttt	gt
 80a3168:	18d2      	addgt	r2, r2, r3
 80a316a:	4041      	eorgt	r1, r0
 80a316c:	4048      	eorgt	r0, r1
 80a316e:	4041      	eorgt	r1, r0
 80a3170:	bfb8      	it	lt
 80a3172:	425b      	neglt	r3, r3
 80a3174:	2b19      	cmp	r3, #25
 80a3176:	bf88      	it	hi
 80a3178:	4770      	bxhi	lr
 80a317a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a317e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3182:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3186:	bf18      	it	ne
 80a3188:	4240      	negne	r0, r0
 80a318a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a318e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3192:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3196:	bf18      	it	ne
 80a3198:	4249      	negne	r1, r1
 80a319a:	ea92 0f03 	teq	r2, r3
 80a319e:	d03f      	beq.n	80a3220 <__addsf3+0xd8>
 80a31a0:	f1a2 0201 	sub.w	r2, r2, #1
 80a31a4:	fa41 fc03 	asr.w	ip, r1, r3
 80a31a8:	eb10 000c 	adds.w	r0, r0, ip
 80a31ac:	f1c3 0320 	rsb	r3, r3, #32
 80a31b0:	fa01 f103 	lsl.w	r1, r1, r3
 80a31b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a31b8:	d502      	bpl.n	80a31c0 <__addsf3+0x78>
 80a31ba:	4249      	negs	r1, r1
 80a31bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a31c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a31c4:	d313      	bcc.n	80a31ee <__addsf3+0xa6>
 80a31c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a31ca:	d306      	bcc.n	80a31da <__addsf3+0x92>
 80a31cc:	0840      	lsrs	r0, r0, #1
 80a31ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80a31d2:	f102 0201 	add.w	r2, r2, #1
 80a31d6:	2afe      	cmp	r2, #254	; 0xfe
 80a31d8:	d251      	bcs.n	80a327e <__addsf3+0x136>
 80a31da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a31de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a31e2:	bf08      	it	eq
 80a31e4:	f020 0001 	biceq.w	r0, r0, #1
 80a31e8:	ea40 0003 	orr.w	r0, r0, r3
 80a31ec:	4770      	bx	lr
 80a31ee:	0049      	lsls	r1, r1, #1
 80a31f0:	eb40 0000 	adc.w	r0, r0, r0
 80a31f4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a31f8:	f1a2 0201 	sub.w	r2, r2, #1
 80a31fc:	d1ed      	bne.n	80a31da <__addsf3+0x92>
 80a31fe:	fab0 fc80 	clz	ip, r0
 80a3202:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3206:	ebb2 020c 	subs.w	r2, r2, ip
 80a320a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a320e:	bfaa      	itet	ge
 80a3210:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3214:	4252      	neglt	r2, r2
 80a3216:	4318      	orrge	r0, r3
 80a3218:	bfbc      	itt	lt
 80a321a:	40d0      	lsrlt	r0, r2
 80a321c:	4318      	orrlt	r0, r3
 80a321e:	4770      	bx	lr
 80a3220:	f092 0f00 	teq	r2, #0
 80a3224:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3228:	bf06      	itte	eq
 80a322a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a322e:	3201      	addeq	r2, #1
 80a3230:	3b01      	subne	r3, #1
 80a3232:	e7b5      	b.n	80a31a0 <__addsf3+0x58>
 80a3234:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3238:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a323c:	bf18      	it	ne
 80a323e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3242:	d021      	beq.n	80a3288 <__addsf3+0x140>
 80a3244:	ea92 0f03 	teq	r2, r3
 80a3248:	d004      	beq.n	80a3254 <__addsf3+0x10c>
 80a324a:	f092 0f00 	teq	r2, #0
 80a324e:	bf08      	it	eq
 80a3250:	4608      	moveq	r0, r1
 80a3252:	4770      	bx	lr
 80a3254:	ea90 0f01 	teq	r0, r1
 80a3258:	bf1c      	itt	ne
 80a325a:	2000      	movne	r0, #0
 80a325c:	4770      	bxne	lr
 80a325e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3262:	d104      	bne.n	80a326e <__addsf3+0x126>
 80a3264:	0040      	lsls	r0, r0, #1
 80a3266:	bf28      	it	cs
 80a3268:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a326c:	4770      	bx	lr
 80a326e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3272:	bf3c      	itt	cc
 80a3274:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3278:	4770      	bxcc	lr
 80a327a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a327e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3282:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3286:	4770      	bx	lr
 80a3288:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a328c:	bf16      	itet	ne
 80a328e:	4608      	movne	r0, r1
 80a3290:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3294:	4601      	movne	r1, r0
 80a3296:	0242      	lsls	r2, r0, #9
 80a3298:	bf06      	itte	eq
 80a329a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a329e:	ea90 0f01 	teqeq	r0, r1
 80a32a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a32a6:	4770      	bx	lr

080a32a8 <__aeabi_ui2f>:
 80a32a8:	f04f 0300 	mov.w	r3, #0
 80a32ac:	e004      	b.n	80a32b8 <__aeabi_i2f+0x8>
 80a32ae:	bf00      	nop

080a32b0 <__aeabi_i2f>:
 80a32b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a32b4:	bf48      	it	mi
 80a32b6:	4240      	negmi	r0, r0
 80a32b8:	ea5f 0c00 	movs.w	ip, r0
 80a32bc:	bf08      	it	eq
 80a32be:	4770      	bxeq	lr
 80a32c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a32c4:	4601      	mov	r1, r0
 80a32c6:	f04f 0000 	mov.w	r0, #0
 80a32ca:	e01c      	b.n	80a3306 <__aeabi_l2f+0x2a>

080a32cc <__aeabi_ul2f>:
 80a32cc:	ea50 0201 	orrs.w	r2, r0, r1
 80a32d0:	bf08      	it	eq
 80a32d2:	4770      	bxeq	lr
 80a32d4:	f04f 0300 	mov.w	r3, #0
 80a32d8:	e00a      	b.n	80a32f0 <__aeabi_l2f+0x14>
 80a32da:	bf00      	nop

080a32dc <__aeabi_l2f>:
 80a32dc:	ea50 0201 	orrs.w	r2, r0, r1
 80a32e0:	bf08      	it	eq
 80a32e2:	4770      	bxeq	lr
 80a32e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a32e8:	d502      	bpl.n	80a32f0 <__aeabi_l2f+0x14>
 80a32ea:	4240      	negs	r0, r0
 80a32ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a32f0:	ea5f 0c01 	movs.w	ip, r1
 80a32f4:	bf02      	ittt	eq
 80a32f6:	4684      	moveq	ip, r0
 80a32f8:	4601      	moveq	r1, r0
 80a32fa:	2000      	moveq	r0, #0
 80a32fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3300:	bf08      	it	eq
 80a3302:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3306:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a330a:	fabc f28c 	clz	r2, ip
 80a330e:	3a08      	subs	r2, #8
 80a3310:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3314:	db10      	blt.n	80a3338 <__aeabi_l2f+0x5c>
 80a3316:	fa01 fc02 	lsl.w	ip, r1, r2
 80a331a:	4463      	add	r3, ip
 80a331c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3320:	f1c2 0220 	rsb	r2, r2, #32
 80a3324:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3328:	fa20 f202 	lsr.w	r2, r0, r2
 80a332c:	eb43 0002 	adc.w	r0, r3, r2
 80a3330:	bf08      	it	eq
 80a3332:	f020 0001 	biceq.w	r0, r0, #1
 80a3336:	4770      	bx	lr
 80a3338:	f102 0220 	add.w	r2, r2, #32
 80a333c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3340:	f1c2 0220 	rsb	r2, r2, #32
 80a3344:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3348:	fa21 f202 	lsr.w	r2, r1, r2
 80a334c:	eb43 0002 	adc.w	r0, r3, r2
 80a3350:	bf08      	it	eq
 80a3352:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3356:	4770      	bx	lr

080a3358 <__aeabi_fmul>:
 80a3358:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a335c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3360:	bf1e      	ittt	ne
 80a3362:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3366:	ea92 0f0c 	teqne	r2, ip
 80a336a:	ea93 0f0c 	teqne	r3, ip
 80a336e:	d06f      	beq.n	80a3450 <__aeabi_fmul+0xf8>
 80a3370:	441a      	add	r2, r3
 80a3372:	ea80 0c01 	eor.w	ip, r0, r1
 80a3376:	0240      	lsls	r0, r0, #9
 80a3378:	bf18      	it	ne
 80a337a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a337e:	d01e      	beq.n	80a33be <__aeabi_fmul+0x66>
 80a3380:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3384:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3388:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a338c:	fba0 3101 	umull	r3, r1, r0, r1
 80a3390:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3394:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3398:	bf3e      	ittt	cc
 80a339a:	0049      	lslcc	r1, r1, #1
 80a339c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a33a0:	005b      	lslcc	r3, r3, #1
 80a33a2:	ea40 0001 	orr.w	r0, r0, r1
 80a33a6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a33aa:	2afd      	cmp	r2, #253	; 0xfd
 80a33ac:	d81d      	bhi.n	80a33ea <__aeabi_fmul+0x92>
 80a33ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a33b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a33b6:	bf08      	it	eq
 80a33b8:	f020 0001 	biceq.w	r0, r0, #1
 80a33bc:	4770      	bx	lr
 80a33be:	f090 0f00 	teq	r0, #0
 80a33c2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a33c6:	bf08      	it	eq
 80a33c8:	0249      	lsleq	r1, r1, #9
 80a33ca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a33ce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a33d2:	3a7f      	subs	r2, #127	; 0x7f
 80a33d4:	bfc2      	ittt	gt
 80a33d6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a33da:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a33de:	4770      	bxgt	lr
 80a33e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a33e4:	f04f 0300 	mov.w	r3, #0
 80a33e8:	3a01      	subs	r2, #1
 80a33ea:	dc5d      	bgt.n	80a34a8 <__aeabi_fmul+0x150>
 80a33ec:	f112 0f19 	cmn.w	r2, #25
 80a33f0:	bfdc      	itt	le
 80a33f2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a33f6:	4770      	bxle	lr
 80a33f8:	f1c2 0200 	rsb	r2, r2, #0
 80a33fc:	0041      	lsls	r1, r0, #1
 80a33fe:	fa21 f102 	lsr.w	r1, r1, r2
 80a3402:	f1c2 0220 	rsb	r2, r2, #32
 80a3406:	fa00 fc02 	lsl.w	ip, r0, r2
 80a340a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a340e:	f140 0000 	adc.w	r0, r0, #0
 80a3412:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3416:	bf08      	it	eq
 80a3418:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a341c:	4770      	bx	lr
 80a341e:	f092 0f00 	teq	r2, #0
 80a3422:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3426:	bf02      	ittt	eq
 80a3428:	0040      	lsleq	r0, r0, #1
 80a342a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a342e:	3a01      	subeq	r2, #1
 80a3430:	d0f9      	beq.n	80a3426 <__aeabi_fmul+0xce>
 80a3432:	ea40 000c 	orr.w	r0, r0, ip
 80a3436:	f093 0f00 	teq	r3, #0
 80a343a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a343e:	bf02      	ittt	eq
 80a3440:	0049      	lsleq	r1, r1, #1
 80a3442:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3446:	3b01      	subeq	r3, #1
 80a3448:	d0f9      	beq.n	80a343e <__aeabi_fmul+0xe6>
 80a344a:	ea41 010c 	orr.w	r1, r1, ip
 80a344e:	e78f      	b.n	80a3370 <__aeabi_fmul+0x18>
 80a3450:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3454:	ea92 0f0c 	teq	r2, ip
 80a3458:	bf18      	it	ne
 80a345a:	ea93 0f0c 	teqne	r3, ip
 80a345e:	d00a      	beq.n	80a3476 <__aeabi_fmul+0x11e>
 80a3460:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3464:	bf18      	it	ne
 80a3466:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a346a:	d1d8      	bne.n	80a341e <__aeabi_fmul+0xc6>
 80a346c:	ea80 0001 	eor.w	r0, r0, r1
 80a3470:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3474:	4770      	bx	lr
 80a3476:	f090 0f00 	teq	r0, #0
 80a347a:	bf17      	itett	ne
 80a347c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3480:	4608      	moveq	r0, r1
 80a3482:	f091 0f00 	teqne	r1, #0
 80a3486:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a348a:	d014      	beq.n	80a34b6 <__aeabi_fmul+0x15e>
 80a348c:	ea92 0f0c 	teq	r2, ip
 80a3490:	d101      	bne.n	80a3496 <__aeabi_fmul+0x13e>
 80a3492:	0242      	lsls	r2, r0, #9
 80a3494:	d10f      	bne.n	80a34b6 <__aeabi_fmul+0x15e>
 80a3496:	ea93 0f0c 	teq	r3, ip
 80a349a:	d103      	bne.n	80a34a4 <__aeabi_fmul+0x14c>
 80a349c:	024b      	lsls	r3, r1, #9
 80a349e:	bf18      	it	ne
 80a34a0:	4608      	movne	r0, r1
 80a34a2:	d108      	bne.n	80a34b6 <__aeabi_fmul+0x15e>
 80a34a4:	ea80 0001 	eor.w	r0, r0, r1
 80a34a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a34ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a34b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a34b4:	4770      	bx	lr
 80a34b6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a34ba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a34be:	4770      	bx	lr

080a34c0 <__aeabi_fdiv>:
 80a34c0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a34c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a34c8:	bf1e      	ittt	ne
 80a34ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a34ce:	ea92 0f0c 	teqne	r2, ip
 80a34d2:	ea93 0f0c 	teqne	r3, ip
 80a34d6:	d069      	beq.n	80a35ac <__aeabi_fdiv+0xec>
 80a34d8:	eba2 0203 	sub.w	r2, r2, r3
 80a34dc:	ea80 0c01 	eor.w	ip, r0, r1
 80a34e0:	0249      	lsls	r1, r1, #9
 80a34e2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a34e6:	d037      	beq.n	80a3558 <__aeabi_fdiv+0x98>
 80a34e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a34ec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a34f0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a34f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a34f8:	428b      	cmp	r3, r1
 80a34fa:	bf38      	it	cc
 80a34fc:	005b      	lslcc	r3, r3, #1
 80a34fe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3502:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3506:	428b      	cmp	r3, r1
 80a3508:	bf24      	itt	cs
 80a350a:	1a5b      	subcs	r3, r3, r1
 80a350c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3510:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3514:	bf24      	itt	cs
 80a3516:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a351a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a351e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3522:	bf24      	itt	cs
 80a3524:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3528:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a352c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3530:	bf24      	itt	cs
 80a3532:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3536:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a353a:	011b      	lsls	r3, r3, #4
 80a353c:	bf18      	it	ne
 80a353e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3542:	d1e0      	bne.n	80a3506 <__aeabi_fdiv+0x46>
 80a3544:	2afd      	cmp	r2, #253	; 0xfd
 80a3546:	f63f af50 	bhi.w	80a33ea <__aeabi_fmul+0x92>
 80a354a:	428b      	cmp	r3, r1
 80a354c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3550:	bf08      	it	eq
 80a3552:	f020 0001 	biceq.w	r0, r0, #1
 80a3556:	4770      	bx	lr
 80a3558:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a355c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3560:	327f      	adds	r2, #127	; 0x7f
 80a3562:	bfc2      	ittt	gt
 80a3564:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3568:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a356c:	4770      	bxgt	lr
 80a356e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3572:	f04f 0300 	mov.w	r3, #0
 80a3576:	3a01      	subs	r2, #1
 80a3578:	e737      	b.n	80a33ea <__aeabi_fmul+0x92>
 80a357a:	f092 0f00 	teq	r2, #0
 80a357e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3582:	bf02      	ittt	eq
 80a3584:	0040      	lsleq	r0, r0, #1
 80a3586:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a358a:	3a01      	subeq	r2, #1
 80a358c:	d0f9      	beq.n	80a3582 <__aeabi_fdiv+0xc2>
 80a358e:	ea40 000c 	orr.w	r0, r0, ip
 80a3592:	f093 0f00 	teq	r3, #0
 80a3596:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a359a:	bf02      	ittt	eq
 80a359c:	0049      	lsleq	r1, r1, #1
 80a359e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a35a2:	3b01      	subeq	r3, #1
 80a35a4:	d0f9      	beq.n	80a359a <__aeabi_fdiv+0xda>
 80a35a6:	ea41 010c 	orr.w	r1, r1, ip
 80a35aa:	e795      	b.n	80a34d8 <__aeabi_fdiv+0x18>
 80a35ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a35b0:	ea92 0f0c 	teq	r2, ip
 80a35b4:	d108      	bne.n	80a35c8 <__aeabi_fdiv+0x108>
 80a35b6:	0242      	lsls	r2, r0, #9
 80a35b8:	f47f af7d 	bne.w	80a34b6 <__aeabi_fmul+0x15e>
 80a35bc:	ea93 0f0c 	teq	r3, ip
 80a35c0:	f47f af70 	bne.w	80a34a4 <__aeabi_fmul+0x14c>
 80a35c4:	4608      	mov	r0, r1
 80a35c6:	e776      	b.n	80a34b6 <__aeabi_fmul+0x15e>
 80a35c8:	ea93 0f0c 	teq	r3, ip
 80a35cc:	d104      	bne.n	80a35d8 <__aeabi_fdiv+0x118>
 80a35ce:	024b      	lsls	r3, r1, #9
 80a35d0:	f43f af4c 	beq.w	80a346c <__aeabi_fmul+0x114>
 80a35d4:	4608      	mov	r0, r1
 80a35d6:	e76e      	b.n	80a34b6 <__aeabi_fmul+0x15e>
 80a35d8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a35dc:	bf18      	it	ne
 80a35de:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a35e2:	d1ca      	bne.n	80a357a <__aeabi_fdiv+0xba>
 80a35e4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a35e8:	f47f af5c 	bne.w	80a34a4 <__aeabi_fmul+0x14c>
 80a35ec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a35f0:	f47f af3c 	bne.w	80a346c <__aeabi_fmul+0x114>
 80a35f4:	e75f      	b.n	80a34b6 <__aeabi_fmul+0x15e>
 80a35f6:	bf00      	nop

080a35f8 <atol>:
 80a35f8:	220a      	movs	r2, #10
 80a35fa:	2100      	movs	r1, #0
 80a35fc:	f000 b8fe 	b.w	80a37fc <strtol>

080a3600 <__cxa_atexit>:
 80a3600:	b510      	push	{r4, lr}
 80a3602:	4c05      	ldr	r4, [pc, #20]	; (80a3618 <__cxa_atexit+0x18>)
 80a3604:	4613      	mov	r3, r2
 80a3606:	b12c      	cbz	r4, 80a3614 <__cxa_atexit+0x14>
 80a3608:	460a      	mov	r2, r1
 80a360a:	4601      	mov	r1, r0
 80a360c:	2002      	movs	r0, #2
 80a360e:	f3af 8000 	nop.w
 80a3612:	bd10      	pop	{r4, pc}
 80a3614:	4620      	mov	r0, r4
 80a3616:	bd10      	pop	{r4, pc}
 80a3618:	00000000 	.word	0x00000000

080a361c <memcpy>:
 80a361c:	b510      	push	{r4, lr}
 80a361e:	1e43      	subs	r3, r0, #1
 80a3620:	440a      	add	r2, r1
 80a3622:	4291      	cmp	r1, r2
 80a3624:	d004      	beq.n	80a3630 <memcpy+0x14>
 80a3626:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a362a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a362e:	e7f8      	b.n	80a3622 <memcpy+0x6>
 80a3630:	bd10      	pop	{r4, pc}

080a3632 <memset>:
 80a3632:	4603      	mov	r3, r0
 80a3634:	4402      	add	r2, r0
 80a3636:	4293      	cmp	r3, r2
 80a3638:	d002      	beq.n	80a3640 <memset+0xe>
 80a363a:	f803 1b01 	strb.w	r1, [r3], #1
 80a363e:	e7fa      	b.n	80a3636 <memset+0x4>
 80a3640:	4770      	bx	lr
	...

080a3644 <srand>:
 80a3644:	b538      	push	{r3, r4, r5, lr}
 80a3646:	4b12      	ldr	r3, [pc, #72]	; (80a3690 <srand+0x4c>)
 80a3648:	4605      	mov	r5, r0
 80a364a:	681c      	ldr	r4, [r3, #0]
 80a364c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a364e:	b9d3      	cbnz	r3, 80a3686 <srand+0x42>
 80a3650:	2018      	movs	r0, #24
 80a3652:	f7fe f981 	bl	80a1958 <malloc>
 80a3656:	f243 330e 	movw	r3, #13070	; 0x330e
 80a365a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a365c:	8003      	strh	r3, [r0, #0]
 80a365e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3662:	8043      	strh	r3, [r0, #2]
 80a3664:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3668:	8083      	strh	r3, [r0, #4]
 80a366a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a366e:	80c3      	strh	r3, [r0, #6]
 80a3670:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3674:	8103      	strh	r3, [r0, #8]
 80a3676:	2305      	movs	r3, #5
 80a3678:	8143      	strh	r3, [r0, #10]
 80a367a:	230b      	movs	r3, #11
 80a367c:	8183      	strh	r3, [r0, #12]
 80a367e:	2201      	movs	r2, #1
 80a3680:	2300      	movs	r3, #0
 80a3682:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3688:	2200      	movs	r2, #0
 80a368a:	611d      	str	r5, [r3, #16]
 80a368c:	615a      	str	r2, [r3, #20]
 80a368e:	bd38      	pop	{r3, r4, r5, pc}
 80a3690:	20000374 	.word	0x20000374

080a3694 <strcmp>:
 80a3694:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3698:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a369c:	2a01      	cmp	r2, #1
 80a369e:	bf28      	it	cs
 80a36a0:	429a      	cmpcs	r2, r3
 80a36a2:	d0f7      	beq.n	80a3694 <strcmp>
 80a36a4:	1ad0      	subs	r0, r2, r3
 80a36a6:	4770      	bx	lr

080a36a8 <strcpy>:
 80a36a8:	4603      	mov	r3, r0
 80a36aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a36ae:	f803 2b01 	strb.w	r2, [r3], #1
 80a36b2:	2a00      	cmp	r2, #0
 80a36b4:	d1f9      	bne.n	80a36aa <strcpy+0x2>
 80a36b6:	4770      	bx	lr

080a36b8 <strlen>:
 80a36b8:	4603      	mov	r3, r0
 80a36ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a36be:	2a00      	cmp	r2, #0
 80a36c0:	d1fb      	bne.n	80a36ba <strlen+0x2>
 80a36c2:	1a18      	subs	r0, r3, r0
 80a36c4:	3801      	subs	r0, #1
 80a36c6:	4770      	bx	lr

080a36c8 <strncpy>:
 80a36c8:	4603      	mov	r3, r0
 80a36ca:	b510      	push	{r4, lr}
 80a36cc:	b142      	cbz	r2, 80a36e0 <strncpy+0x18>
 80a36ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a36d2:	3a01      	subs	r2, #1
 80a36d4:	f803 4b01 	strb.w	r4, [r3], #1
 80a36d8:	2c00      	cmp	r4, #0
 80a36da:	d1f7      	bne.n	80a36cc <strncpy+0x4>
 80a36dc:	441a      	add	r2, r3
 80a36de:	e000      	b.n	80a36e2 <strncpy+0x1a>
 80a36e0:	bd10      	pop	{r4, pc}
 80a36e2:	4293      	cmp	r3, r2
 80a36e4:	d002      	beq.n	80a36ec <strncpy+0x24>
 80a36e6:	f803 4b01 	strb.w	r4, [r3], #1
 80a36ea:	e7fa      	b.n	80a36e2 <strncpy+0x1a>
 80a36ec:	bd10      	pop	{r4, pc}
	...

080a36f0 <_strtol_r>:
 80a36f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a36f4:	460f      	mov	r7, r1
 80a36f6:	4680      	mov	r8, r0
 80a36f8:	483f      	ldr	r0, [pc, #252]	; (80a37f8 <_strtol_r+0x108>)
 80a36fa:	f8d0 9000 	ldr.w	r9, [r0]
 80a36fe:	463d      	mov	r5, r7
 80a3700:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a3704:	eb09 0004 	add.w	r0, r9, r4
 80a3708:	7840      	ldrb	r0, [r0, #1]
 80a370a:	f000 0008 	and.w	r0, r0, #8
 80a370e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a3712:	b108      	cbz	r0, 80a3718 <_strtol_r+0x28>
 80a3714:	462f      	mov	r7, r5
 80a3716:	e7f2      	b.n	80a36fe <_strtol_r+0xe>
 80a3718:	2c2d      	cmp	r4, #45	; 0x2d
 80a371a:	d103      	bne.n	80a3724 <_strtol_r+0x34>
 80a371c:	1cbd      	adds	r5, r7, #2
 80a371e:	787c      	ldrb	r4, [r7, #1]
 80a3720:	2601      	movs	r6, #1
 80a3722:	e003      	b.n	80a372c <_strtol_r+0x3c>
 80a3724:	2c2b      	cmp	r4, #43	; 0x2b
 80a3726:	bf04      	itt	eq
 80a3728:	787c      	ldrbeq	r4, [r7, #1]
 80a372a:	1cbd      	addeq	r5, r7, #2
 80a372c:	b113      	cbz	r3, 80a3734 <_strtol_r+0x44>
 80a372e:	2b10      	cmp	r3, #16
 80a3730:	d10a      	bne.n	80a3748 <_strtol_r+0x58>
 80a3732:	e05b      	b.n	80a37ec <_strtol_r+0xfc>
 80a3734:	2c30      	cmp	r4, #48	; 0x30
 80a3736:	d157      	bne.n	80a37e8 <_strtol_r+0xf8>
 80a3738:	7828      	ldrb	r0, [r5, #0]
 80a373a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a373e:	2858      	cmp	r0, #88	; 0x58
 80a3740:	d14d      	bne.n	80a37de <_strtol_r+0xee>
 80a3742:	786c      	ldrb	r4, [r5, #1]
 80a3744:	2310      	movs	r3, #16
 80a3746:	3502      	adds	r5, #2
 80a3748:	2e00      	cmp	r6, #0
 80a374a:	bf14      	ite	ne
 80a374c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a3750:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a3754:	fbbc faf3 	udiv	sl, ip, r3
 80a3758:	2700      	movs	r7, #0
 80a375a:	4638      	mov	r0, r7
 80a375c:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a3760:	eb09 0e04 	add.w	lr, r9, r4
 80a3764:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a3768:	f01e 0f04 	tst.w	lr, #4
 80a376c:	d001      	beq.n	80a3772 <_strtol_r+0x82>
 80a376e:	3c30      	subs	r4, #48	; 0x30
 80a3770:	e00b      	b.n	80a378a <_strtol_r+0x9a>
 80a3772:	f01e 0e03 	ands.w	lr, lr, #3
 80a3776:	d01b      	beq.n	80a37b0 <_strtol_r+0xc0>
 80a3778:	f1be 0f01 	cmp.w	lr, #1
 80a377c:	bf0c      	ite	eq
 80a377e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a3782:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a3786:	ebce 0404 	rsb	r4, lr, r4
 80a378a:	42a3      	cmp	r3, r4
 80a378c:	dd10      	ble.n	80a37b0 <_strtol_r+0xc0>
 80a378e:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a3792:	d00a      	beq.n	80a37aa <_strtol_r+0xba>
 80a3794:	4550      	cmp	r0, sl
 80a3796:	d806      	bhi.n	80a37a6 <_strtol_r+0xb6>
 80a3798:	d101      	bne.n	80a379e <_strtol_r+0xae>
 80a379a:	4564      	cmp	r4, ip
 80a379c:	dc03      	bgt.n	80a37a6 <_strtol_r+0xb6>
 80a379e:	fb03 4000 	mla	r0, r3, r0, r4
 80a37a2:	2701      	movs	r7, #1
 80a37a4:	e001      	b.n	80a37aa <_strtol_r+0xba>
 80a37a6:	f04f 37ff 	mov.w	r7, #4294967295
 80a37aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a37ae:	e7d7      	b.n	80a3760 <_strtol_r+0x70>
 80a37b0:	1c7b      	adds	r3, r7, #1
 80a37b2:	d10c      	bne.n	80a37ce <_strtol_r+0xde>
 80a37b4:	2e00      	cmp	r6, #0
 80a37b6:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a37ba:	bf14      	ite	ne
 80a37bc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a37c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a37c4:	f8c8 3000 	str.w	r3, [r8]
 80a37c8:	b92a      	cbnz	r2, 80a37d6 <_strtol_r+0xe6>
 80a37ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a37ce:	b106      	cbz	r6, 80a37d2 <_strtol_r+0xe2>
 80a37d0:	4240      	negs	r0, r0
 80a37d2:	b172      	cbz	r2, 80a37f2 <_strtol_r+0x102>
 80a37d4:	b107      	cbz	r7, 80a37d8 <_strtol_r+0xe8>
 80a37d6:	1e69      	subs	r1, r5, #1
 80a37d8:	6011      	str	r1, [r2, #0]
 80a37da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a37de:	2430      	movs	r4, #48	; 0x30
 80a37e0:	2b00      	cmp	r3, #0
 80a37e2:	d1b1      	bne.n	80a3748 <_strtol_r+0x58>
 80a37e4:	2308      	movs	r3, #8
 80a37e6:	e7af      	b.n	80a3748 <_strtol_r+0x58>
 80a37e8:	230a      	movs	r3, #10
 80a37ea:	e7ad      	b.n	80a3748 <_strtol_r+0x58>
 80a37ec:	2c30      	cmp	r4, #48	; 0x30
 80a37ee:	d0a3      	beq.n	80a3738 <_strtol_r+0x48>
 80a37f0:	e7aa      	b.n	80a3748 <_strtol_r+0x58>
 80a37f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a37f6:	bf00      	nop
 80a37f8:	20000310 	.word	0x20000310

080a37fc <strtol>:
 80a37fc:	4613      	mov	r3, r2
 80a37fe:	460a      	mov	r2, r1
 80a3800:	4601      	mov	r1, r0
 80a3802:	4802      	ldr	r0, [pc, #8]	; (80a380c <strtol+0x10>)
 80a3804:	6800      	ldr	r0, [r0, #0]
 80a3806:	f7ff bf73 	b.w	80a36f0 <_strtol_r>
 80a380a:	bf00      	nop
 80a380c:	20000374 	.word	0x20000374

080a3810 <dynalib_user>:
 80a3810:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a3820:	00000000 62006e6f 20747461 746c6f76     ....on.batt volt
 80a3830:	61657220 61662064 64656c69 74616200      read failed.bat
 80a3840:	75632074 65722072 66206461 656c6961     t cur read faile
 80a3850:	56500064 6c6f7620 65722074 66206461     d.PV volt read f
 80a3860:	656c6961 56500064 72756320 65722072     ailed.PV curr re
 80a3870:	66206461 656c6961 6f6c0064 72206461     ad failed.load r
 80a3880:	20646165 6c696166 74006465 65706d65     ead failed.tempe
 80a3890:	75746172 72206572 20646165 6c696166     rature read fail
 80a38a0:	53006465 7220434f 20646165 6c696166     ed.SOC read fail
 80a38b0:	48006465 65746165 6f435f72 6f72746e     ed.Heater_Contro
 80a38c0:	6e6f5f6c 66666f5f 5f565000 746c6f56     l_on_off.PV_Volt
 80a38d0:	00656761 435f5650 65727275 5000746e     age.PV_Current.P
 80a38e0:	6f505f56 00726577 495f5650 6e490044     V_Power.PV_ID.In
 80a38f0:	65646973 6d65545f 61726570 65727574     side_Temperature
 80a3900:	74754f00 65646973 6d65545f 61726570     .Outside_Tempera
 80a3910:	65727574 61654800 5f726574 72727543     ture.Heater_Curr
 80a3920:	00746e65 74616548 505f7265 7265776f     ent.Heater_Power
 80a3930:	74614200 79726574 6c6f565f 65676174     .Battery_Voltage
 80a3940:	74614200 79726574 7275435f 746e6572     .Battery_Current
 80a3950:	74614200 79726574 6168435f 5f656772     .Battery_Charge_
 80a3960:	65776f50 61420072 72657474 4f535f79     Power.Battery_SO
 80a3970:	61420043 72657474 4f533179 61420043     C.Battery1SOC.Ba
 80a3980:	72657474 4f533279 61420043 72657474     ttery2SOC.Batter
 80a3990:	4f533379 61420043 72657474 4f533479     y3SOC.Battery4SO
 80a39a0:	61420043 72657474 614d5f79 65545f78     C.Battery_Max_Te
 80a39b0:	4200706d 65747461 4d5f7972 545f6e69     mp.Battery_Min_T
 80a39c0:	00706d65 5f737067 69726573 47006c61     emp.gps_serial.G
 80a39d0:	434d5250 524e4700 4700434d 41474750     PRMC.GNRMC.GPGGA
 80a39e0:	474e4700 4e004147 454e4e00 454e4500     .GNGGA.N.NNE.ENE
 80a39f0:	45534500 45535300 53005300 57005753     .ESE.SSE.S.SSW.W
 80a3a00:	57005753 4e00574e 5400574e 00203a58     SW.WNW.NNW.TX: .
 80a3a10:	203a5852 00000000                       RX: ....

080a3a18 <_ZTV8SPIClass>:
	...
 80a3a20:	080a1999 080a199b 006e616e 0066766f     ........nan.ovf.
 80a3a30:	6e69002e 6e6c0066 006e6600 65646f63     ..inf.ln.fn.code
 80a3a40:	74656400 006c6961 25000a0d 75303130     .detail....%010u
 80a3a50:	205d0020 00642500 2800202c 00203a29      .] .%d., .(): .
 80a3a60:	63005b20 2065646f 2500203d 65640069      [.code = .%i.de
 80a3a70:	6c696174 203d2073 75616200 65530064     tails = .baud.Se
 80a3a80:	6c616972 42535500 69726553 00316c61     rial.USBSerial1.
 80a3a90:	65707974 72617000 63006d61 6900646d     type.param.cmd.i
 80a3aa0:	6e680064 74730064 66006d72 00746c69     d.hnd.strm.filt.
 80a3ab0:	006c766c 48646461 6c646e61 72007265     lvl.addHandler.r
 80a3ac0:	766f6d65 6e614865 72656c64 756e6500     emoveHandler.enu
 80a3ad0:	6e61486d 72656c64 534a0073 74534e4f     mHandlers.JSONSt
 80a3ae0:	6d616572 48676f4c 6c646e61 61007265     reamLogHandler.a
 80a3af0:	6e007070 00656e6f 63617274 6e690065     pp.none.trace.in
 80a3b00:	77006f66 006e7261 6f727265 61700072     fo.warn.error.pa
 80a3b10:	0063696e 006c6c61 2b25005a 3a643330     nic.all.Z.%+03d:
 80a3b20:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 80a3b30:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 80a3b40:	00000000                                ....

080a3b44 <_ZTV9IPAddress>:
	...
 80a3b4c:	080a2011 080a2003 080a2005              . ... ... ..

080a3b58 <_ZTV9USBSerial>:
	...
 80a3b60:	080a2079 080a20bd 080a2097 080a1b25     y ... ... ..%...
 80a3b70:	080a2091 080a207b 080a2083 080a20b7     . ..{ ... ... ..
 80a3b80:	080a208b 080a2075                       . ..u ..

080a3b88 <_ZTV11USARTSerial>:
	...
 80a3b90:	080a1015 080a1017 080a2203 080a1b25     ........."..%...
 80a3ba0:	080a21eb 080a21f7 080a21f1 080a21fd     .!...!...!...!..
 80a3bb0:	080a21e1 080a21e5                       .!...!..

080a3bb8 <_ZTV7TwoWire>:
	...
 80a3bc0:	080a22b5 080a22ff 080a22d7 080a22b7     ."..."..."..."..
 80a3bd0:	080a22df 080a22e7 080a22ef 080a22f7     ."..."..."..."..

080a3be0 <_ZTVN5spark9WiFiClassE>:
	...
 80a3be8:	080a2361                                a#..

080a3bec <_ZSt7nothrow>:
	...

080a3bed <_ctype_>:
 80a3bed:	20202000 20202020 28282020 20282828     .         ((((( 
 80a3bfd:	20202020 20202020 20202020 20202020                     
 80a3c0d:	10108820 10101010 10101010 10101010      ...............
 80a3c1d:	04040410 04040404 10040404 10101010     ................
 80a3c2d:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a3c3d:	01010101 01010101 01010101 10101010     ................
 80a3c4d:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a3c5d:	02020202 02020202 02020202 10101010     ................
 80a3c6d:	00000020 00000000 00000000 00000000      ...............
	...

080a3cf0 <__sf_fake_stdin>:
	...

080a3d10 <__sf_fake_stdout>:
	...

080a3d30 <__sf_fake_stderr>:
	...

080a3d50 <link_const_variable_data_end>:
 80a3d50:	080a00b3 	.word	0x080a00b3
 80a3d54:	080a00b7 	.word	0x080a00b7
 80a3d58:	080a00bb 	.word	0x080a00bb
 80a3d5c:	080a00e9 	.word	0x080a00e9
 80a3d60:	080a0409 	.word	0x080a0409
 80a3d64:	080a0481 	.word	0x080a0481
 80a3d68:	080a0485 	.word	0x080a0485
 80a3d6c:	080a0759 	.word	0x080a0759
 80a3d70:	080a0a6b 	.word	0x080a0a6b
 80a3d74:	080a1011 	.word	0x080a1011
 80a3d78:	080a1519 	.word	0x080a1519
 80a3d7c:	080a155d 	.word	0x080a155d
 80a3d80:	080a1561 	.word	0x080a1561
 80a3d84:	080a1565 	.word	0x080a1565
 80a3d88:	080a1569 	.word	0x080a1569
 80a3d8c:	080a156d 	.word	0x080a156d
 80a3d90:	080a1571 	.word	0x080a1571
 80a3d94:	080a1575 	.word	0x080a1575
 80a3d98:	080a1579 	.word	0x080a1579
 80a3d9c:	080a157d 	.word	0x080a157d
 80a3da0:	080a1581 	.word	0x080a1581
 80a3da4:	080a1585 	.word	0x080a1585
 80a3da8:	080a1589 	.word	0x080a1589
 80a3dac:	080a158d 	.word	0x080a158d
 80a3db0:	080a1591 	.word	0x080a1591
 80a3db4:	080a1595 	.word	0x080a1595
 80a3db8:	080a1599 	.word	0x080a1599
 80a3dbc:	080a159d 	.word	0x080a159d
 80a3dc0:	080a15a1 	.word	0x080a15a1
 80a3dc4:	080a15a5 	.word	0x080a15a5
 80a3dc8:	080a15a9 	.word	0x080a15a9
 80a3dcc:	080a19d9 	.word	0x080a19d9
 80a3dd0:	080a1db1 	.word	0x080a1db1
 80a3dd4:	080a1e2d 	.word	0x080a1e2d
 80a3dd8:	080a1e55 	.word	0x080a1e55
 80a3ddc:	080a236d 	.word	0x080a236d
 80a3de0:	080a2459 	.word	0x080a2459
 80a3de4:	080a249d 	.word	0x080a249d
 80a3de8:	080a254d 	.word	0x080a254d
 80a3dec:	080a25d1 	.word	0x080a25d1
 80a3df0:	080a2695 	.word	0x080a2695
 80a3df4:	080a2759 	.word	0x080a2759

080a3df8 <link_constructors_end>:
	...
